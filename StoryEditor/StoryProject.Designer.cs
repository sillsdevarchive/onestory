//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace OneStoryProjectEditor {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private StoryProjectDataTable tableStoryProject;
        
        private MembersDataTable tableMembers;
        
        private MemberDataTable tableMember;
        
        private LanguagesDataTable tableLanguages;
        
        private LanguageInfoDataTable tableLanguageInfo;
        
        private AdaptItConfigurationsDataTable tableAdaptItConfigurations;
        
        private AdaptItConfigurationDataTable tableAdaptItConfiguration;
        
        private LnCNotesDataTable tableLnCNotes;
        
        private LnCNoteDataTable tableLnCNote;
        
        private storiesDataTable tablestories;
        
        private storyDataTable tablestory;
        
        private CraftingInfoDataTable tableCraftingInfo;
        
        private StoryCrafterDataTable tableStoryCrafter;
        
        private ProjectFacilitatorDataTable tableProjectFacilitator;
        
        private ConsultantDataTable tableConsultant;
        
        private CoachDataTable tableCoach;
        
        private BackTranslatorDataTable tableBackTranslator;
        
        private OutsideEnglishBackTranslatorDataTable tableOutsideEnglishBackTranslator;
        
        private TestsRetellingsDataTable tableTestsRetellings;
        
        private TestRetellingDataTable tableTestRetelling;
        
        private TestsTqAnswersDataTable tableTestsTqAnswers;
        
        private TestTqAnswerDataTable tableTestTqAnswer;
        
        private TransitionHistoryDataTable tableTransitionHistory;
        
        private StateTransitionDataTable tableStateTransition;
        
        private VersesDataTable tableVerses;
        
        private VerseDataTable tableVerse;
        
        private StoryLineDataTable tableStoryLine;
        
        private AnchorsDataTable tableAnchors;
        
        private AnchorDataTable tableAnchor;
        
        private ExegeticalHelpsDataTable tableExegeticalHelps;
        
        private ExegeticalHelpDataTable tableExegeticalHelp;
        
        private TestQuestionsDataTable tableTestQuestions;
        
        private TestQuestionDataTable tableTestQuestion;
        
        private TestQuestionLineDataTable tableTestQuestionLine;
        
        private AnswersDataTable tableAnswers;
        
        private AnswerDataTable tableAnswer;
        
        private RetellingsDataTable tableRetellings;
        
        private RetellingDataTable tableRetelling;
        
        private ConsultantNotesDataTable tableConsultantNotes;
        
        private ConsultantConversationDataTable tableConsultantConversation;
        
        private ConsultantNoteDataTable tableConsultantNote;
        
        private CoachNotesDataTable tableCoachNotes;
        
        private CoachConversationDataTable tableCoachConversation;
        
        private CoachNoteDataTable tableCoachNote;
        
        private global::System.Data.DataRelation relationStoryProject_Members;
        
        private global::System.Data.DataRelation relationMembers_Member;
        
        private global::System.Data.DataRelation relationStoryProject_Languages;
        
        private global::System.Data.DataRelation relationLanguages_LanguageInfo;
        
        private global::System.Data.DataRelation relationStoryProject_AdaptItConfigurations;
        
        private global::System.Data.DataRelation relationAdaptItConfigurations_AdaptItConfiguration;
        
        private global::System.Data.DataRelation relationStoryProject_LnCNotes;
        
        private global::System.Data.DataRelation relationLnCNotes_LnCNote;
        
        private global::System.Data.DataRelation relationStoryProject_stories;
        
        private global::System.Data.DataRelation relationstories_story;
        
        private global::System.Data.DataRelation relationstory_CraftingInfo;
        
        private global::System.Data.DataRelation relationCraftingInfo_StoryCrafter;
        
        private global::System.Data.DataRelation relationCraftingInfo_ProjectFacilitator;
        
        private global::System.Data.DataRelation relationCraftingInfo_Consultant;
        
        private global::System.Data.DataRelation relationCraftingInfo_Coach;
        
        private global::System.Data.DataRelation relationCraftingInfo_BackTranslator;
        
        private global::System.Data.DataRelation relationCraftingInfo_OutsideEnglishBackTranslator;
        
        private global::System.Data.DataRelation relationCraftingInfo_TestsRetellings;
        
        private global::System.Data.DataRelation relationTestsRetellings_TestRetelling;
        
        private global::System.Data.DataRelation relationCraftingInfo_TestsTqAnswers;
        
        private global::System.Data.DataRelation relationTestsTqAnswers_TestTqAnswer;
        
        private global::System.Data.DataRelation relationstory_TransitionHistory;
        
        private global::System.Data.DataRelation relationTransitionHistory_StateTransition;
        
        private global::System.Data.DataRelation relationstory_Verses;
        
        private global::System.Data.DataRelation relationVerses_Verse;
        
        private global::System.Data.DataRelation relationVerse_StoryLine;
        
        private global::System.Data.DataRelation relationVerse_Anchors;
        
        private global::System.Data.DataRelation relationAnchors_Anchor;
        
        private global::System.Data.DataRelation relationVerse_ExegeticalHelps;
        
        private global::System.Data.DataRelation relationExegeticalHelps_ExegeticalHelp;
        
        private global::System.Data.DataRelation relationVerse_TestQuestions;
        
        private global::System.Data.DataRelation relationTestQuestions_TestQuestion;
        
        private global::System.Data.DataRelation relationTestQuestion_TestQuestionLine;
        
        private global::System.Data.DataRelation relationTestQuestion_Answers;
        
        private global::System.Data.DataRelation relationAnswers_Answer;
        
        private global::System.Data.DataRelation relationVerse_Retellings;
        
        private global::System.Data.DataRelation relationRetellings_Retelling;
        
        private global::System.Data.DataRelation relationVerse_ConsultantNotes;
        
        private global::System.Data.DataRelation relationConsultantNotes_ConsultantConversation;
        
        private global::System.Data.DataRelation relationConsultantConversation_ConsultantNote;
        
        private global::System.Data.DataRelation relationVerse_CoachNotes;
        
        private global::System.Data.DataRelation relationCoachNotes_CoachConversation;
        
        private global::System.Data.DataRelation relationCoachConversation_CoachNote;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["StoryProject"] != null)) {
                    base.Tables.Add(new StoryProjectDataTable(ds.Tables["StoryProject"]));
                }
                if ((ds.Tables["Members"] != null)) {
                    base.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
                }
                if ((ds.Tables["Member"] != null)) {
                    base.Tables.Add(new MemberDataTable(ds.Tables["Member"]));
                }
                if ((ds.Tables["Languages"] != null)) {
                    base.Tables.Add(new LanguagesDataTable(ds.Tables["Languages"]));
                }
                if ((ds.Tables["LanguageInfo"] != null)) {
                    base.Tables.Add(new LanguageInfoDataTable(ds.Tables["LanguageInfo"]));
                }
                if ((ds.Tables["AdaptItConfigurations"] != null)) {
                    base.Tables.Add(new AdaptItConfigurationsDataTable(ds.Tables["AdaptItConfigurations"]));
                }
                if ((ds.Tables["AdaptItConfiguration"] != null)) {
                    base.Tables.Add(new AdaptItConfigurationDataTable(ds.Tables["AdaptItConfiguration"]));
                }
                if ((ds.Tables["LnCNotes"] != null)) {
                    base.Tables.Add(new LnCNotesDataTable(ds.Tables["LnCNotes"]));
                }
                if ((ds.Tables["LnCNote"] != null)) {
                    base.Tables.Add(new LnCNoteDataTable(ds.Tables["LnCNote"]));
                }
                if ((ds.Tables["stories"] != null)) {
                    base.Tables.Add(new storiesDataTable(ds.Tables["stories"]));
                }
                if ((ds.Tables["story"] != null)) {
                    base.Tables.Add(new storyDataTable(ds.Tables["story"]));
                }
                if ((ds.Tables["CraftingInfo"] != null)) {
                    base.Tables.Add(new CraftingInfoDataTable(ds.Tables["CraftingInfo"]));
                }
                if ((ds.Tables["StoryCrafter"] != null)) {
                    base.Tables.Add(new StoryCrafterDataTable(ds.Tables["StoryCrafter"]));
                }
                if ((ds.Tables["ProjectFacilitator"] != null)) {
                    base.Tables.Add(new ProjectFacilitatorDataTable(ds.Tables["ProjectFacilitator"]));
                }
                if ((ds.Tables["Consultant"] != null)) {
                    base.Tables.Add(new ConsultantDataTable(ds.Tables["Consultant"]));
                }
                if ((ds.Tables["Coach"] != null)) {
                    base.Tables.Add(new CoachDataTable(ds.Tables["Coach"]));
                }
                if ((ds.Tables["BackTranslator"] != null)) {
                    base.Tables.Add(new BackTranslatorDataTable(ds.Tables["BackTranslator"]));
                }
                if ((ds.Tables["OutsideEnglishBackTranslator"] != null)) {
                    base.Tables.Add(new OutsideEnglishBackTranslatorDataTable(ds.Tables["OutsideEnglishBackTranslator"]));
                }
                if ((ds.Tables["TestsRetellings"] != null)) {
                    base.Tables.Add(new TestsRetellingsDataTable(ds.Tables["TestsRetellings"]));
                }
                if ((ds.Tables["TestRetelling"] != null)) {
                    base.Tables.Add(new TestRetellingDataTable(ds.Tables["TestRetelling"]));
                }
                if ((ds.Tables["TestsTqAnswers"] != null)) {
                    base.Tables.Add(new TestsTqAnswersDataTable(ds.Tables["TestsTqAnswers"]));
                }
                if ((ds.Tables["TestTqAnswer"] != null)) {
                    base.Tables.Add(new TestTqAnswerDataTable(ds.Tables["TestTqAnswer"]));
                }
                if ((ds.Tables["TransitionHistory"] != null)) {
                    base.Tables.Add(new TransitionHistoryDataTable(ds.Tables["TransitionHistory"]));
                }
                if ((ds.Tables["StateTransition"] != null)) {
                    base.Tables.Add(new StateTransitionDataTable(ds.Tables["StateTransition"]));
                }
                if ((ds.Tables["Verses"] != null)) {
                    base.Tables.Add(new VersesDataTable(ds.Tables["Verses"]));
                }
                if ((ds.Tables["Verse"] != null)) {
                    base.Tables.Add(new VerseDataTable(ds.Tables["Verse"]));
                }
                if ((ds.Tables["StoryLine"] != null)) {
                    base.Tables.Add(new StoryLineDataTable(ds.Tables["StoryLine"]));
                }
                if ((ds.Tables["Anchors"] != null)) {
                    base.Tables.Add(new AnchorsDataTable(ds.Tables["Anchors"]));
                }
                if ((ds.Tables["Anchor"] != null)) {
                    base.Tables.Add(new AnchorDataTable(ds.Tables["Anchor"]));
                }
                if ((ds.Tables["ExegeticalHelps"] != null)) {
                    base.Tables.Add(new ExegeticalHelpsDataTable(ds.Tables["ExegeticalHelps"]));
                }
                if ((ds.Tables["ExegeticalHelp"] != null)) {
                    base.Tables.Add(new ExegeticalHelpDataTable(ds.Tables["ExegeticalHelp"]));
                }
                if ((ds.Tables["TestQuestions"] != null)) {
                    base.Tables.Add(new TestQuestionsDataTable(ds.Tables["TestQuestions"]));
                }
                if ((ds.Tables["TestQuestion"] != null)) {
                    base.Tables.Add(new TestQuestionDataTable(ds.Tables["TestQuestion"]));
                }
                if ((ds.Tables["TestQuestionLine"] != null)) {
                    base.Tables.Add(new TestQuestionLineDataTable(ds.Tables["TestQuestionLine"]));
                }
                if ((ds.Tables["Answers"] != null)) {
                    base.Tables.Add(new AnswersDataTable(ds.Tables["Answers"]));
                }
                if ((ds.Tables["Answer"] != null)) {
                    base.Tables.Add(new AnswerDataTable(ds.Tables["Answer"]));
                }
                if ((ds.Tables["Retellings"] != null)) {
                    base.Tables.Add(new RetellingsDataTable(ds.Tables["Retellings"]));
                }
                if ((ds.Tables["Retelling"] != null)) {
                    base.Tables.Add(new RetellingDataTable(ds.Tables["Retelling"]));
                }
                if ((ds.Tables["ConsultantNotes"] != null)) {
                    base.Tables.Add(new ConsultantNotesDataTable(ds.Tables["ConsultantNotes"]));
                }
                if ((ds.Tables["ConsultantConversation"] != null)) {
                    base.Tables.Add(new ConsultantConversationDataTable(ds.Tables["ConsultantConversation"]));
                }
                if ((ds.Tables["ConsultantNote"] != null)) {
                    base.Tables.Add(new ConsultantNoteDataTable(ds.Tables["ConsultantNote"]));
                }
                if ((ds.Tables["CoachNotes"] != null)) {
                    base.Tables.Add(new CoachNotesDataTable(ds.Tables["CoachNotes"]));
                }
                if ((ds.Tables["CoachConversation"] != null)) {
                    base.Tables.Add(new CoachConversationDataTable(ds.Tables["CoachConversation"]));
                }
                if ((ds.Tables["CoachNote"] != null)) {
                    base.Tables.Add(new CoachNoteDataTable(ds.Tables["CoachNote"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StoryProjectDataTable StoryProject {
            get {
                return this.tableStoryProject;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MembersDataTable Members {
            get {
                return this.tableMembers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MemberDataTable Member {
            get {
                return this.tableMember;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LanguagesDataTable Languages {
            get {
                return this.tableLanguages;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LanguageInfoDataTable LanguageInfo {
            get {
                return this.tableLanguageInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdaptItConfigurationsDataTable AdaptItConfigurations {
            get {
                return this.tableAdaptItConfigurations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdaptItConfigurationDataTable AdaptItConfiguration {
            get {
                return this.tableAdaptItConfiguration;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LnCNotesDataTable LnCNotes {
            get {
                return this.tableLnCNotes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LnCNoteDataTable LnCNote {
            get {
                return this.tableLnCNote;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public storiesDataTable stories {
            get {
                return this.tablestories;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public storyDataTable story {
            get {
                return this.tablestory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CraftingInfoDataTable CraftingInfo {
            get {
                return this.tableCraftingInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StoryCrafterDataTable StoryCrafter {
            get {
                return this.tableStoryCrafter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectFacilitatorDataTable ProjectFacilitator {
            get {
                return this.tableProjectFacilitator;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsultantDataTable Consultant {
            get {
                return this.tableConsultant;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoachDataTable Coach {
            get {
                return this.tableCoach;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BackTranslatorDataTable BackTranslator {
            get {
                return this.tableBackTranslator;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OutsideEnglishBackTranslatorDataTable OutsideEnglishBackTranslator {
            get {
                return this.tableOutsideEnglishBackTranslator;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestsRetellingsDataTable TestsRetellings {
            get {
                return this.tableTestsRetellings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestRetellingDataTable TestRetelling {
            get {
                return this.tableTestRetelling;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestsTqAnswersDataTable TestsTqAnswers {
            get {
                return this.tableTestsTqAnswers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestTqAnswerDataTable TestTqAnswer {
            get {
                return this.tableTestTqAnswer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransitionHistoryDataTable TransitionHistory {
            get {
                return this.tableTransitionHistory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StateTransitionDataTable StateTransition {
            get {
                return this.tableStateTransition;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VersesDataTable Verses {
            get {
                return this.tableVerses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VerseDataTable Verse {
            get {
                return this.tableVerse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StoryLineDataTable StoryLine {
            get {
                return this.tableStoryLine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnchorsDataTable Anchors {
            get {
                return this.tableAnchors;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnchorDataTable Anchor {
            get {
                return this.tableAnchor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExegeticalHelpsDataTable ExegeticalHelps {
            get {
                return this.tableExegeticalHelps;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExegeticalHelpDataTable ExegeticalHelp {
            get {
                return this.tableExegeticalHelp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestQuestionsDataTable TestQuestions {
            get {
                return this.tableTestQuestions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestQuestionDataTable TestQuestion {
            get {
                return this.tableTestQuestion;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestQuestionLineDataTable TestQuestionLine {
            get {
                return this.tableTestQuestionLine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnswersDataTable Answers {
            get {
                return this.tableAnswers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnswerDataTable Answer {
            get {
                return this.tableAnswer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RetellingsDataTable Retellings {
            get {
                return this.tableRetellings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RetellingDataTable Retelling {
            get {
                return this.tableRetelling;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsultantNotesDataTable ConsultantNotes {
            get {
                return this.tableConsultantNotes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsultantConversationDataTable ConsultantConversation {
            get {
                return this.tableConsultantConversation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsultantNoteDataTable ConsultantNote {
            get {
                return this.tableConsultantNote;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoachNotesDataTable CoachNotes {
            get {
                return this.tableCoachNotes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoachConversationDataTable CoachConversation {
            get {
                return this.tableCoachConversation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoachNoteDataTable CoachNote {
            get {
                return this.tableCoachNote;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["StoryProject"] != null)) {
                    base.Tables.Add(new StoryProjectDataTable(ds.Tables["StoryProject"]));
                }
                if ((ds.Tables["Members"] != null)) {
                    base.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
                }
                if ((ds.Tables["Member"] != null)) {
                    base.Tables.Add(new MemberDataTable(ds.Tables["Member"]));
                }
                if ((ds.Tables["Languages"] != null)) {
                    base.Tables.Add(new LanguagesDataTable(ds.Tables["Languages"]));
                }
                if ((ds.Tables["LanguageInfo"] != null)) {
                    base.Tables.Add(new LanguageInfoDataTable(ds.Tables["LanguageInfo"]));
                }
                if ((ds.Tables["AdaptItConfigurations"] != null)) {
                    base.Tables.Add(new AdaptItConfigurationsDataTable(ds.Tables["AdaptItConfigurations"]));
                }
                if ((ds.Tables["AdaptItConfiguration"] != null)) {
                    base.Tables.Add(new AdaptItConfigurationDataTable(ds.Tables["AdaptItConfiguration"]));
                }
                if ((ds.Tables["LnCNotes"] != null)) {
                    base.Tables.Add(new LnCNotesDataTable(ds.Tables["LnCNotes"]));
                }
                if ((ds.Tables["LnCNote"] != null)) {
                    base.Tables.Add(new LnCNoteDataTable(ds.Tables["LnCNote"]));
                }
                if ((ds.Tables["stories"] != null)) {
                    base.Tables.Add(new storiesDataTable(ds.Tables["stories"]));
                }
                if ((ds.Tables["story"] != null)) {
                    base.Tables.Add(new storyDataTable(ds.Tables["story"]));
                }
                if ((ds.Tables["CraftingInfo"] != null)) {
                    base.Tables.Add(new CraftingInfoDataTable(ds.Tables["CraftingInfo"]));
                }
                if ((ds.Tables["StoryCrafter"] != null)) {
                    base.Tables.Add(new StoryCrafterDataTable(ds.Tables["StoryCrafter"]));
                }
                if ((ds.Tables["ProjectFacilitator"] != null)) {
                    base.Tables.Add(new ProjectFacilitatorDataTable(ds.Tables["ProjectFacilitator"]));
                }
                if ((ds.Tables["Consultant"] != null)) {
                    base.Tables.Add(new ConsultantDataTable(ds.Tables["Consultant"]));
                }
                if ((ds.Tables["Coach"] != null)) {
                    base.Tables.Add(new CoachDataTable(ds.Tables["Coach"]));
                }
                if ((ds.Tables["BackTranslator"] != null)) {
                    base.Tables.Add(new BackTranslatorDataTable(ds.Tables["BackTranslator"]));
                }
                if ((ds.Tables["OutsideEnglishBackTranslator"] != null)) {
                    base.Tables.Add(new OutsideEnglishBackTranslatorDataTable(ds.Tables["OutsideEnglishBackTranslator"]));
                }
                if ((ds.Tables["TestsRetellings"] != null)) {
                    base.Tables.Add(new TestsRetellingsDataTable(ds.Tables["TestsRetellings"]));
                }
                if ((ds.Tables["TestRetelling"] != null)) {
                    base.Tables.Add(new TestRetellingDataTable(ds.Tables["TestRetelling"]));
                }
                if ((ds.Tables["TestsTqAnswers"] != null)) {
                    base.Tables.Add(new TestsTqAnswersDataTable(ds.Tables["TestsTqAnswers"]));
                }
                if ((ds.Tables["TestTqAnswer"] != null)) {
                    base.Tables.Add(new TestTqAnswerDataTable(ds.Tables["TestTqAnswer"]));
                }
                if ((ds.Tables["TransitionHistory"] != null)) {
                    base.Tables.Add(new TransitionHistoryDataTable(ds.Tables["TransitionHistory"]));
                }
                if ((ds.Tables["StateTransition"] != null)) {
                    base.Tables.Add(new StateTransitionDataTable(ds.Tables["StateTransition"]));
                }
                if ((ds.Tables["Verses"] != null)) {
                    base.Tables.Add(new VersesDataTable(ds.Tables["Verses"]));
                }
                if ((ds.Tables["Verse"] != null)) {
                    base.Tables.Add(new VerseDataTable(ds.Tables["Verse"]));
                }
                if ((ds.Tables["StoryLine"] != null)) {
                    base.Tables.Add(new StoryLineDataTable(ds.Tables["StoryLine"]));
                }
                if ((ds.Tables["Anchors"] != null)) {
                    base.Tables.Add(new AnchorsDataTable(ds.Tables["Anchors"]));
                }
                if ((ds.Tables["Anchor"] != null)) {
                    base.Tables.Add(new AnchorDataTable(ds.Tables["Anchor"]));
                }
                if ((ds.Tables["ExegeticalHelps"] != null)) {
                    base.Tables.Add(new ExegeticalHelpsDataTable(ds.Tables["ExegeticalHelps"]));
                }
                if ((ds.Tables["ExegeticalHelp"] != null)) {
                    base.Tables.Add(new ExegeticalHelpDataTable(ds.Tables["ExegeticalHelp"]));
                }
                if ((ds.Tables["TestQuestions"] != null)) {
                    base.Tables.Add(new TestQuestionsDataTable(ds.Tables["TestQuestions"]));
                }
                if ((ds.Tables["TestQuestion"] != null)) {
                    base.Tables.Add(new TestQuestionDataTable(ds.Tables["TestQuestion"]));
                }
                if ((ds.Tables["TestQuestionLine"] != null)) {
                    base.Tables.Add(new TestQuestionLineDataTable(ds.Tables["TestQuestionLine"]));
                }
                if ((ds.Tables["Answers"] != null)) {
                    base.Tables.Add(new AnswersDataTable(ds.Tables["Answers"]));
                }
                if ((ds.Tables["Answer"] != null)) {
                    base.Tables.Add(new AnswerDataTable(ds.Tables["Answer"]));
                }
                if ((ds.Tables["Retellings"] != null)) {
                    base.Tables.Add(new RetellingsDataTable(ds.Tables["Retellings"]));
                }
                if ((ds.Tables["Retelling"] != null)) {
                    base.Tables.Add(new RetellingDataTable(ds.Tables["Retelling"]));
                }
                if ((ds.Tables["ConsultantNotes"] != null)) {
                    base.Tables.Add(new ConsultantNotesDataTable(ds.Tables["ConsultantNotes"]));
                }
                if ((ds.Tables["ConsultantConversation"] != null)) {
                    base.Tables.Add(new ConsultantConversationDataTable(ds.Tables["ConsultantConversation"]));
                }
                if ((ds.Tables["ConsultantNote"] != null)) {
                    base.Tables.Add(new ConsultantNoteDataTable(ds.Tables["ConsultantNote"]));
                }
                if ((ds.Tables["CoachNotes"] != null)) {
                    base.Tables.Add(new CoachNotesDataTable(ds.Tables["CoachNotes"]));
                }
                if ((ds.Tables["CoachConversation"] != null)) {
                    base.Tables.Add(new CoachConversationDataTable(ds.Tables["CoachConversation"]));
                }
                if ((ds.Tables["CoachNote"] != null)) {
                    base.Tables.Add(new CoachNoteDataTable(ds.Tables["CoachNote"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStoryProject = ((StoryProjectDataTable)(base.Tables["StoryProject"]));
            if ((initTable == true)) {
                if ((this.tableStoryProject != null)) {
                    this.tableStoryProject.InitVars();
                }
            }
            this.tableMembers = ((MembersDataTable)(base.Tables["Members"]));
            if ((initTable == true)) {
                if ((this.tableMembers != null)) {
                    this.tableMembers.InitVars();
                }
            }
            this.tableMember = ((MemberDataTable)(base.Tables["Member"]));
            if ((initTable == true)) {
                if ((this.tableMember != null)) {
                    this.tableMember.InitVars();
                }
            }
            this.tableLanguages = ((LanguagesDataTable)(base.Tables["Languages"]));
            if ((initTable == true)) {
                if ((this.tableLanguages != null)) {
                    this.tableLanguages.InitVars();
                }
            }
            this.tableLanguageInfo = ((LanguageInfoDataTable)(base.Tables["LanguageInfo"]));
            if ((initTable == true)) {
                if ((this.tableLanguageInfo != null)) {
                    this.tableLanguageInfo.InitVars();
                }
            }
            this.tableAdaptItConfigurations = ((AdaptItConfigurationsDataTable)(base.Tables["AdaptItConfigurations"]));
            if ((initTable == true)) {
                if ((this.tableAdaptItConfigurations != null)) {
                    this.tableAdaptItConfigurations.InitVars();
                }
            }
            this.tableAdaptItConfiguration = ((AdaptItConfigurationDataTable)(base.Tables["AdaptItConfiguration"]));
            if ((initTable == true)) {
                if ((this.tableAdaptItConfiguration != null)) {
                    this.tableAdaptItConfiguration.InitVars();
                }
            }
            this.tableLnCNotes = ((LnCNotesDataTable)(base.Tables["LnCNotes"]));
            if ((initTable == true)) {
                if ((this.tableLnCNotes != null)) {
                    this.tableLnCNotes.InitVars();
                }
            }
            this.tableLnCNote = ((LnCNoteDataTable)(base.Tables["LnCNote"]));
            if ((initTable == true)) {
                if ((this.tableLnCNote != null)) {
                    this.tableLnCNote.InitVars();
                }
            }
            this.tablestories = ((storiesDataTable)(base.Tables["stories"]));
            if ((initTable == true)) {
                if ((this.tablestories != null)) {
                    this.tablestories.InitVars();
                }
            }
            this.tablestory = ((storyDataTable)(base.Tables["story"]));
            if ((initTable == true)) {
                if ((this.tablestory != null)) {
                    this.tablestory.InitVars();
                }
            }
            this.tableCraftingInfo = ((CraftingInfoDataTable)(base.Tables["CraftingInfo"]));
            if ((initTable == true)) {
                if ((this.tableCraftingInfo != null)) {
                    this.tableCraftingInfo.InitVars();
                }
            }
            this.tableStoryCrafter = ((StoryCrafterDataTable)(base.Tables["StoryCrafter"]));
            if ((initTable == true)) {
                if ((this.tableStoryCrafter != null)) {
                    this.tableStoryCrafter.InitVars();
                }
            }
            this.tableProjectFacilitator = ((ProjectFacilitatorDataTable)(base.Tables["ProjectFacilitator"]));
            if ((initTable == true)) {
                if ((this.tableProjectFacilitator != null)) {
                    this.tableProjectFacilitator.InitVars();
                }
            }
            this.tableConsultant = ((ConsultantDataTable)(base.Tables["Consultant"]));
            if ((initTable == true)) {
                if ((this.tableConsultant != null)) {
                    this.tableConsultant.InitVars();
                }
            }
            this.tableCoach = ((CoachDataTable)(base.Tables["Coach"]));
            if ((initTable == true)) {
                if ((this.tableCoach != null)) {
                    this.tableCoach.InitVars();
                }
            }
            this.tableBackTranslator = ((BackTranslatorDataTable)(base.Tables["BackTranslator"]));
            if ((initTable == true)) {
                if ((this.tableBackTranslator != null)) {
                    this.tableBackTranslator.InitVars();
                }
            }
            this.tableOutsideEnglishBackTranslator = ((OutsideEnglishBackTranslatorDataTable)(base.Tables["OutsideEnglishBackTranslator"]));
            if ((initTable == true)) {
                if ((this.tableOutsideEnglishBackTranslator != null)) {
                    this.tableOutsideEnglishBackTranslator.InitVars();
                }
            }
            this.tableTestsRetellings = ((TestsRetellingsDataTable)(base.Tables["TestsRetellings"]));
            if ((initTable == true)) {
                if ((this.tableTestsRetellings != null)) {
                    this.tableTestsRetellings.InitVars();
                }
            }
            this.tableTestRetelling = ((TestRetellingDataTable)(base.Tables["TestRetelling"]));
            if ((initTable == true)) {
                if ((this.tableTestRetelling != null)) {
                    this.tableTestRetelling.InitVars();
                }
            }
            this.tableTestsTqAnswers = ((TestsTqAnswersDataTable)(base.Tables["TestsTqAnswers"]));
            if ((initTable == true)) {
                if ((this.tableTestsTqAnswers != null)) {
                    this.tableTestsTqAnswers.InitVars();
                }
            }
            this.tableTestTqAnswer = ((TestTqAnswerDataTable)(base.Tables["TestTqAnswer"]));
            if ((initTable == true)) {
                if ((this.tableTestTqAnswer != null)) {
                    this.tableTestTqAnswer.InitVars();
                }
            }
            this.tableTransitionHistory = ((TransitionHistoryDataTable)(base.Tables["TransitionHistory"]));
            if ((initTable == true)) {
                if ((this.tableTransitionHistory != null)) {
                    this.tableTransitionHistory.InitVars();
                }
            }
            this.tableStateTransition = ((StateTransitionDataTable)(base.Tables["StateTransition"]));
            if ((initTable == true)) {
                if ((this.tableStateTransition != null)) {
                    this.tableStateTransition.InitVars();
                }
            }
            this.tableVerses = ((VersesDataTable)(base.Tables["Verses"]));
            if ((initTable == true)) {
                if ((this.tableVerses != null)) {
                    this.tableVerses.InitVars();
                }
            }
            this.tableVerse = ((VerseDataTable)(base.Tables["Verse"]));
            if ((initTable == true)) {
                if ((this.tableVerse != null)) {
                    this.tableVerse.InitVars();
                }
            }
            this.tableStoryLine = ((StoryLineDataTable)(base.Tables["StoryLine"]));
            if ((initTable == true)) {
                if ((this.tableStoryLine != null)) {
                    this.tableStoryLine.InitVars();
                }
            }
            this.tableAnchors = ((AnchorsDataTable)(base.Tables["Anchors"]));
            if ((initTable == true)) {
                if ((this.tableAnchors != null)) {
                    this.tableAnchors.InitVars();
                }
            }
            this.tableAnchor = ((AnchorDataTable)(base.Tables["Anchor"]));
            if ((initTable == true)) {
                if ((this.tableAnchor != null)) {
                    this.tableAnchor.InitVars();
                }
            }
            this.tableExegeticalHelps = ((ExegeticalHelpsDataTable)(base.Tables["ExegeticalHelps"]));
            if ((initTable == true)) {
                if ((this.tableExegeticalHelps != null)) {
                    this.tableExegeticalHelps.InitVars();
                }
            }
            this.tableExegeticalHelp = ((ExegeticalHelpDataTable)(base.Tables["ExegeticalHelp"]));
            if ((initTable == true)) {
                if ((this.tableExegeticalHelp != null)) {
                    this.tableExegeticalHelp.InitVars();
                }
            }
            this.tableTestQuestions = ((TestQuestionsDataTable)(base.Tables["TestQuestions"]));
            if ((initTable == true)) {
                if ((this.tableTestQuestions != null)) {
                    this.tableTestQuestions.InitVars();
                }
            }
            this.tableTestQuestion = ((TestQuestionDataTable)(base.Tables["TestQuestion"]));
            if ((initTable == true)) {
                if ((this.tableTestQuestion != null)) {
                    this.tableTestQuestion.InitVars();
                }
            }
            this.tableTestQuestionLine = ((TestQuestionLineDataTable)(base.Tables["TestQuestionLine"]));
            if ((initTable == true)) {
                if ((this.tableTestQuestionLine != null)) {
                    this.tableTestQuestionLine.InitVars();
                }
            }
            this.tableAnswers = ((AnswersDataTable)(base.Tables["Answers"]));
            if ((initTable == true)) {
                if ((this.tableAnswers != null)) {
                    this.tableAnswers.InitVars();
                }
            }
            this.tableAnswer = ((AnswerDataTable)(base.Tables["Answer"]));
            if ((initTable == true)) {
                if ((this.tableAnswer != null)) {
                    this.tableAnswer.InitVars();
                }
            }
            this.tableRetellings = ((RetellingsDataTable)(base.Tables["Retellings"]));
            if ((initTable == true)) {
                if ((this.tableRetellings != null)) {
                    this.tableRetellings.InitVars();
                }
            }
            this.tableRetelling = ((RetellingDataTable)(base.Tables["Retelling"]));
            if ((initTable == true)) {
                if ((this.tableRetelling != null)) {
                    this.tableRetelling.InitVars();
                }
            }
            this.tableConsultantNotes = ((ConsultantNotesDataTable)(base.Tables["ConsultantNotes"]));
            if ((initTable == true)) {
                if ((this.tableConsultantNotes != null)) {
                    this.tableConsultantNotes.InitVars();
                }
            }
            this.tableConsultantConversation = ((ConsultantConversationDataTable)(base.Tables["ConsultantConversation"]));
            if ((initTable == true)) {
                if ((this.tableConsultantConversation != null)) {
                    this.tableConsultantConversation.InitVars();
                }
            }
            this.tableConsultantNote = ((ConsultantNoteDataTable)(base.Tables["ConsultantNote"]));
            if ((initTable == true)) {
                if ((this.tableConsultantNote != null)) {
                    this.tableConsultantNote.InitVars();
                }
            }
            this.tableCoachNotes = ((CoachNotesDataTable)(base.Tables["CoachNotes"]));
            if ((initTable == true)) {
                if ((this.tableCoachNotes != null)) {
                    this.tableCoachNotes.InitVars();
                }
            }
            this.tableCoachConversation = ((CoachConversationDataTable)(base.Tables["CoachConversation"]));
            if ((initTable == true)) {
                if ((this.tableCoachConversation != null)) {
                    this.tableCoachConversation.InitVars();
                }
            }
            this.tableCoachNote = ((CoachNoteDataTable)(base.Tables["CoachNote"]));
            if ((initTable == true)) {
                if ((this.tableCoachNote != null)) {
                    this.tableCoachNote.InitVars();
                }
            }
            this.relationStoryProject_Members = this.Relations["StoryProject_Members"];
            this.relationMembers_Member = this.Relations["Members_Member"];
            this.relationStoryProject_Languages = this.Relations["StoryProject_Languages"];
            this.relationLanguages_LanguageInfo = this.Relations["Languages_LanguageInfo"];
            this.relationStoryProject_AdaptItConfigurations = this.Relations["StoryProject_AdaptItConfigurations"];
            this.relationAdaptItConfigurations_AdaptItConfiguration = this.Relations["AdaptItConfigurations_AdaptItConfiguration"];
            this.relationStoryProject_LnCNotes = this.Relations["StoryProject_LnCNotes"];
            this.relationLnCNotes_LnCNote = this.Relations["LnCNotes_LnCNote"];
            this.relationStoryProject_stories = this.Relations["StoryProject_stories"];
            this.relationstories_story = this.Relations["stories_story"];
            this.relationstory_CraftingInfo = this.Relations["story_CraftingInfo"];
            this.relationCraftingInfo_StoryCrafter = this.Relations["CraftingInfo_StoryCrafter"];
            this.relationCraftingInfo_ProjectFacilitator = this.Relations["CraftingInfo_ProjectFacilitator"];
            this.relationCraftingInfo_Consultant = this.Relations["CraftingInfo_Consultant"];
            this.relationCraftingInfo_Coach = this.Relations["CraftingInfo_Coach"];
            this.relationCraftingInfo_BackTranslator = this.Relations["CraftingInfo_BackTranslator"];
            this.relationCraftingInfo_OutsideEnglishBackTranslator = this.Relations["CraftingInfo_OutsideEnglishBackTranslator"];
            this.relationCraftingInfo_TestsRetellings = this.Relations["CraftingInfo_TestsRetellings"];
            this.relationTestsRetellings_TestRetelling = this.Relations["TestsRetellings_TestRetelling"];
            this.relationCraftingInfo_TestsTqAnswers = this.Relations["CraftingInfo_TestsTqAnswers"];
            this.relationTestsTqAnswers_TestTqAnswer = this.Relations["TestsTqAnswers_TestTqAnswer"];
            this.relationstory_TransitionHistory = this.Relations["story_TransitionHistory"];
            this.relationTransitionHistory_StateTransition = this.Relations["TransitionHistory_StateTransition"];
            this.relationstory_Verses = this.Relations["story_Verses"];
            this.relationVerses_Verse = this.Relations["Verses_Verse"];
            this.relationVerse_StoryLine = this.Relations["Verse_StoryLine"];
            this.relationVerse_Anchors = this.Relations["Verse_Anchors"];
            this.relationAnchors_Anchor = this.Relations["Anchors_Anchor"];
            this.relationVerse_ExegeticalHelps = this.Relations["Verse_ExegeticalHelps"];
            this.relationExegeticalHelps_ExegeticalHelp = this.Relations["ExegeticalHelps_ExegeticalHelp"];
            this.relationVerse_TestQuestions = this.Relations["Verse_TestQuestions"];
            this.relationTestQuestions_TestQuestion = this.Relations["TestQuestions_TestQuestion"];
            this.relationTestQuestion_TestQuestionLine = this.Relations["TestQuestion_TestQuestionLine"];
            this.relationTestQuestion_Answers = this.Relations["TestQuestion_Answers"];
            this.relationAnswers_Answer = this.Relations["Answers_Answer"];
            this.relationVerse_Retellings = this.Relations["Verse_Retellings"];
            this.relationRetellings_Retelling = this.Relations["Retellings_Retelling"];
            this.relationVerse_ConsultantNotes = this.Relations["Verse_ConsultantNotes"];
            this.relationConsultantNotes_ConsultantConversation = this.Relations["ConsultantNotes_ConsultantConversation"];
            this.relationConsultantConversation_ConsultantNote = this.Relations["ConsultantConversation_ConsultantNote"];
            this.relationVerse_CoachNotes = this.Relations["Verse_CoachNotes"];
            this.relationCoachNotes_CoachConversation = this.Relations["CoachNotes_CoachConversation"];
            this.relationCoachConversation_CoachNote = this.Relations["CoachConversation_CoachNote"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStoryProject = new StoryProjectDataTable();
            base.Tables.Add(this.tableStoryProject);
            this.tableMembers = new MembersDataTable();
            base.Tables.Add(this.tableMembers);
            this.tableMember = new MemberDataTable();
            base.Tables.Add(this.tableMember);
            this.tableLanguages = new LanguagesDataTable();
            base.Tables.Add(this.tableLanguages);
            this.tableLanguageInfo = new LanguageInfoDataTable();
            base.Tables.Add(this.tableLanguageInfo);
            this.tableAdaptItConfigurations = new AdaptItConfigurationsDataTable();
            base.Tables.Add(this.tableAdaptItConfigurations);
            this.tableAdaptItConfiguration = new AdaptItConfigurationDataTable();
            base.Tables.Add(this.tableAdaptItConfiguration);
            this.tableLnCNotes = new LnCNotesDataTable();
            base.Tables.Add(this.tableLnCNotes);
            this.tableLnCNote = new LnCNoteDataTable();
            base.Tables.Add(this.tableLnCNote);
            this.tablestories = new storiesDataTable();
            base.Tables.Add(this.tablestories);
            this.tablestory = new storyDataTable();
            base.Tables.Add(this.tablestory);
            this.tableCraftingInfo = new CraftingInfoDataTable();
            base.Tables.Add(this.tableCraftingInfo);
            this.tableStoryCrafter = new StoryCrafterDataTable();
            base.Tables.Add(this.tableStoryCrafter);
            this.tableProjectFacilitator = new ProjectFacilitatorDataTable();
            base.Tables.Add(this.tableProjectFacilitator);
            this.tableConsultant = new ConsultantDataTable();
            base.Tables.Add(this.tableConsultant);
            this.tableCoach = new CoachDataTable();
            base.Tables.Add(this.tableCoach);
            this.tableBackTranslator = new BackTranslatorDataTable();
            base.Tables.Add(this.tableBackTranslator);
            this.tableOutsideEnglishBackTranslator = new OutsideEnglishBackTranslatorDataTable();
            base.Tables.Add(this.tableOutsideEnglishBackTranslator);
            this.tableTestsRetellings = new TestsRetellingsDataTable();
            base.Tables.Add(this.tableTestsRetellings);
            this.tableTestRetelling = new TestRetellingDataTable();
            base.Tables.Add(this.tableTestRetelling);
            this.tableTestsTqAnswers = new TestsTqAnswersDataTable();
            base.Tables.Add(this.tableTestsTqAnswers);
            this.tableTestTqAnswer = new TestTqAnswerDataTable();
            base.Tables.Add(this.tableTestTqAnswer);
            this.tableTransitionHistory = new TransitionHistoryDataTable();
            base.Tables.Add(this.tableTransitionHistory);
            this.tableStateTransition = new StateTransitionDataTable();
            base.Tables.Add(this.tableStateTransition);
            this.tableVerses = new VersesDataTable();
            base.Tables.Add(this.tableVerses);
            this.tableVerse = new VerseDataTable();
            base.Tables.Add(this.tableVerse);
            this.tableStoryLine = new StoryLineDataTable();
            base.Tables.Add(this.tableStoryLine);
            this.tableAnchors = new AnchorsDataTable();
            base.Tables.Add(this.tableAnchors);
            this.tableAnchor = new AnchorDataTable();
            base.Tables.Add(this.tableAnchor);
            this.tableExegeticalHelps = new ExegeticalHelpsDataTable();
            base.Tables.Add(this.tableExegeticalHelps);
            this.tableExegeticalHelp = new ExegeticalHelpDataTable();
            base.Tables.Add(this.tableExegeticalHelp);
            this.tableTestQuestions = new TestQuestionsDataTable();
            base.Tables.Add(this.tableTestQuestions);
            this.tableTestQuestion = new TestQuestionDataTable();
            base.Tables.Add(this.tableTestQuestion);
            this.tableTestQuestionLine = new TestQuestionLineDataTable();
            base.Tables.Add(this.tableTestQuestionLine);
            this.tableAnswers = new AnswersDataTable();
            base.Tables.Add(this.tableAnswers);
            this.tableAnswer = new AnswerDataTable();
            base.Tables.Add(this.tableAnswer);
            this.tableRetellings = new RetellingsDataTable();
            base.Tables.Add(this.tableRetellings);
            this.tableRetelling = new RetellingDataTable();
            base.Tables.Add(this.tableRetelling);
            this.tableConsultantNotes = new ConsultantNotesDataTable();
            base.Tables.Add(this.tableConsultantNotes);
            this.tableConsultantConversation = new ConsultantConversationDataTable();
            base.Tables.Add(this.tableConsultantConversation);
            this.tableConsultantNote = new ConsultantNoteDataTable();
            base.Tables.Add(this.tableConsultantNote);
            this.tableCoachNotes = new CoachNotesDataTable();
            base.Tables.Add(this.tableCoachNotes);
            this.tableCoachConversation = new CoachConversationDataTable();
            base.Tables.Add(this.tableCoachConversation);
            this.tableCoachNote = new CoachNoteDataTable();
            base.Tables.Add(this.tableCoachNote);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("StoryProject_Members", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMembers.StoryProject_IdColumn});
            this.tableMembers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Members_Member", new global::System.Data.DataColumn[] {
                        this.tableMembers.Members_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMember.Members_IdColumn});
            this.tableMember.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("StoryProject_Languages", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLanguages.StoryProject_IdColumn});
            this.tableLanguages.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Languages_LanguageInfo", new global::System.Data.DataColumn[] {
                        this.tableLanguages.Languages_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLanguageInfo.Languages_IdColumn});
            this.tableLanguageInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("StoryProject_AdaptItConfigurations", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAdaptItConfigurations.StoryProject_IdColumn});
            this.tableAdaptItConfigurations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("AdaptItConfigurations_AdaptItConfiguration", new global::System.Data.DataColumn[] {
                        this.tableAdaptItConfigurations.AdaptItConfigurations_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAdaptItConfiguration.AdaptItConfigurations_IdColumn});
            this.tableAdaptItConfiguration.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("StoryProject_LnCNotes", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLnCNotes.StoryProject_IdColumn});
            this.tableLnCNotes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("LnCNotes_LnCNote", new global::System.Data.DataColumn[] {
                        this.tableLnCNotes.LnCNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLnCNote.LnCNotes_IdColumn});
            this.tableLnCNote.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("StoryProject_stories", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestories.StoryProject_IdColumn});
            this.tablestories.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("stories_story", new global::System.Data.DataColumn[] {
                        this.tablestories.stories_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestory.stories_IdColumn});
            this.tablestory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("story_CraftingInfo", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.story_IdColumn});
            this.tableCraftingInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_StoryCrafter", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStoryCrafter.CraftingInfo_IdColumn});
            this.tableStoryCrafter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_ProjectFacilitator", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableProjectFacilitator.CraftingInfo_IdColumn});
            this.tableProjectFacilitator.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_Consultant", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultant.CraftingInfo_IdColumn});
            this.tableConsultant.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_Coach", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoach.CraftingInfo_IdColumn});
            this.tableCoach.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_BackTranslator", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableBackTranslator.CraftingInfo_IdColumn});
            this.tableBackTranslator.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_OutsideEnglishBackTranslator", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOutsideEnglishBackTranslator.CraftingInfo_IdColumn});
            this.tableOutsideEnglishBackTranslator.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_TestsRetellings", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestsRetellings.CraftingInfo_IdColumn});
            this.tableTestsRetellings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TestsRetellings_TestRetelling", new global::System.Data.DataColumn[] {
                        this.tableTestsRetellings.TestsRetellings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestRetelling.TestsRetellings_IdColumn});
            this.tableTestRetelling.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_TestsTqAnswers", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestsTqAnswers.CraftingInfo_IdColumn});
            this.tableTestsTqAnswers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TestsTqAnswers_TestTqAnswer", new global::System.Data.DataColumn[] {
                        this.tableTestsTqAnswers.TestsTqAnswers_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestTqAnswer.TestsTqAnswers_IdColumn});
            this.tableTestTqAnswer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("story_TransitionHistory", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTransitionHistory.story_IdColumn});
            this.tableTransitionHistory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TransitionHistory_StateTransition", new global::System.Data.DataColumn[] {
                        this.tableTransitionHistory.TransitionHistory_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStateTransition.TransitionHistory_IdColumn});
            this.tableStateTransition.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("story_Verses", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableVerses.story_IdColumn});
            this.tableVerses.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Verses_Verse", new global::System.Data.DataColumn[] {
                        this.tableVerses.Verses_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableVerse.Verses_IdColumn});
            this.tableVerse.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Verse_StoryLine", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStoryLine.Verse_IdColumn});
            this.tableStoryLine.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Verse_Anchors", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnchors.Verse_IdColumn});
            this.tableAnchors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Anchors_Anchor", new global::System.Data.DataColumn[] {
                        this.tableAnchors.Anchors_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnchor.Anchors_IdColumn});
            this.tableAnchor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Verse_ExegeticalHelps", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableExegeticalHelps.Verse_IdColumn});
            this.tableExegeticalHelps.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ExegeticalHelps_ExegeticalHelp", new global::System.Data.DataColumn[] {
                        this.tableExegeticalHelps.ExegeticalHelps_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableExegeticalHelp.ExegeticalHelps_IdColumn});
            this.tableExegeticalHelp.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Verse_TestQuestions", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.Verse_IdColumn});
            this.tableTestQuestions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TestQuestions_TestQuestion", new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.TestQuestions_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestions_IdColumn});
            this.tableTestQuestion.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TestQuestion_TestQuestionLine", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestionLine.TestQuestion_IdColumn});
            this.tableTestQuestionLine.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TestQuestion_Answers", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnswers.TestQuestion_IdColumn});
            this.tableAnswers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Answers_Answer", new global::System.Data.DataColumn[] {
                        this.tableAnswers.Answers_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnswer.Answers_IdColumn});
            this.tableAnswer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Verse_Retellings", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetellings.Verse_IdColumn});
            this.tableRetellings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Retellings_Retelling", new global::System.Data.DataColumn[] {
                        this.tableRetellings.Retellings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetelling.Retellings_IdColumn});
            this.tableRetelling.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Verse_ConsultantNotes", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.Verse_IdColumn});
            this.tableConsultantNotes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ConsultantNotes_ConsultantConversation", new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.ConsultantNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantConversation.ConsultantNotes_IdColumn});
            this.tableConsultantConversation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ConsultantConversation_ConsultantNote", new global::System.Data.DataColumn[] {
                        this.tableConsultantConversation.ConsultantConversation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNote.ConsultantConversation_IdColumn});
            this.tableConsultantNote.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Verse_CoachNotes", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.Verse_IdColumn});
            this.tableCoachNotes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CoachNotes_CoachConversation", new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.CoachNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachConversation.CoachNotes_IdColumn});
            this.tableCoachConversation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CoachConversation_CoachNote", new global::System.Data.DataColumn[] {
                        this.tableCoachConversation.CoachConversation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNote.CoachConversation_IdColumn});
            this.tableCoachNote.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationStoryProject_Members = new global::System.Data.DataRelation("StoryProject_Members", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMembers.StoryProject_IdColumn}, false);
            this.relationStoryProject_Members.Nested = true;
            this.Relations.Add(this.relationStoryProject_Members);
            this.relationMembers_Member = new global::System.Data.DataRelation("Members_Member", new global::System.Data.DataColumn[] {
                        this.tableMembers.Members_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMember.Members_IdColumn}, false);
            this.relationMembers_Member.Nested = true;
            this.Relations.Add(this.relationMembers_Member);
            this.relationStoryProject_Languages = new global::System.Data.DataRelation("StoryProject_Languages", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLanguages.StoryProject_IdColumn}, false);
            this.relationStoryProject_Languages.Nested = true;
            this.Relations.Add(this.relationStoryProject_Languages);
            this.relationLanguages_LanguageInfo = new global::System.Data.DataRelation("Languages_LanguageInfo", new global::System.Data.DataColumn[] {
                        this.tableLanguages.Languages_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLanguageInfo.Languages_IdColumn}, false);
            this.relationLanguages_LanguageInfo.Nested = true;
            this.Relations.Add(this.relationLanguages_LanguageInfo);
            this.relationStoryProject_AdaptItConfigurations = new global::System.Data.DataRelation("StoryProject_AdaptItConfigurations", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAdaptItConfigurations.StoryProject_IdColumn}, false);
            this.relationStoryProject_AdaptItConfigurations.Nested = true;
            this.Relations.Add(this.relationStoryProject_AdaptItConfigurations);
            this.relationAdaptItConfigurations_AdaptItConfiguration = new global::System.Data.DataRelation("AdaptItConfigurations_AdaptItConfiguration", new global::System.Data.DataColumn[] {
                        this.tableAdaptItConfigurations.AdaptItConfigurations_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAdaptItConfiguration.AdaptItConfigurations_IdColumn}, false);
            this.relationAdaptItConfigurations_AdaptItConfiguration.Nested = true;
            this.Relations.Add(this.relationAdaptItConfigurations_AdaptItConfiguration);
            this.relationStoryProject_LnCNotes = new global::System.Data.DataRelation("StoryProject_LnCNotes", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLnCNotes.StoryProject_IdColumn}, false);
            this.relationStoryProject_LnCNotes.Nested = true;
            this.Relations.Add(this.relationStoryProject_LnCNotes);
            this.relationLnCNotes_LnCNote = new global::System.Data.DataRelation("LnCNotes_LnCNote", new global::System.Data.DataColumn[] {
                        this.tableLnCNotes.LnCNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLnCNote.LnCNotes_IdColumn}, false);
            this.relationLnCNotes_LnCNote.Nested = true;
            this.Relations.Add(this.relationLnCNotes_LnCNote);
            this.relationStoryProject_stories = new global::System.Data.DataRelation("StoryProject_stories", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestories.StoryProject_IdColumn}, false);
            this.relationStoryProject_stories.Nested = true;
            this.Relations.Add(this.relationStoryProject_stories);
            this.relationstories_story = new global::System.Data.DataRelation("stories_story", new global::System.Data.DataColumn[] {
                        this.tablestories.stories_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestory.stories_IdColumn}, false);
            this.relationstories_story.Nested = true;
            this.Relations.Add(this.relationstories_story);
            this.relationstory_CraftingInfo = new global::System.Data.DataRelation("story_CraftingInfo", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.story_IdColumn}, false);
            this.relationstory_CraftingInfo.Nested = true;
            this.Relations.Add(this.relationstory_CraftingInfo);
            this.relationCraftingInfo_StoryCrafter = new global::System.Data.DataRelation("CraftingInfo_StoryCrafter", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStoryCrafter.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_StoryCrafter.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_StoryCrafter);
            this.relationCraftingInfo_ProjectFacilitator = new global::System.Data.DataRelation("CraftingInfo_ProjectFacilitator", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableProjectFacilitator.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_ProjectFacilitator.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_ProjectFacilitator);
            this.relationCraftingInfo_Consultant = new global::System.Data.DataRelation("CraftingInfo_Consultant", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultant.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_Consultant.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_Consultant);
            this.relationCraftingInfo_Coach = new global::System.Data.DataRelation("CraftingInfo_Coach", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoach.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_Coach.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_Coach);
            this.relationCraftingInfo_BackTranslator = new global::System.Data.DataRelation("CraftingInfo_BackTranslator", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableBackTranslator.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_BackTranslator.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_BackTranslator);
            this.relationCraftingInfo_OutsideEnglishBackTranslator = new global::System.Data.DataRelation("CraftingInfo_OutsideEnglishBackTranslator", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOutsideEnglishBackTranslator.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_OutsideEnglishBackTranslator.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_OutsideEnglishBackTranslator);
            this.relationCraftingInfo_TestsRetellings = new global::System.Data.DataRelation("CraftingInfo_TestsRetellings", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestsRetellings.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_TestsRetellings.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_TestsRetellings);
            this.relationTestsRetellings_TestRetelling = new global::System.Data.DataRelation("TestsRetellings_TestRetelling", new global::System.Data.DataColumn[] {
                        this.tableTestsRetellings.TestsRetellings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestRetelling.TestsRetellings_IdColumn}, false);
            this.relationTestsRetellings_TestRetelling.Nested = true;
            this.Relations.Add(this.relationTestsRetellings_TestRetelling);
            this.relationCraftingInfo_TestsTqAnswers = new global::System.Data.DataRelation("CraftingInfo_TestsTqAnswers", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestsTqAnswers.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_TestsTqAnswers.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_TestsTqAnswers);
            this.relationTestsTqAnswers_TestTqAnswer = new global::System.Data.DataRelation("TestsTqAnswers_TestTqAnswer", new global::System.Data.DataColumn[] {
                        this.tableTestsTqAnswers.TestsTqAnswers_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestTqAnswer.TestsTqAnswers_IdColumn}, false);
            this.relationTestsTqAnswers_TestTqAnswer.Nested = true;
            this.Relations.Add(this.relationTestsTqAnswers_TestTqAnswer);
            this.relationstory_TransitionHistory = new global::System.Data.DataRelation("story_TransitionHistory", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTransitionHistory.story_IdColumn}, false);
            this.relationstory_TransitionHistory.Nested = true;
            this.Relations.Add(this.relationstory_TransitionHistory);
            this.relationTransitionHistory_StateTransition = new global::System.Data.DataRelation("TransitionHistory_StateTransition", new global::System.Data.DataColumn[] {
                        this.tableTransitionHistory.TransitionHistory_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStateTransition.TransitionHistory_IdColumn}, false);
            this.relationTransitionHistory_StateTransition.Nested = true;
            this.Relations.Add(this.relationTransitionHistory_StateTransition);
            this.relationstory_Verses = new global::System.Data.DataRelation("story_Verses", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableVerses.story_IdColumn}, false);
            this.relationstory_Verses.Nested = true;
            this.Relations.Add(this.relationstory_Verses);
            this.relationVerses_Verse = new global::System.Data.DataRelation("Verses_Verse", new global::System.Data.DataColumn[] {
                        this.tableVerses.Verses_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableVerse.Verses_IdColumn}, false);
            this.relationVerses_Verse.Nested = true;
            this.Relations.Add(this.relationVerses_Verse);
            this.relationVerse_StoryLine = new global::System.Data.DataRelation("Verse_StoryLine", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStoryLine.Verse_IdColumn}, false);
            this.relationVerse_StoryLine.Nested = true;
            this.Relations.Add(this.relationVerse_StoryLine);
            this.relationVerse_Anchors = new global::System.Data.DataRelation("Verse_Anchors", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnchors.Verse_IdColumn}, false);
            this.relationVerse_Anchors.Nested = true;
            this.Relations.Add(this.relationVerse_Anchors);
            this.relationAnchors_Anchor = new global::System.Data.DataRelation("Anchors_Anchor", new global::System.Data.DataColumn[] {
                        this.tableAnchors.Anchors_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnchor.Anchors_IdColumn}, false);
            this.relationAnchors_Anchor.Nested = true;
            this.Relations.Add(this.relationAnchors_Anchor);
            this.relationVerse_ExegeticalHelps = new global::System.Data.DataRelation("Verse_ExegeticalHelps", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableExegeticalHelps.Verse_IdColumn}, false);
            this.relationVerse_ExegeticalHelps.Nested = true;
            this.Relations.Add(this.relationVerse_ExegeticalHelps);
            this.relationExegeticalHelps_ExegeticalHelp = new global::System.Data.DataRelation("ExegeticalHelps_ExegeticalHelp", new global::System.Data.DataColumn[] {
                        this.tableExegeticalHelps.ExegeticalHelps_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableExegeticalHelp.ExegeticalHelps_IdColumn}, false);
            this.relationExegeticalHelps_ExegeticalHelp.Nested = true;
            this.Relations.Add(this.relationExegeticalHelps_ExegeticalHelp);
            this.relationVerse_TestQuestions = new global::System.Data.DataRelation("Verse_TestQuestions", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.Verse_IdColumn}, false);
            this.relationVerse_TestQuestions.Nested = true;
            this.Relations.Add(this.relationVerse_TestQuestions);
            this.relationTestQuestions_TestQuestion = new global::System.Data.DataRelation("TestQuestions_TestQuestion", new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.TestQuestions_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestions_IdColumn}, false);
            this.relationTestQuestions_TestQuestion.Nested = true;
            this.Relations.Add(this.relationTestQuestions_TestQuestion);
            this.relationTestQuestion_TestQuestionLine = new global::System.Data.DataRelation("TestQuestion_TestQuestionLine", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestionLine.TestQuestion_IdColumn}, false);
            this.relationTestQuestion_TestQuestionLine.Nested = true;
            this.Relations.Add(this.relationTestQuestion_TestQuestionLine);
            this.relationTestQuestion_Answers = new global::System.Data.DataRelation("TestQuestion_Answers", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnswers.TestQuestion_IdColumn}, false);
            this.relationTestQuestion_Answers.Nested = true;
            this.Relations.Add(this.relationTestQuestion_Answers);
            this.relationAnswers_Answer = new global::System.Data.DataRelation("Answers_Answer", new global::System.Data.DataColumn[] {
                        this.tableAnswers.Answers_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnswer.Answers_IdColumn}, false);
            this.relationAnswers_Answer.Nested = true;
            this.Relations.Add(this.relationAnswers_Answer);
            this.relationVerse_Retellings = new global::System.Data.DataRelation("Verse_Retellings", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetellings.Verse_IdColumn}, false);
            this.relationVerse_Retellings.Nested = true;
            this.Relations.Add(this.relationVerse_Retellings);
            this.relationRetellings_Retelling = new global::System.Data.DataRelation("Retellings_Retelling", new global::System.Data.DataColumn[] {
                        this.tableRetellings.Retellings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetelling.Retellings_IdColumn}, false);
            this.relationRetellings_Retelling.Nested = true;
            this.Relations.Add(this.relationRetellings_Retelling);
            this.relationVerse_ConsultantNotes = new global::System.Data.DataRelation("Verse_ConsultantNotes", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.Verse_IdColumn}, false);
            this.relationVerse_ConsultantNotes.Nested = true;
            this.Relations.Add(this.relationVerse_ConsultantNotes);
            this.relationConsultantNotes_ConsultantConversation = new global::System.Data.DataRelation("ConsultantNotes_ConsultantConversation", new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.ConsultantNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantConversation.ConsultantNotes_IdColumn}, false);
            this.relationConsultantNotes_ConsultantConversation.Nested = true;
            this.Relations.Add(this.relationConsultantNotes_ConsultantConversation);
            this.relationConsultantConversation_ConsultantNote = new global::System.Data.DataRelation("ConsultantConversation_ConsultantNote", new global::System.Data.DataColumn[] {
                        this.tableConsultantConversation.ConsultantConversation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNote.ConsultantConversation_IdColumn}, false);
            this.relationConsultantConversation_ConsultantNote.Nested = true;
            this.Relations.Add(this.relationConsultantConversation_ConsultantNote);
            this.relationVerse_CoachNotes = new global::System.Data.DataRelation("Verse_CoachNotes", new global::System.Data.DataColumn[] {
                        this.tableVerse.Verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.Verse_IdColumn}, false);
            this.relationVerse_CoachNotes.Nested = true;
            this.Relations.Add(this.relationVerse_CoachNotes);
            this.relationCoachNotes_CoachConversation = new global::System.Data.DataRelation("CoachNotes_CoachConversation", new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.CoachNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachConversation.CoachNotes_IdColumn}, false);
            this.relationCoachNotes_CoachConversation.Nested = true;
            this.Relations.Add(this.relationCoachNotes_CoachConversation);
            this.relationCoachConversation_CoachNote = new global::System.Data.DataRelation("CoachConversation_CoachNote", new global::System.Data.DataColumn[] {
                        this.tableCoachConversation.CoachConversation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNote.CoachConversation_IdColumn}, false);
            this.relationCoachConversation_CoachNote.Nested = true;
            this.Relations.Add(this.relationCoachConversation_CoachNote);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStoryProject() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMembers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMember() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLanguages() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLanguageInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAdaptItConfigurations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAdaptItConfiguration() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLnCNotes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLnCNote() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestories() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCraftingInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStoryCrafter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectFacilitator() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultant() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoach() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBackTranslator() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOutsideEnglishBackTranslator() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestsRetellings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestRetelling() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestsTqAnswers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestTqAnswer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTransitionHistory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStateTransition() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVerses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVerse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStoryLine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnchors() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnchor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExegeticalHelps() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExegeticalHelp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestQuestions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestQuestion() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestQuestionLine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnswers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnswer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRetellings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRetelling() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantNotes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantConversation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantNote() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoachNotes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoachConversation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoachNote() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void StoryProjectRowChangeEventHandler(object sender, StoryProjectRowChangeEvent e);
        
        public delegate void MembersRowChangeEventHandler(object sender, MembersRowChangeEvent e);
        
        public delegate void MemberRowChangeEventHandler(object sender, MemberRowChangeEvent e);
        
        public delegate void LanguagesRowChangeEventHandler(object sender, LanguagesRowChangeEvent e);
        
        public delegate void LanguageInfoRowChangeEventHandler(object sender, LanguageInfoRowChangeEvent e);
        
        public delegate void AdaptItConfigurationsRowChangeEventHandler(object sender, AdaptItConfigurationsRowChangeEvent e);
        
        public delegate void AdaptItConfigurationRowChangeEventHandler(object sender, AdaptItConfigurationRowChangeEvent e);
        
        public delegate void LnCNotesRowChangeEventHandler(object sender, LnCNotesRowChangeEvent e);
        
        public delegate void LnCNoteRowChangeEventHandler(object sender, LnCNoteRowChangeEvent e);
        
        public delegate void storiesRowChangeEventHandler(object sender, storiesRowChangeEvent e);
        
        public delegate void storyRowChangeEventHandler(object sender, storyRowChangeEvent e);
        
        public delegate void CraftingInfoRowChangeEventHandler(object sender, CraftingInfoRowChangeEvent e);
        
        public delegate void StoryCrafterRowChangeEventHandler(object sender, StoryCrafterRowChangeEvent e);
        
        public delegate void ProjectFacilitatorRowChangeEventHandler(object sender, ProjectFacilitatorRowChangeEvent e);
        
        public delegate void ConsultantRowChangeEventHandler(object sender, ConsultantRowChangeEvent e);
        
        public delegate void CoachRowChangeEventHandler(object sender, CoachRowChangeEvent e);
        
        public delegate void BackTranslatorRowChangeEventHandler(object sender, BackTranslatorRowChangeEvent e);
        
        public delegate void OutsideEnglishBackTranslatorRowChangeEventHandler(object sender, OutsideEnglishBackTranslatorRowChangeEvent e);
        
        public delegate void TestsRetellingsRowChangeEventHandler(object sender, TestsRetellingsRowChangeEvent e);
        
        public delegate void TestRetellingRowChangeEventHandler(object sender, TestRetellingRowChangeEvent e);
        
        public delegate void TestsTqAnswersRowChangeEventHandler(object sender, TestsTqAnswersRowChangeEvent e);
        
        public delegate void TestTqAnswerRowChangeEventHandler(object sender, TestTqAnswerRowChangeEvent e);
        
        public delegate void TransitionHistoryRowChangeEventHandler(object sender, TransitionHistoryRowChangeEvent e);
        
        public delegate void StateTransitionRowChangeEventHandler(object sender, StateTransitionRowChangeEvent e);
        
        public delegate void VersesRowChangeEventHandler(object sender, VersesRowChangeEvent e);
        
        public delegate void VerseRowChangeEventHandler(object sender, VerseRowChangeEvent e);
        
        public delegate void StoryLineRowChangeEventHandler(object sender, StoryLineRowChangeEvent e);
        
        public delegate void AnchorsRowChangeEventHandler(object sender, AnchorsRowChangeEvent e);
        
        public delegate void AnchorRowChangeEventHandler(object sender, AnchorRowChangeEvent e);
        
        public delegate void ExegeticalHelpsRowChangeEventHandler(object sender, ExegeticalHelpsRowChangeEvent e);
        
        public delegate void ExegeticalHelpRowChangeEventHandler(object sender, ExegeticalHelpRowChangeEvent e);
        
        public delegate void TestQuestionsRowChangeEventHandler(object sender, TestQuestionsRowChangeEvent e);
        
        public delegate void TestQuestionRowChangeEventHandler(object sender, TestQuestionRowChangeEvent e);
        
        public delegate void TestQuestionLineRowChangeEventHandler(object sender, TestQuestionLineRowChangeEvent e);
        
        public delegate void AnswersRowChangeEventHandler(object sender, AnswersRowChangeEvent e);
        
        public delegate void AnswerRowChangeEventHandler(object sender, AnswerRowChangeEvent e);
        
        public delegate void RetellingsRowChangeEventHandler(object sender, RetellingsRowChangeEvent e);
        
        public delegate void RetellingRowChangeEventHandler(object sender, RetellingRowChangeEvent e);
        
        public delegate void ConsultantNotesRowChangeEventHandler(object sender, ConsultantNotesRowChangeEvent e);
        
        public delegate void ConsultantConversationRowChangeEventHandler(object sender, ConsultantConversationRowChangeEvent e);
        
        public delegate void ConsultantNoteRowChangeEventHandler(object sender, ConsultantNoteRowChangeEvent e);
        
        public delegate void CoachNotesRowChangeEventHandler(object sender, CoachNotesRowChangeEvent e);
        
        public delegate void CoachConversationRowChangeEventHandler(object sender, CoachConversationRowChangeEvent e);
        
        public delegate void CoachNoteRowChangeEventHandler(object sender, CoachNoteRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StoryProjectDataTable : global::System.Data.TypedTableBase<StoryProjectRow> {
            
            private global::System.Data.DataColumn columnversion;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnHgRepoUrlHost;
            
            private global::System.Data.DataColumn columnPanoramaFrontMatter;
            
            private global::System.Data.DataColumn columnStoryProject_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectDataTable() {
                this.TableName = "StoryProject";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryProjectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StoryProjectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HgRepoUrlHostColumn {
                get {
                    return this.columnHgRepoUrlHost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PanoramaFrontMatterColumn {
                get {
                    return this.columnPanoramaFrontMatter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryProject_IdColumn {
                get {
                    return this.columnStoryProject_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow this[int index] {
                get {
                    return ((StoryProjectRow)(this.Rows[index]));
                }
            }
            
            public event StoryProjectRowChangeEventHandler StoryProjectRowChanging;
            
            public event StoryProjectRowChangeEventHandler StoryProjectRowChanged;
            
            public event StoryProjectRowChangeEventHandler StoryProjectRowDeleting;
            
            public event StoryProjectRowChangeEventHandler StoryProjectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStoryProjectRow(StoryProjectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow AddStoryProjectRow(string version, string ProjectName, string HgRepoUrlHost, string PanoramaFrontMatter) {
                StoryProjectRow rowStoryProjectRow = ((StoryProjectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        version,
                        ProjectName,
                        HgRepoUrlHost,
                        PanoramaFrontMatter,
                        null};
                rowStoryProjectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStoryProjectRow);
                return rowStoryProjectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StoryProjectDataTable cln = ((StoryProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StoryProjectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnversion = base.Columns["version"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnHgRepoUrlHost = base.Columns["HgRepoUrlHost"];
                this.columnPanoramaFrontMatter = base.Columns["PanoramaFrontMatter"];
                this.columnStoryProject_Id = base.Columns["StoryProject_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnversion = new global::System.Data.DataColumn("version", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnversion);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProjectName);
                this.columnHgRepoUrlHost = new global::System.Data.DataColumn("HgRepoUrlHost", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHgRepoUrlHost);
                this.columnPanoramaFrontMatter = new global::System.Data.DataColumn("PanoramaFrontMatter", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPanoramaFrontMatter);
                this.columnStoryProject_Id = new global::System.Data.DataColumn("StoryProject_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStoryProject_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStoryProject_Id}, true));
                this.columnversion.AllowDBNull = false;
                this.columnversion.Namespace = "";
                this.columnProjectName.AllowDBNull = false;
                this.columnProjectName.Namespace = "";
                this.columnHgRepoUrlHost.Namespace = "";
                this.columnPanoramaFrontMatter.Namespace = "";
                this.columnStoryProject_Id.AutoIncrement = true;
                this.columnStoryProject_Id.AllowDBNull = false;
                this.columnStoryProject_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow NewStoryProjectRow() {
                return ((StoryProjectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StoryProjectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StoryProjectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoryProjectRowChanged != null)) {
                    this.StoryProjectRowChanged(this, new StoryProjectRowChangeEvent(((StoryProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoryProjectRowChanging != null)) {
                    this.StoryProjectRowChanging(this, new StoryProjectRowChangeEvent(((StoryProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoryProjectRowDeleted != null)) {
                    this.StoryProjectRowDeleted(this, new StoryProjectRowChangeEvent(((StoryProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoryProjectRowDeleting != null)) {
                    this.StoryProjectRowDeleting(this, new StoryProjectRowChangeEvent(((StoryProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStoryProjectRow(StoryProjectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StoryProjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MembersDataTable : global::System.Data.TypedTableBase<MembersRow> {
            
            private global::System.Data.DataColumn columnHasOutsideEnglishBTer;
            
            private global::System.Data.DataColumn columnHasFirstPassMentor;
            
            private global::System.Data.DataColumn columnHasIndependentConsultant;
            
            private global::System.Data.DataColumn columnMembers_Id;
            
            private global::System.Data.DataColumn columnStoryProject_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersDataTable() {
                this.TableName = "Members";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MembersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasOutsideEnglishBTerColumn {
                get {
                    return this.columnHasOutsideEnglishBTer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasFirstPassMentorColumn {
                get {
                    return this.columnHasFirstPassMentor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasIndependentConsultantColumn {
                get {
                    return this.columnHasIndependentConsultant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Members_IdColumn {
                get {
                    return this.columnMembers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryProject_IdColumn {
                get {
                    return this.columnStoryProject_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow this[int index] {
                get {
                    return ((MembersRow)(this.Rows[index]));
                }
            }
            
            public event MembersRowChangeEventHandler MembersRowChanging;
            
            public event MembersRowChangeEventHandler MembersRowChanged;
            
            public event MembersRowChangeEventHandler MembersRowDeleting;
            
            public event MembersRowChangeEventHandler MembersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMembersRow(MembersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow AddMembersRow(bool HasOutsideEnglishBTer, bool HasFirstPassMentor, bool HasIndependentConsultant, StoryProjectRow parentStoryProjectRowByStoryProject_Members) {
                MembersRow rowMembersRow = ((MembersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HasOutsideEnglishBTer,
                        HasFirstPassMentor,
                        HasIndependentConsultant,
                        null,
                        null};
                if ((parentStoryProjectRowByStoryProject_Members != null)) {
                    columnValuesArray[4] = parentStoryProjectRowByStoryProject_Members[4];
                }
                rowMembersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMembersRow);
                return rowMembersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MembersDataTable cln = ((MembersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MembersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHasOutsideEnglishBTer = base.Columns["HasOutsideEnglishBTer"];
                this.columnHasFirstPassMentor = base.Columns["HasFirstPassMentor"];
                this.columnHasIndependentConsultant = base.Columns["HasIndependentConsultant"];
                this.columnMembers_Id = base.Columns["Members_Id"];
                this.columnStoryProject_Id = base.Columns["StoryProject_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHasOutsideEnglishBTer = new global::System.Data.DataColumn("HasOutsideEnglishBTer", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHasOutsideEnglishBTer);
                this.columnHasFirstPassMentor = new global::System.Data.DataColumn("HasFirstPassMentor", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHasFirstPassMentor);
                this.columnHasIndependentConsultant = new global::System.Data.DataColumn("HasIndependentConsultant", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHasIndependentConsultant);
                this.columnMembers_Id = new global::System.Data.DataColumn("Members_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMembers_Id);
                this.columnStoryProject_Id = new global::System.Data.DataColumn("StoryProject_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStoryProject_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMembers_Id}, true));
                this.columnHasOutsideEnglishBTer.Namespace = "";
                this.columnHasFirstPassMentor.Namespace = "";
                this.columnHasIndependentConsultant.Namespace = "";
                this.columnMembers_Id.AutoIncrement = true;
                this.columnMembers_Id.AllowDBNull = false;
                this.columnMembers_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow NewMembersRow() {
                return ((MembersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MembersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MembersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MembersRowChanged != null)) {
                    this.MembersRowChanged(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MembersRowChanging != null)) {
                    this.MembersRowChanging(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MembersRowDeleted != null)) {
                    this.MembersRowDeleted(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MembersRowDeleting != null)) {
                    this.MembersRowDeleting(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMembersRow(MembersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MembersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MemberDataTable : global::System.Data.TypedTableBase<MemberRow> {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmemberType;
            
            private global::System.Data.DataColumn columnmemberKey;
            
            private global::System.Data.DataColumn columnemail;
            
            private global::System.Data.DataColumn columnaltPhone;
            
            private global::System.Data.DataColumn columnphone;
            
            private global::System.Data.DataColumn columnbioData;
            
            private global::System.Data.DataColumn columnskypeID;
            
            private global::System.Data.DataColumn columnteamViewerID;
            
            private global::System.Data.DataColumn columnOverrideVernacularKeyboard;
            
            private global::System.Data.DataColumn columnOverrideNationalBTKeyboard;
            
            private global::System.Data.DataColumn columnOverrideInternationalBTKeyboard;
            
            private global::System.Data.DataColumn columnOverrideFreeTranslationKeyboard;
            
            private global::System.Data.DataColumn columnOverrideFontNameVernacular;
            
            private global::System.Data.DataColumn columnOverrideFontSizeVernacular;
            
            private global::System.Data.DataColumn columnOverrideRtlVernacular;
            
            private global::System.Data.DataColumn columnOverrideFontNameNationalBT;
            
            private global::System.Data.DataColumn columnOverrideFontSizeNationalBT;
            
            private global::System.Data.DataColumn columnOverrideRtlNationalBT;
            
            private global::System.Data.DataColumn columnOverrideFontNameInternationalBT;
            
            private global::System.Data.DataColumn columnOverrideFontSizeInternationalBT;
            
            private global::System.Data.DataColumn columnOverrideRtlInternationalBT;
            
            private global::System.Data.DataColumn columnOverrideFontNameFreeTranslation;
            
            private global::System.Data.DataColumn columnOverrideFontSizeFreeTranslation;
            
            private global::System.Data.DataColumn columnOverrideRtlFreeTranslation;
            
            private global::System.Data.DataColumn columnHgUsername;
            
            private global::System.Data.DataColumn columnHgPassword;
            
            private global::System.Data.DataColumn columnTransliteratorVernacular;
            
            private global::System.Data.DataColumn columnTransliteratorDirectionForwardVernacular;
            
            private global::System.Data.DataColumn columnTransliteratorNationalBT;
            
            private global::System.Data.DataColumn columnTransliteratorDirectionForwardNationalBT;
            
            private global::System.Data.DataColumn columnTransliteratorInternationalBT;
            
            private global::System.Data.DataColumn columnTransliteratorDirectionForwardInternationalBT;
            
            private global::System.Data.DataColumn columnTransliteratorFreeTranslation;
            
            private global::System.Data.DataColumn columnTransliteratorDirectionForwardFreeTranslation;
            
            private global::System.Data.DataColumn columnDefaultTasksAllowed;
            
            private global::System.Data.DataColumn columnDefaultTasksRequired;
            
            private global::System.Data.DataColumn columnMembers_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberDataTable() {
                this.TableName = "Member";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MemberDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MemberDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberTypeColumn {
                get {
                    return this.columnmemberType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberKeyColumn {
                get {
                    return this.columnmemberKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn altPhoneColumn {
                get {
                    return this.columnaltPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phoneColumn {
                get {
                    return this.columnphone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bioDataColumn {
                get {
                    return this.columnbioData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn skypeIDColumn {
                get {
                    return this.columnskypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn teamViewerIDColumn {
                get {
                    return this.columnteamViewerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideVernacularKeyboardColumn {
                get {
                    return this.columnOverrideVernacularKeyboard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideNationalBTKeyboardColumn {
                get {
                    return this.columnOverrideNationalBTKeyboard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideInternationalBTKeyboardColumn {
                get {
                    return this.columnOverrideInternationalBTKeyboard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideFreeTranslationKeyboardColumn {
                get {
                    return this.columnOverrideFreeTranslationKeyboard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideFontNameVernacularColumn {
                get {
                    return this.columnOverrideFontNameVernacular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideFontSizeVernacularColumn {
                get {
                    return this.columnOverrideFontSizeVernacular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideRtlVernacularColumn {
                get {
                    return this.columnOverrideRtlVernacular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideFontNameNationalBTColumn {
                get {
                    return this.columnOverrideFontNameNationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideFontSizeNationalBTColumn {
                get {
                    return this.columnOverrideFontSizeNationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideRtlNationalBTColumn {
                get {
                    return this.columnOverrideRtlNationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideFontNameInternationalBTColumn {
                get {
                    return this.columnOverrideFontNameInternationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideFontSizeInternationalBTColumn {
                get {
                    return this.columnOverrideFontSizeInternationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideRtlInternationalBTColumn {
                get {
                    return this.columnOverrideRtlInternationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideFontNameFreeTranslationColumn {
                get {
                    return this.columnOverrideFontNameFreeTranslation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideFontSizeFreeTranslationColumn {
                get {
                    return this.columnOverrideFontSizeFreeTranslation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideRtlFreeTranslationColumn {
                get {
                    return this.columnOverrideRtlFreeTranslation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HgUsernameColumn {
                get {
                    return this.columnHgUsername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HgPasswordColumn {
                get {
                    return this.columnHgPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransliteratorVernacularColumn {
                get {
                    return this.columnTransliteratorVernacular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransliteratorDirectionForwardVernacularColumn {
                get {
                    return this.columnTransliteratorDirectionForwardVernacular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransliteratorNationalBTColumn {
                get {
                    return this.columnTransliteratorNationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransliteratorDirectionForwardNationalBTColumn {
                get {
                    return this.columnTransliteratorDirectionForwardNationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransliteratorInternationalBTColumn {
                get {
                    return this.columnTransliteratorInternationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransliteratorDirectionForwardInternationalBTColumn {
                get {
                    return this.columnTransliteratorDirectionForwardInternationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransliteratorFreeTranslationColumn {
                get {
                    return this.columnTransliteratorFreeTranslation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransliteratorDirectionForwardFreeTranslationColumn {
                get {
                    return this.columnTransliteratorDirectionForwardFreeTranslation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultTasksAllowedColumn {
                get {
                    return this.columnDefaultTasksAllowed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultTasksRequiredColumn {
                get {
                    return this.columnDefaultTasksRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Members_IdColumn {
                get {
                    return this.columnMembers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow this[int index] {
                get {
                    return ((MemberRow)(this.Rows[index]));
                }
            }
            
            public event MemberRowChangeEventHandler MemberRowChanging;
            
            public event MemberRowChangeEventHandler MemberRowChanged;
            
            public event MemberRowChangeEventHandler MemberRowDeleting;
            
            public event MemberRowChangeEventHandler MemberRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMemberRow(MemberRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow AddMemberRow(
                        string name, 
                        string memberType, 
                        string memberKey, 
                        string email, 
                        string altPhone, 
                        string phone, 
                        string bioData, 
                        string skypeID, 
                        string teamViewerID, 
                        string OverrideVernacularKeyboard, 
                        string OverrideNationalBTKeyboard, 
                        string OverrideInternationalBTKeyboard, 
                        string OverrideFreeTranslationKeyboard, 
                        string OverrideFontNameVernacular, 
                        float OverrideFontSizeVernacular, 
                        bool OverrideRtlVernacular, 
                        string OverrideFontNameNationalBT, 
                        float OverrideFontSizeNationalBT, 
                        bool OverrideRtlNationalBT, 
                        string OverrideFontNameInternationalBT, 
                        float OverrideFontSizeInternationalBT, 
                        bool OverrideRtlInternationalBT, 
                        string OverrideFontNameFreeTranslation, 
                        float OverrideFontSizeFreeTranslation, 
                        bool OverrideRtlFreeTranslation, 
                        string HgUsername, 
                        string HgPassword, 
                        string TransliteratorVernacular, 
                        bool TransliteratorDirectionForwardVernacular, 
                        string TransliteratorNationalBT, 
                        bool TransliteratorDirectionForwardNationalBT, 
                        string TransliteratorInternationalBT, 
                        bool TransliteratorDirectionForwardInternationalBT, 
                        string TransliteratorFreeTranslation, 
                        bool TransliteratorDirectionForwardFreeTranslation, 
                        string DefaultTasksAllowed, 
                        string DefaultTasksRequired, 
                        MembersRow parentMembersRowByMembers_Member) {
                MemberRow rowMemberRow = ((MemberRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        memberType,
                        memberKey,
                        email,
                        altPhone,
                        phone,
                        bioData,
                        skypeID,
                        teamViewerID,
                        OverrideVernacularKeyboard,
                        OverrideNationalBTKeyboard,
                        OverrideInternationalBTKeyboard,
                        OverrideFreeTranslationKeyboard,
                        OverrideFontNameVernacular,
                        OverrideFontSizeVernacular,
                        OverrideRtlVernacular,
                        OverrideFontNameNationalBT,
                        OverrideFontSizeNationalBT,
                        OverrideRtlNationalBT,
                        OverrideFontNameInternationalBT,
                        OverrideFontSizeInternationalBT,
                        OverrideRtlInternationalBT,
                        OverrideFontNameFreeTranslation,
                        OverrideFontSizeFreeTranslation,
                        OverrideRtlFreeTranslation,
                        HgUsername,
                        HgPassword,
                        TransliteratorVernacular,
                        TransliteratorDirectionForwardVernacular,
                        TransliteratorNationalBT,
                        TransliteratorDirectionForwardNationalBT,
                        TransliteratorInternationalBT,
                        TransliteratorDirectionForwardInternationalBT,
                        TransliteratorFreeTranslation,
                        TransliteratorDirectionForwardFreeTranslation,
                        DefaultTasksAllowed,
                        DefaultTasksRequired,
                        null};
                if ((parentMembersRowByMembers_Member != null)) {
                    columnValuesArray[37] = parentMembersRowByMembers_Member[3];
                }
                rowMemberRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMemberRow);
                return rowMemberRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MemberDataTable cln = ((MemberDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MemberDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnmemberType = base.Columns["memberType"];
                this.columnmemberKey = base.Columns["memberKey"];
                this.columnemail = base.Columns["email"];
                this.columnaltPhone = base.Columns["altPhone"];
                this.columnphone = base.Columns["phone"];
                this.columnbioData = base.Columns["bioData"];
                this.columnskypeID = base.Columns["skypeID"];
                this.columnteamViewerID = base.Columns["teamViewerID"];
                this.columnOverrideVernacularKeyboard = base.Columns["OverrideVernacularKeyboard"];
                this.columnOverrideNationalBTKeyboard = base.Columns["OverrideNationalBTKeyboard"];
                this.columnOverrideInternationalBTKeyboard = base.Columns["OverrideInternationalBTKeyboard"];
                this.columnOverrideFreeTranslationKeyboard = base.Columns["OverrideFreeTranslationKeyboard"];
                this.columnOverrideFontNameVernacular = base.Columns["OverrideFontNameVernacular"];
                this.columnOverrideFontSizeVernacular = base.Columns["OverrideFontSizeVernacular"];
                this.columnOverrideRtlVernacular = base.Columns["OverrideRtlVernacular"];
                this.columnOverrideFontNameNationalBT = base.Columns["OverrideFontNameNationalBT"];
                this.columnOverrideFontSizeNationalBT = base.Columns["OverrideFontSizeNationalBT"];
                this.columnOverrideRtlNationalBT = base.Columns["OverrideRtlNationalBT"];
                this.columnOverrideFontNameInternationalBT = base.Columns["OverrideFontNameInternationalBT"];
                this.columnOverrideFontSizeInternationalBT = base.Columns["OverrideFontSizeInternationalBT"];
                this.columnOverrideRtlInternationalBT = base.Columns["OverrideRtlInternationalBT"];
                this.columnOverrideFontNameFreeTranslation = base.Columns["OverrideFontNameFreeTranslation"];
                this.columnOverrideFontSizeFreeTranslation = base.Columns["OverrideFontSizeFreeTranslation"];
                this.columnOverrideRtlFreeTranslation = base.Columns["OverrideRtlFreeTranslation"];
                this.columnHgUsername = base.Columns["HgUsername"];
                this.columnHgPassword = base.Columns["HgPassword"];
                this.columnTransliteratorVernacular = base.Columns["TransliteratorVernacular"];
                this.columnTransliteratorDirectionForwardVernacular = base.Columns["TransliteratorDirectionForwardVernacular"];
                this.columnTransliteratorNationalBT = base.Columns["TransliteratorNationalBT"];
                this.columnTransliteratorDirectionForwardNationalBT = base.Columns["TransliteratorDirectionForwardNationalBT"];
                this.columnTransliteratorInternationalBT = base.Columns["TransliteratorInternationalBT"];
                this.columnTransliteratorDirectionForwardInternationalBT = base.Columns["TransliteratorDirectionForwardInternationalBT"];
                this.columnTransliteratorFreeTranslation = base.Columns["TransliteratorFreeTranslation"];
                this.columnTransliteratorDirectionForwardFreeTranslation = base.Columns["TransliteratorDirectionForwardFreeTranslation"];
                this.columnDefaultTasksAllowed = base.Columns["DefaultTasksAllowed"];
                this.columnDefaultTasksRequired = base.Columns["DefaultTasksRequired"];
                this.columnMembers_Id = base.Columns["Members_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnmemberType = new global::System.Data.DataColumn("memberType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberType);
                this.columnmemberKey = new global::System.Data.DataColumn("memberKey", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberKey);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnemail);
                this.columnaltPhone = new global::System.Data.DataColumn("altPhone", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnaltPhone);
                this.columnphone = new global::System.Data.DataColumn("phone", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnphone);
                this.columnbioData = new global::System.Data.DataColumn("bioData", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnbioData);
                this.columnskypeID = new global::System.Data.DataColumn("skypeID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnskypeID);
                this.columnteamViewerID = new global::System.Data.DataColumn("teamViewerID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnteamViewerID);
                this.columnOverrideVernacularKeyboard = new global::System.Data.DataColumn("OverrideVernacularKeyboard", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideVernacularKeyboard);
                this.columnOverrideNationalBTKeyboard = new global::System.Data.DataColumn("OverrideNationalBTKeyboard", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideNationalBTKeyboard);
                this.columnOverrideInternationalBTKeyboard = new global::System.Data.DataColumn("OverrideInternationalBTKeyboard", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideInternationalBTKeyboard);
                this.columnOverrideFreeTranslationKeyboard = new global::System.Data.DataColumn("OverrideFreeTranslationKeyboard", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideFreeTranslationKeyboard);
                this.columnOverrideFontNameVernacular = new global::System.Data.DataColumn("OverrideFontNameVernacular", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideFontNameVernacular);
                this.columnOverrideFontSizeVernacular = new global::System.Data.DataColumn("OverrideFontSizeVernacular", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideFontSizeVernacular);
                this.columnOverrideRtlVernacular = new global::System.Data.DataColumn("OverrideRtlVernacular", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideRtlVernacular);
                this.columnOverrideFontNameNationalBT = new global::System.Data.DataColumn("OverrideFontNameNationalBT", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideFontNameNationalBT);
                this.columnOverrideFontSizeNationalBT = new global::System.Data.DataColumn("OverrideFontSizeNationalBT", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideFontSizeNationalBT);
                this.columnOverrideRtlNationalBT = new global::System.Data.DataColumn("OverrideRtlNationalBT", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideRtlNationalBT);
                this.columnOverrideFontNameInternationalBT = new global::System.Data.DataColumn("OverrideFontNameInternationalBT", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideFontNameInternationalBT);
                this.columnOverrideFontSizeInternationalBT = new global::System.Data.DataColumn("OverrideFontSizeInternationalBT", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideFontSizeInternationalBT);
                this.columnOverrideRtlInternationalBT = new global::System.Data.DataColumn("OverrideRtlInternationalBT", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideRtlInternationalBT);
                this.columnOverrideFontNameFreeTranslation = new global::System.Data.DataColumn("OverrideFontNameFreeTranslation", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideFontNameFreeTranslation);
                this.columnOverrideFontSizeFreeTranslation = new global::System.Data.DataColumn("OverrideFontSizeFreeTranslation", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideFontSizeFreeTranslation);
                this.columnOverrideRtlFreeTranslation = new global::System.Data.DataColumn("OverrideRtlFreeTranslation", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideRtlFreeTranslation);
                this.columnHgUsername = new global::System.Data.DataColumn("HgUsername", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHgUsername);
                this.columnHgPassword = new global::System.Data.DataColumn("HgPassword", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHgPassword);
                this.columnTransliteratorVernacular = new global::System.Data.DataColumn("TransliteratorVernacular", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTransliteratorVernacular);
                this.columnTransliteratorDirectionForwardVernacular = new global::System.Data.DataColumn("TransliteratorDirectionForwardVernacular", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTransliteratorDirectionForwardVernacular);
                this.columnTransliteratorNationalBT = new global::System.Data.DataColumn("TransliteratorNationalBT", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTransliteratorNationalBT);
                this.columnTransliteratorDirectionForwardNationalBT = new global::System.Data.DataColumn("TransliteratorDirectionForwardNationalBT", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTransliteratorDirectionForwardNationalBT);
                this.columnTransliteratorInternationalBT = new global::System.Data.DataColumn("TransliteratorInternationalBT", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTransliteratorInternationalBT);
                this.columnTransliteratorDirectionForwardInternationalBT = new global::System.Data.DataColumn("TransliteratorDirectionForwardInternationalBT", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTransliteratorDirectionForwardInternationalBT);
                this.columnTransliteratorFreeTranslation = new global::System.Data.DataColumn("TransliteratorFreeTranslation", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTransliteratorFreeTranslation);
                this.columnTransliteratorDirectionForwardFreeTranslation = new global::System.Data.DataColumn("TransliteratorDirectionForwardFreeTranslation", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTransliteratorDirectionForwardFreeTranslation);
                this.columnDefaultTasksAllowed = new global::System.Data.DataColumn("DefaultTasksAllowed", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDefaultTasksAllowed);
                this.columnDefaultTasksRequired = new global::System.Data.DataColumn("DefaultTasksRequired", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDefaultTasksRequired);
                this.columnMembers_Id = new global::System.Data.DataColumn("Members_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMembers_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnmemberType.AllowDBNull = false;
                this.columnmemberType.Namespace = "";
                this.columnmemberKey.AllowDBNull = false;
                this.columnmemberKey.Namespace = "";
                this.columnemail.Namespace = "";
                this.columnaltPhone.Namespace = "";
                this.columnphone.Namespace = "";
                this.columnbioData.Namespace = "";
                this.columnskypeID.Namespace = "";
                this.columnteamViewerID.Namespace = "";
                this.columnOverrideVernacularKeyboard.Namespace = "";
                this.columnOverrideNationalBTKeyboard.Namespace = "";
                this.columnOverrideInternationalBTKeyboard.Namespace = "";
                this.columnOverrideFreeTranslationKeyboard.Namespace = "";
                this.columnOverrideFontNameVernacular.Namespace = "";
                this.columnOverrideFontSizeVernacular.Namespace = "";
                this.columnOverrideRtlVernacular.Namespace = "";
                this.columnOverrideFontNameNationalBT.Namespace = "";
                this.columnOverrideFontSizeNationalBT.Namespace = "";
                this.columnOverrideRtlNationalBT.Namespace = "";
                this.columnOverrideFontNameInternationalBT.Namespace = "";
                this.columnOverrideFontSizeInternationalBT.Namespace = "";
                this.columnOverrideRtlInternationalBT.Namespace = "";
                this.columnOverrideFontNameFreeTranslation.Namespace = "";
                this.columnOverrideFontSizeFreeTranslation.Namespace = "";
                this.columnOverrideRtlFreeTranslation.Namespace = "";
                this.columnHgUsername.Namespace = "";
                this.columnHgPassword.Namespace = "";
                this.columnTransliteratorVernacular.Namespace = "";
                this.columnTransliteratorDirectionForwardVernacular.Namespace = "";
                this.columnTransliteratorNationalBT.Namespace = "";
                this.columnTransliteratorDirectionForwardNationalBT.Namespace = "";
                this.columnTransliteratorInternationalBT.Namespace = "";
                this.columnTransliteratorDirectionForwardInternationalBT.Namespace = "";
                this.columnTransliteratorFreeTranslation.Namespace = "";
                this.columnTransliteratorDirectionForwardFreeTranslation.Namespace = "";
                this.columnDefaultTasksAllowed.Namespace = "";
                this.columnDefaultTasksRequired.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow NewMemberRow() {
                return ((MemberRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MemberRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MemberRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MemberRowChanged != null)) {
                    this.MemberRowChanged(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MemberRowChanging != null)) {
                    this.MemberRowChanging(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MemberRowDeleted != null)) {
                    this.MemberRowDeleted(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MemberRowDeleting != null)) {
                    this.MemberRowDeleting(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMemberRow(MemberRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MemberDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LanguagesDataTable : global::System.Data.TypedTableBase<LanguagesRow> {
            
            private global::System.Data.DataColumn columnUseRetellingVernacular;
            
            private global::System.Data.DataColumn columnUseRetellingNationalBT;
            
            private global::System.Data.DataColumn columnUseRetellingInternationalBT;
            
            private global::System.Data.DataColumn columnUseTestQuestionVernacular;
            
            private global::System.Data.DataColumn columnUseTestQuestionNationalBT;
            
            private global::System.Data.DataColumn columnUseTestQuestionInternationalBT;
            
            private global::System.Data.DataColumn columnUseAnswerVernacular;
            
            private global::System.Data.DataColumn columnUseAnswerNationalBT;
            
            private global::System.Data.DataColumn columnUseAnswerInternationalBT;
            
            private global::System.Data.DataColumn columnLanguages_Id;
            
            private global::System.Data.DataColumn columnStoryProject_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesDataTable() {
                this.TableName = "Languages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LanguagesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LanguagesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseRetellingVernacularColumn {
                get {
                    return this.columnUseRetellingVernacular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseRetellingNationalBTColumn {
                get {
                    return this.columnUseRetellingNationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseRetellingInternationalBTColumn {
                get {
                    return this.columnUseRetellingInternationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseTestQuestionVernacularColumn {
                get {
                    return this.columnUseTestQuestionVernacular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseTestQuestionNationalBTColumn {
                get {
                    return this.columnUseTestQuestionNationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseTestQuestionInternationalBTColumn {
                get {
                    return this.columnUseTestQuestionInternationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAnswerVernacularColumn {
                get {
                    return this.columnUseAnswerVernacular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAnswerNationalBTColumn {
                get {
                    return this.columnUseAnswerNationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAnswerInternationalBTColumn {
                get {
                    return this.columnUseAnswerInternationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Languages_IdColumn {
                get {
                    return this.columnLanguages_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryProject_IdColumn {
                get {
                    return this.columnStoryProject_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow this[int index] {
                get {
                    return ((LanguagesRow)(this.Rows[index]));
                }
            }
            
            public event LanguagesRowChangeEventHandler LanguagesRowChanging;
            
            public event LanguagesRowChangeEventHandler LanguagesRowChanged;
            
            public event LanguagesRowChangeEventHandler LanguagesRowDeleting;
            
            public event LanguagesRowChangeEventHandler LanguagesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLanguagesRow(LanguagesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow AddLanguagesRow(bool UseRetellingVernacular, bool UseRetellingNationalBT, bool UseRetellingInternationalBT, bool UseTestQuestionVernacular, bool UseTestQuestionNationalBT, bool UseTestQuestionInternationalBT, bool UseAnswerVernacular, bool UseAnswerNationalBT, bool UseAnswerInternationalBT, StoryProjectRow parentStoryProjectRowByStoryProject_Languages) {
                LanguagesRow rowLanguagesRow = ((LanguagesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UseRetellingVernacular,
                        UseRetellingNationalBT,
                        UseRetellingInternationalBT,
                        UseTestQuestionVernacular,
                        UseTestQuestionNationalBT,
                        UseTestQuestionInternationalBT,
                        UseAnswerVernacular,
                        UseAnswerNationalBT,
                        UseAnswerInternationalBT,
                        null,
                        null};
                if ((parentStoryProjectRowByStoryProject_Languages != null)) {
                    columnValuesArray[10] = parentStoryProjectRowByStoryProject_Languages[4];
                }
                rowLanguagesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLanguagesRow);
                return rowLanguagesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LanguagesDataTable cln = ((LanguagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LanguagesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUseRetellingVernacular = base.Columns["UseRetellingVernacular"];
                this.columnUseRetellingNationalBT = base.Columns["UseRetellingNationalBT"];
                this.columnUseRetellingInternationalBT = base.Columns["UseRetellingInternationalBT"];
                this.columnUseTestQuestionVernacular = base.Columns["UseTestQuestionVernacular"];
                this.columnUseTestQuestionNationalBT = base.Columns["UseTestQuestionNationalBT"];
                this.columnUseTestQuestionInternationalBT = base.Columns["UseTestQuestionInternationalBT"];
                this.columnUseAnswerVernacular = base.Columns["UseAnswerVernacular"];
                this.columnUseAnswerNationalBT = base.Columns["UseAnswerNationalBT"];
                this.columnUseAnswerInternationalBT = base.Columns["UseAnswerInternationalBT"];
                this.columnLanguages_Id = base.Columns["Languages_Id"];
                this.columnStoryProject_Id = base.Columns["StoryProject_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUseRetellingVernacular = new global::System.Data.DataColumn("UseRetellingVernacular", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseRetellingVernacular);
                this.columnUseRetellingNationalBT = new global::System.Data.DataColumn("UseRetellingNationalBT", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseRetellingNationalBT);
                this.columnUseRetellingInternationalBT = new global::System.Data.DataColumn("UseRetellingInternationalBT", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseRetellingInternationalBT);
                this.columnUseTestQuestionVernacular = new global::System.Data.DataColumn("UseTestQuestionVernacular", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseTestQuestionVernacular);
                this.columnUseTestQuestionNationalBT = new global::System.Data.DataColumn("UseTestQuestionNationalBT", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseTestQuestionNationalBT);
                this.columnUseTestQuestionInternationalBT = new global::System.Data.DataColumn("UseTestQuestionInternationalBT", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseTestQuestionInternationalBT);
                this.columnUseAnswerVernacular = new global::System.Data.DataColumn("UseAnswerVernacular", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseAnswerVernacular);
                this.columnUseAnswerNationalBT = new global::System.Data.DataColumn("UseAnswerNationalBT", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseAnswerNationalBT);
                this.columnUseAnswerInternationalBT = new global::System.Data.DataColumn("UseAnswerInternationalBT", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseAnswerInternationalBT);
                this.columnLanguages_Id = new global::System.Data.DataColumn("Languages_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLanguages_Id);
                this.columnStoryProject_Id = new global::System.Data.DataColumn("StoryProject_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStoryProject_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLanguages_Id}, true));
                this.columnUseRetellingVernacular.Namespace = "";
                this.columnUseRetellingNationalBT.Namespace = "";
                this.columnUseRetellingInternationalBT.Namespace = "";
                this.columnUseTestQuestionVernacular.Namespace = "";
                this.columnUseTestQuestionNationalBT.Namespace = "";
                this.columnUseTestQuestionInternationalBT.Namespace = "";
                this.columnUseAnswerVernacular.Namespace = "";
                this.columnUseAnswerNationalBT.Namespace = "";
                this.columnUseAnswerInternationalBT.Namespace = "";
                this.columnLanguages_Id.AutoIncrement = true;
                this.columnLanguages_Id.AllowDBNull = false;
                this.columnLanguages_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow NewLanguagesRow() {
                return ((LanguagesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LanguagesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LanguagesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LanguagesRowChanged != null)) {
                    this.LanguagesRowChanged(this, new LanguagesRowChangeEvent(((LanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LanguagesRowChanging != null)) {
                    this.LanguagesRowChanging(this, new LanguagesRowChangeEvent(((LanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LanguagesRowDeleted != null)) {
                    this.LanguagesRowDeleted(this, new LanguagesRowChangeEvent(((LanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LanguagesRowDeleting != null)) {
                    this.LanguagesRowDeleting(this, new LanguagesRowChangeEvent(((LanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLanguagesRow(LanguagesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LanguagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LanguageInfoDataTable : global::System.Data.TypedTableBase<LanguageInfoRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columncode;
            
            private global::System.Data.DataColumn columnFontName;
            
            private global::System.Data.DataColumn columnFontSize;
            
            private global::System.Data.DataColumn columnFontColor;
            
            private global::System.Data.DataColumn columnSentenceFinalPunct;
            
            private global::System.Data.DataColumn columnKeyboard;
            
            private global::System.Data.DataColumn columnRTL;
            
            private global::System.Data.DataColumn columnLanguages_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageInfoDataTable() {
                this.TableName = "LanguageInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LanguageInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LanguageInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn codeColumn {
                get {
                    return this.columncode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontNameColumn {
                get {
                    return this.columnFontName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontSizeColumn {
                get {
                    return this.columnFontSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontColorColumn {
                get {
                    return this.columnFontColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SentenceFinalPunctColumn {
                get {
                    return this.columnSentenceFinalPunct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyboardColumn {
                get {
                    return this.columnKeyboard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RTLColumn {
                get {
                    return this.columnRTL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Languages_IdColumn {
                get {
                    return this.columnLanguages_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageInfoRow this[int index] {
                get {
                    return ((LanguageInfoRow)(this.Rows[index]));
                }
            }
            
            public event LanguageInfoRowChangeEventHandler LanguageInfoRowChanging;
            
            public event LanguageInfoRowChangeEventHandler LanguageInfoRowChanged;
            
            public event LanguageInfoRowChangeEventHandler LanguageInfoRowDeleting;
            
            public event LanguageInfoRowChangeEventHandler LanguageInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLanguageInfoRow(LanguageInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageInfoRow AddLanguageInfoRow(string lang, string name, string code, string FontName, float FontSize, string FontColor, string SentenceFinalPunct, string Keyboard, bool RTL, LanguagesRow parentLanguagesRowByLanguages_LanguageInfo) {
                LanguageInfoRow rowLanguageInfoRow = ((LanguageInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        name,
                        code,
                        FontName,
                        FontSize,
                        FontColor,
                        SentenceFinalPunct,
                        Keyboard,
                        RTL,
                        null};
                if ((parentLanguagesRowByLanguages_LanguageInfo != null)) {
                    columnValuesArray[9] = parentLanguagesRowByLanguages_LanguageInfo[9];
                }
                rowLanguageInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLanguageInfoRow);
                return rowLanguageInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LanguageInfoDataTable cln = ((LanguageInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LanguageInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnname = base.Columns["name"];
                this.columncode = base.Columns["code"];
                this.columnFontName = base.Columns["FontName"];
                this.columnFontSize = base.Columns["FontSize"];
                this.columnFontColor = base.Columns["FontColor"];
                this.columnSentenceFinalPunct = base.Columns["SentenceFinalPunct"];
                this.columnKeyboard = base.Columns["Keyboard"];
                this.columnRTL = base.Columns["RTL"];
                this.columnLanguages_Id = base.Columns["Languages_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columncode = new global::System.Data.DataColumn("code", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncode);
                this.columnFontName = new global::System.Data.DataColumn("FontName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontName);
                this.columnFontSize = new global::System.Data.DataColumn("FontSize", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontSize);
                this.columnFontColor = new global::System.Data.DataColumn("FontColor", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontColor);
                this.columnSentenceFinalPunct = new global::System.Data.DataColumn("SentenceFinalPunct", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSentenceFinalPunct);
                this.columnKeyboard = new global::System.Data.DataColumn("Keyboard", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyboard);
                this.columnRTL = new global::System.Data.DataColumn("RTL", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRTL);
                this.columnLanguages_Id = new global::System.Data.DataColumn("Languages_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLanguages_Id);
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columncode.AllowDBNull = false;
                this.columncode.Namespace = "";
                this.columnFontName.AllowDBNull = false;
                this.columnFontName.Namespace = "";
                this.columnFontSize.AllowDBNull = false;
                this.columnFontSize.Namespace = "";
                this.columnFontColor.AllowDBNull = false;
                this.columnFontColor.Namespace = "";
                this.columnSentenceFinalPunct.AllowDBNull = false;
                this.columnSentenceFinalPunct.Namespace = "";
                this.columnKeyboard.Namespace = "";
                this.columnRTL.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageInfoRow NewLanguageInfoRow() {
                return ((LanguageInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LanguageInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LanguageInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LanguageInfoRowChanged != null)) {
                    this.LanguageInfoRowChanged(this, new LanguageInfoRowChangeEvent(((LanguageInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LanguageInfoRowChanging != null)) {
                    this.LanguageInfoRowChanging(this, new LanguageInfoRowChangeEvent(((LanguageInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LanguageInfoRowDeleted != null)) {
                    this.LanguageInfoRowDeleted(this, new LanguageInfoRowChangeEvent(((LanguageInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LanguageInfoRowDeleting != null)) {
                    this.LanguageInfoRowDeleting(this, new LanguageInfoRowChangeEvent(((LanguageInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLanguageInfoRow(LanguageInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LanguageInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdaptItConfigurationsDataTable : global::System.Data.TypedTableBase<AdaptItConfigurationsRow> {
            
            private global::System.Data.DataColumn columnAdaptItConfigurations_Id;
            
            private global::System.Data.DataColumn columnStoryProject_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationsDataTable() {
                this.TableName = "AdaptItConfigurations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdaptItConfigurationsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AdaptItConfigurationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdaptItConfigurations_IdColumn {
                get {
                    return this.columnAdaptItConfigurations_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryProject_IdColumn {
                get {
                    return this.columnStoryProject_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationsRow this[int index] {
                get {
                    return ((AdaptItConfigurationsRow)(this.Rows[index]));
                }
            }
            
            public event AdaptItConfigurationsRowChangeEventHandler AdaptItConfigurationsRowChanging;
            
            public event AdaptItConfigurationsRowChangeEventHandler AdaptItConfigurationsRowChanged;
            
            public event AdaptItConfigurationsRowChangeEventHandler AdaptItConfigurationsRowDeleting;
            
            public event AdaptItConfigurationsRowChangeEventHandler AdaptItConfigurationsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAdaptItConfigurationsRow(AdaptItConfigurationsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationsRow AddAdaptItConfigurationsRow(StoryProjectRow parentStoryProjectRowByStoryProject_AdaptItConfigurations) {
                AdaptItConfigurationsRow rowAdaptItConfigurationsRow = ((AdaptItConfigurationsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentStoryProjectRowByStoryProject_AdaptItConfigurations != null)) {
                    columnValuesArray[1] = parentStoryProjectRowByStoryProject_AdaptItConfigurations[4];
                }
                rowAdaptItConfigurationsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAdaptItConfigurationsRow);
                return rowAdaptItConfigurationsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AdaptItConfigurationsDataTable cln = ((AdaptItConfigurationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AdaptItConfigurationsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAdaptItConfigurations_Id = base.Columns["AdaptItConfigurations_Id"];
                this.columnStoryProject_Id = base.Columns["StoryProject_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAdaptItConfigurations_Id = new global::System.Data.DataColumn("AdaptItConfigurations_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAdaptItConfigurations_Id);
                this.columnStoryProject_Id = new global::System.Data.DataColumn("StoryProject_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStoryProject_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAdaptItConfigurations_Id}, true));
                this.columnAdaptItConfigurations_Id.AutoIncrement = true;
                this.columnAdaptItConfigurations_Id.AllowDBNull = false;
                this.columnAdaptItConfigurations_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationsRow NewAdaptItConfigurationsRow() {
                return ((AdaptItConfigurationsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AdaptItConfigurationsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AdaptItConfigurationsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdaptItConfigurationsRowChanged != null)) {
                    this.AdaptItConfigurationsRowChanged(this, new AdaptItConfigurationsRowChangeEvent(((AdaptItConfigurationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdaptItConfigurationsRowChanging != null)) {
                    this.AdaptItConfigurationsRowChanging(this, new AdaptItConfigurationsRowChangeEvent(((AdaptItConfigurationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdaptItConfigurationsRowDeleted != null)) {
                    this.AdaptItConfigurationsRowDeleted(this, new AdaptItConfigurationsRowChangeEvent(((AdaptItConfigurationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdaptItConfigurationsRowDeleting != null)) {
                    this.AdaptItConfigurationsRowDeleting(this, new AdaptItConfigurationsRowChangeEvent(((AdaptItConfigurationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAdaptItConfigurationsRow(AdaptItConfigurationsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdaptItConfigurationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdaptItConfigurationDataTable : global::System.Data.TypedTableBase<AdaptItConfigurationRow> {
            
            private global::System.Data.DataColumn columnProjectType;
            
            private global::System.Data.DataColumn columnBtDirection;
            
            private global::System.Data.DataColumn columnConverterName;
            
            private global::System.Data.DataColumn columnProjectFolderName;
            
            private global::System.Data.DataColumn columnRepoProjectName;
            
            private global::System.Data.DataColumn columnRepositoryServer;
            
            private global::System.Data.DataColumn columnNetworkRepositoryPath;
            
            private global::System.Data.DataColumn columnAdaptItConfiguration_text;
            
            private global::System.Data.DataColumn columnAdaptItConfigurations_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationDataTable() {
                this.TableName = "AdaptItConfiguration";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdaptItConfigurationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AdaptItConfigurationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTypeColumn {
                get {
                    return this.columnProjectType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BtDirectionColumn {
                get {
                    return this.columnBtDirection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConverterNameColumn {
                get {
                    return this.columnConverterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectFolderNameColumn {
                get {
                    return this.columnProjectFolderName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RepoProjectNameColumn {
                get {
                    return this.columnRepoProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RepositoryServerColumn {
                get {
                    return this.columnRepositoryServer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetworkRepositoryPathColumn {
                get {
                    return this.columnNetworkRepositoryPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdaptItConfiguration_textColumn {
                get {
                    return this.columnAdaptItConfiguration_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdaptItConfigurations_IdColumn {
                get {
                    return this.columnAdaptItConfigurations_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationRow this[int index] {
                get {
                    return ((AdaptItConfigurationRow)(this.Rows[index]));
                }
            }
            
            public event AdaptItConfigurationRowChangeEventHandler AdaptItConfigurationRowChanging;
            
            public event AdaptItConfigurationRowChangeEventHandler AdaptItConfigurationRowChanged;
            
            public event AdaptItConfigurationRowChangeEventHandler AdaptItConfigurationRowDeleting;
            
            public event AdaptItConfigurationRowChangeEventHandler AdaptItConfigurationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAdaptItConfigurationRow(AdaptItConfigurationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationRow AddAdaptItConfigurationRow(string ProjectType, string BtDirection, string ConverterName, string ProjectFolderName, string RepoProjectName, string RepositoryServer, string NetworkRepositoryPath, string AdaptItConfiguration_text, AdaptItConfigurationsRow parentAdaptItConfigurationsRowByAdaptItConfigurations_AdaptItConfiguration) {
                AdaptItConfigurationRow rowAdaptItConfigurationRow = ((AdaptItConfigurationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectType,
                        BtDirection,
                        ConverterName,
                        ProjectFolderName,
                        RepoProjectName,
                        RepositoryServer,
                        NetworkRepositoryPath,
                        AdaptItConfiguration_text,
                        null};
                if ((parentAdaptItConfigurationsRowByAdaptItConfigurations_AdaptItConfiguration != null)) {
                    columnValuesArray[8] = parentAdaptItConfigurationsRowByAdaptItConfigurations_AdaptItConfiguration[0];
                }
                rowAdaptItConfigurationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAdaptItConfigurationRow);
                return rowAdaptItConfigurationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AdaptItConfigurationDataTable cln = ((AdaptItConfigurationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AdaptItConfigurationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectType = base.Columns["ProjectType"];
                this.columnBtDirection = base.Columns["BtDirection"];
                this.columnConverterName = base.Columns["ConverterName"];
                this.columnProjectFolderName = base.Columns["ProjectFolderName"];
                this.columnRepoProjectName = base.Columns["RepoProjectName"];
                this.columnRepositoryServer = base.Columns["RepositoryServer"];
                this.columnNetworkRepositoryPath = base.Columns["NetworkRepositoryPath"];
                this.columnAdaptItConfiguration_text = base.Columns["AdaptItConfiguration_text"];
                this.columnAdaptItConfigurations_Id = base.Columns["AdaptItConfigurations_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectType = new global::System.Data.DataColumn("ProjectType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProjectType);
                this.columnBtDirection = new global::System.Data.DataColumn("BtDirection", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBtDirection);
                this.columnConverterName = new global::System.Data.DataColumn("ConverterName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnConverterName);
                this.columnProjectFolderName = new global::System.Data.DataColumn("ProjectFolderName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProjectFolderName);
                this.columnRepoProjectName = new global::System.Data.DataColumn("RepoProjectName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRepoProjectName);
                this.columnRepositoryServer = new global::System.Data.DataColumn("RepositoryServer", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRepositoryServer);
                this.columnNetworkRepositoryPath = new global::System.Data.DataColumn("NetworkRepositoryPath", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNetworkRepositoryPath);
                this.columnAdaptItConfiguration_text = new global::System.Data.DataColumn("AdaptItConfiguration_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnAdaptItConfiguration_text);
                this.columnAdaptItConfigurations_Id = new global::System.Data.DataColumn("AdaptItConfigurations_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAdaptItConfigurations_Id);
                this.columnProjectType.AllowDBNull = false;
                this.columnProjectType.Namespace = "";
                this.columnBtDirection.AllowDBNull = false;
                this.columnBtDirection.Namespace = "";
                this.columnConverterName.AllowDBNull = false;
                this.columnConverterName.Namespace = "";
                this.columnProjectFolderName.Namespace = "";
                this.columnRepoProjectName.Namespace = "";
                this.columnRepositoryServer.Namespace = "";
                this.columnNetworkRepositoryPath.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationRow NewAdaptItConfigurationRow() {
                return ((AdaptItConfigurationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AdaptItConfigurationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AdaptItConfigurationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdaptItConfigurationRowChanged != null)) {
                    this.AdaptItConfigurationRowChanged(this, new AdaptItConfigurationRowChangeEvent(((AdaptItConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdaptItConfigurationRowChanging != null)) {
                    this.AdaptItConfigurationRowChanging(this, new AdaptItConfigurationRowChangeEvent(((AdaptItConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdaptItConfigurationRowDeleted != null)) {
                    this.AdaptItConfigurationRowDeleted(this, new AdaptItConfigurationRowChangeEvent(((AdaptItConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdaptItConfigurationRowDeleting != null)) {
                    this.AdaptItConfigurationRowDeleting(this, new AdaptItConfigurationRowChangeEvent(((AdaptItConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAdaptItConfigurationRow(AdaptItConfigurationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdaptItConfigurationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LnCNotesDataTable : global::System.Data.TypedTableBase<LnCNotesRow> {
            
            private global::System.Data.DataColumn columnLnCNotes_Id;
            
            private global::System.Data.DataColumn columnStoryProject_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNotesDataTable() {
                this.TableName = "LnCNotes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LnCNotesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LnCNotesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LnCNotes_IdColumn {
                get {
                    return this.columnLnCNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryProject_IdColumn {
                get {
                    return this.columnStoryProject_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNotesRow this[int index] {
                get {
                    return ((LnCNotesRow)(this.Rows[index]));
                }
            }
            
            public event LnCNotesRowChangeEventHandler LnCNotesRowChanging;
            
            public event LnCNotesRowChangeEventHandler LnCNotesRowChanged;
            
            public event LnCNotesRowChangeEventHandler LnCNotesRowDeleting;
            
            public event LnCNotesRowChangeEventHandler LnCNotesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLnCNotesRow(LnCNotesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNotesRow AddLnCNotesRow(StoryProjectRow parentStoryProjectRowByStoryProject_LnCNotes) {
                LnCNotesRow rowLnCNotesRow = ((LnCNotesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentStoryProjectRowByStoryProject_LnCNotes != null)) {
                    columnValuesArray[1] = parentStoryProjectRowByStoryProject_LnCNotes[4];
                }
                rowLnCNotesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLnCNotesRow);
                return rowLnCNotesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LnCNotesDataTable cln = ((LnCNotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LnCNotesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLnCNotes_Id = base.Columns["LnCNotes_Id"];
                this.columnStoryProject_Id = base.Columns["StoryProject_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLnCNotes_Id = new global::System.Data.DataColumn("LnCNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLnCNotes_Id);
                this.columnStoryProject_Id = new global::System.Data.DataColumn("StoryProject_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStoryProject_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLnCNotes_Id}, true));
                this.columnLnCNotes_Id.AutoIncrement = true;
                this.columnLnCNotes_Id.AllowDBNull = false;
                this.columnLnCNotes_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNotesRow NewLnCNotesRow() {
                return ((LnCNotesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LnCNotesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LnCNotesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LnCNotesRowChanged != null)) {
                    this.LnCNotesRowChanged(this, new LnCNotesRowChangeEvent(((LnCNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LnCNotesRowChanging != null)) {
                    this.LnCNotesRowChanging(this, new LnCNotesRowChangeEvent(((LnCNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LnCNotesRowDeleted != null)) {
                    this.LnCNotesRowDeleted(this, new LnCNotesRowChangeEvent(((LnCNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LnCNotesRowDeleting != null)) {
                    this.LnCNotesRowDeleting(this, new LnCNotesRowChangeEvent(((LnCNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLnCNotesRow(LnCNotesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LnCNotesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LnCNoteDataTable : global::System.Data.TypedTableBase<LnCNoteRow> {
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnVernacularRendering;
            
            private global::System.Data.DataColumn columnNationalBTRendering;
            
            private global::System.Data.DataColumn columnInternationalBTRendering;
            
            private global::System.Data.DataColumn columnKeyTermIds;
            
            private global::System.Data.DataColumn columnLnCNote_text;
            
            private global::System.Data.DataColumn columnLnCNotes_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNoteDataTable() {
                this.TableName = "LnCNote";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LnCNoteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LnCNoteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VernacularRenderingColumn {
                get {
                    return this.columnVernacularRendering;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NationalBTRenderingColumn {
                get {
                    return this.columnNationalBTRendering;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InternationalBTRenderingColumn {
                get {
                    return this.columnInternationalBTRendering;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyTermIdsColumn {
                get {
                    return this.columnKeyTermIds;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LnCNote_textColumn {
                get {
                    return this.columnLnCNote_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LnCNotes_IdColumn {
                get {
                    return this.columnLnCNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNoteRow this[int index] {
                get {
                    return ((LnCNoteRow)(this.Rows[index]));
                }
            }
            
            public event LnCNoteRowChangeEventHandler LnCNoteRowChanging;
            
            public event LnCNoteRowChangeEventHandler LnCNoteRowChanged;
            
            public event LnCNoteRowChangeEventHandler LnCNoteRowDeleting;
            
            public event LnCNoteRowChangeEventHandler LnCNoteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLnCNoteRow(LnCNoteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNoteRow AddLnCNoteRow(string guid, string VernacularRendering, string NationalBTRendering, string InternationalBTRendering, string KeyTermIds, string LnCNote_text, LnCNotesRow parentLnCNotesRowByLnCNotes_LnCNote) {
                LnCNoteRow rowLnCNoteRow = ((LnCNoteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        guid,
                        VernacularRendering,
                        NationalBTRendering,
                        InternationalBTRendering,
                        KeyTermIds,
                        LnCNote_text,
                        null};
                if ((parentLnCNotesRowByLnCNotes_LnCNote != null)) {
                    columnValuesArray[6] = parentLnCNotesRowByLnCNotes_LnCNote[0];
                }
                rowLnCNoteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLnCNoteRow);
                return rowLnCNoteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LnCNoteDataTable cln = ((LnCNoteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LnCNoteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnguid = base.Columns["guid"];
                this.columnVernacularRendering = base.Columns["VernacularRendering"];
                this.columnNationalBTRendering = base.Columns["NationalBTRendering"];
                this.columnInternationalBTRendering = base.Columns["InternationalBTRendering"];
                this.columnKeyTermIds = base.Columns["KeyTermIds"];
                this.columnLnCNote_text = base.Columns["LnCNote_text"];
                this.columnLnCNotes_Id = base.Columns["LnCNotes_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnVernacularRendering = new global::System.Data.DataColumn("VernacularRendering", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVernacularRendering);
                this.columnNationalBTRendering = new global::System.Data.DataColumn("NationalBTRendering", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNationalBTRendering);
                this.columnInternationalBTRendering = new global::System.Data.DataColumn("InternationalBTRendering", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnInternationalBTRendering);
                this.columnKeyTermIds = new global::System.Data.DataColumn("KeyTermIds", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyTermIds);
                this.columnLnCNote_text = new global::System.Data.DataColumn("LnCNote_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnLnCNote_text);
                this.columnLnCNotes_Id = new global::System.Data.DataColumn("LnCNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLnCNotes_Id);
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnVernacularRendering.Namespace = "";
                this.columnNationalBTRendering.Namespace = "";
                this.columnInternationalBTRendering.Namespace = "";
                this.columnKeyTermIds.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNoteRow NewLnCNoteRow() {
                return ((LnCNoteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LnCNoteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LnCNoteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LnCNoteRowChanged != null)) {
                    this.LnCNoteRowChanged(this, new LnCNoteRowChangeEvent(((LnCNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LnCNoteRowChanging != null)) {
                    this.LnCNoteRowChanging(this, new LnCNoteRowChangeEvent(((LnCNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LnCNoteRowDeleted != null)) {
                    this.LnCNoteRowDeleted(this, new LnCNoteRowChangeEvent(((LnCNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LnCNoteRowDeleting != null)) {
                    this.LnCNoteRowDeleting(this, new LnCNoteRowChangeEvent(((LnCNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLnCNoteRow(LnCNoteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LnCNoteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class storiesDataTable : global::System.Data.TypedTableBase<storiesRow> {
            
            private global::System.Data.DataColumn columnSetName;
            
            private global::System.Data.DataColumn columnstories_Id;
            
            private global::System.Data.DataColumn columnStoryProject_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesDataTable() {
                this.TableName = "stories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected storiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetNameColumn {
                get {
                    return this.columnSetName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stories_IdColumn {
                get {
                    return this.columnstories_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryProject_IdColumn {
                get {
                    return this.columnStoryProject_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow this[int index] {
                get {
                    return ((storiesRow)(this.Rows[index]));
                }
            }
            
            public event storiesRowChangeEventHandler storiesRowChanging;
            
            public event storiesRowChangeEventHandler storiesRowChanged;
            
            public event storiesRowChangeEventHandler storiesRowDeleting;
            
            public event storiesRowChangeEventHandler storiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstoriesRow(storiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow AddstoriesRow(string SetName, StoryProjectRow parentStoryProjectRowByStoryProject_stories) {
                storiesRow rowstoriesRow = ((storiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SetName,
                        null,
                        null};
                if ((parentStoryProjectRowByStoryProject_stories != null)) {
                    columnValuesArray[2] = parentStoryProjectRowByStoryProject_stories[4];
                }
                rowstoriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowstoriesRow);
                return rowstoriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                storiesDataTable cln = ((storiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new storiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSetName = base.Columns["SetName"];
                this.columnstories_Id = base.Columns["stories_Id"];
                this.columnStoryProject_Id = base.Columns["StoryProject_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSetName = new global::System.Data.DataColumn("SetName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSetName);
                this.columnstories_Id = new global::System.Data.DataColumn("stories_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstories_Id);
                this.columnStoryProject_Id = new global::System.Data.DataColumn("StoryProject_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStoryProject_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstories_Id}, true));
                this.columnSetName.AllowDBNull = false;
                this.columnSetName.Namespace = "";
                this.columnstories_Id.AutoIncrement = true;
                this.columnstories_Id.AllowDBNull = false;
                this.columnstories_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow NewstoriesRow() {
                return ((storiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new storiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(storiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.storiesRowChanged != null)) {
                    this.storiesRowChanged(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.storiesRowChanging != null)) {
                    this.storiesRowChanging(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.storiesRowDeleted != null)) {
                    this.storiesRowDeleted(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.storiesRowDeleting != null)) {
                    this.storiesRowDeleting(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestoriesRow(storiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "storiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class storyDataTable : global::System.Data.TypedTableBase<storyRow> {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnstage;
            
            private global::System.Data.DataColumn columnTasksAllowedPf;
            
            private global::System.Data.DataColumn columnTasksRequiredPf;
            
            private global::System.Data.DataColumn columnTasksAllowedCit;
            
            private global::System.Data.DataColumn columnTasksRequiredCit;
            
            private global::System.Data.DataColumn columnCountRetellingsTests;
            
            private global::System.Data.DataColumn columnCountTestingQuestionTests;
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnstageDateTimeStamp;
            
            private global::System.Data.DataColumn columnstory_Id;
            
            private global::System.Data.DataColumn columnstories_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyDataTable() {
                this.TableName = "story";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected storyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stageColumn {
                get {
                    return this.columnstage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TasksAllowedPfColumn {
                get {
                    return this.columnTasksAllowedPf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TasksRequiredPfColumn {
                get {
                    return this.columnTasksRequiredPf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TasksAllowedCitColumn {
                get {
                    return this.columnTasksAllowedCit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TasksRequiredCitColumn {
                get {
                    return this.columnTasksRequiredCit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountRetellingsTestsColumn {
                get {
                    return this.columnCountRetellingsTests;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountTestingQuestionTestsColumn {
                get {
                    return this.columnCountTestingQuestionTests;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stageDateTimeStampColumn {
                get {
                    return this.columnstageDateTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn story_IdColumn {
                get {
                    return this.columnstory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stories_IdColumn {
                get {
                    return this.columnstories_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow this[int index] {
                get {
                    return ((storyRow)(this.Rows[index]));
                }
            }
            
            public event storyRowChangeEventHandler storyRowChanging;
            
            public event storyRowChangeEventHandler storyRowChanged;
            
            public event storyRowChangeEventHandler storyRowDeleting;
            
            public event storyRowChangeEventHandler storyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstoryRow(storyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow AddstoryRow(string name, string stage, string TasksAllowedPf, string TasksRequiredPf, string TasksAllowedCit, string TasksRequiredCit, int CountRetellingsTests, int CountTestingQuestionTests, string guid, System.DateTime stageDateTimeStamp, storiesRow parentstoriesRowBystories_story) {
                storyRow rowstoryRow = ((storyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        stage,
                        TasksAllowedPf,
                        TasksRequiredPf,
                        TasksAllowedCit,
                        TasksRequiredCit,
                        CountRetellingsTests,
                        CountTestingQuestionTests,
                        guid,
                        stageDateTimeStamp,
                        null,
                        null};
                if ((parentstoriesRowBystories_story != null)) {
                    columnValuesArray[11] = parentstoriesRowBystories_story[1];
                }
                rowstoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowstoryRow);
                return rowstoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                storyDataTable cln = ((storyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new storyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnstage = base.Columns["stage"];
                this.columnTasksAllowedPf = base.Columns["TasksAllowedPf"];
                this.columnTasksRequiredPf = base.Columns["TasksRequiredPf"];
                this.columnTasksAllowedCit = base.Columns["TasksAllowedCit"];
                this.columnTasksRequiredCit = base.Columns["TasksRequiredCit"];
                this.columnCountRetellingsTests = base.Columns["CountRetellingsTests"];
                this.columnCountTestingQuestionTests = base.Columns["CountTestingQuestionTests"];
                this.columnguid = base.Columns["guid"];
                this.columnstageDateTimeStamp = base.Columns["stageDateTimeStamp"];
                this.columnstory_Id = base.Columns["story_Id"];
                this.columnstories_Id = base.Columns["stories_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnstage = new global::System.Data.DataColumn("stage", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstage);
                this.columnTasksAllowedPf = new global::System.Data.DataColumn("TasksAllowedPf", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTasksAllowedPf);
                this.columnTasksRequiredPf = new global::System.Data.DataColumn("TasksRequiredPf", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTasksRequiredPf);
                this.columnTasksAllowedCit = new global::System.Data.DataColumn("TasksAllowedCit", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTasksAllowedCit);
                this.columnTasksRequiredCit = new global::System.Data.DataColumn("TasksRequiredCit", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTasksRequiredCit);
                this.columnCountRetellingsTests = new global::System.Data.DataColumn("CountRetellingsTests", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCountRetellingsTests);
                this.columnCountTestingQuestionTests = new global::System.Data.DataColumn("CountTestingQuestionTests", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCountTestingQuestionTests);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnstageDateTimeStamp = new global::System.Data.DataColumn("stageDateTimeStamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstageDateTimeStamp);
                this.columnstory_Id = new global::System.Data.DataColumn("story_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstory_Id);
                this.columnstories_Id = new global::System.Data.DataColumn("stories_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstories_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstory_Id}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnstage.AllowDBNull = false;
                this.columnstage.Namespace = "";
                this.columnTasksAllowedPf.Namespace = "";
                this.columnTasksRequiredPf.Namespace = "";
                this.columnTasksAllowedCit.Namespace = "";
                this.columnTasksRequiredCit.Namespace = "";
                this.columnCountRetellingsTests.Namespace = "";
                this.columnCountRetellingsTests.DefaultValue = ((int)(0));
                this.columnCountTestingQuestionTests.Namespace = "";
                this.columnCountTestingQuestionTests.DefaultValue = ((int)(0));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnstageDateTimeStamp.Namespace = "";
                this.columnstory_Id.AutoIncrement = true;
                this.columnstory_Id.AllowDBNull = false;
                this.columnstory_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow NewstoryRow() {
                return ((storyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new storyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(storyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.storyRowChanged != null)) {
                    this.storyRowChanged(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.storyRowChanging != null)) {
                    this.storyRowChanging(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.storyRowDeleted != null)) {
                    this.storyRowDeleted(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.storyRowDeleting != null)) {
                    this.storyRowDeleting(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestoryRow(storyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "storyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CraftingInfoDataTable : global::System.Data.TypedTableBase<CraftingInfoRow> {
            
            private global::System.Data.DataColumn columnNonBiblicalStory;
            
            private global::System.Data.DataColumn columnStoryPurpose;
            
            private global::System.Data.DataColumn columnResourcesUsed;
            
            private global::System.Data.DataColumn columnMiscellaneousStoryInfo;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            private global::System.Data.DataColumn columnstory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoDataTable() {
                this.TableName = "CraftingInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CraftingInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CraftingInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NonBiblicalStoryColumn {
                get {
                    return this.columnNonBiblicalStory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryPurposeColumn {
                get {
                    return this.columnStoryPurpose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResourcesUsedColumn {
                get {
                    return this.columnResourcesUsed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiscellaneousStoryInfoColumn {
                get {
                    return this.columnMiscellaneousStoryInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn story_IdColumn {
                get {
                    return this.columnstory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow this[int index] {
                get {
                    return ((CraftingInfoRow)(this.Rows[index]));
                }
            }
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowChanging;
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowChanged;
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowDeleting;
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCraftingInfoRow(CraftingInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow AddCraftingInfoRow(bool NonBiblicalStory, string StoryPurpose, string ResourcesUsed, string MiscellaneousStoryInfo, storyRow parentstoryRowBystory_CraftingInfo) {
                CraftingInfoRow rowCraftingInfoRow = ((CraftingInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NonBiblicalStory,
                        StoryPurpose,
                        ResourcesUsed,
                        MiscellaneousStoryInfo,
                        null,
                        null};
                if ((parentstoryRowBystory_CraftingInfo != null)) {
                    columnValuesArray[5] = parentstoryRowBystory_CraftingInfo[10];
                }
                rowCraftingInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCraftingInfoRow);
                return rowCraftingInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CraftingInfoDataTable cln = ((CraftingInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CraftingInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNonBiblicalStory = base.Columns["NonBiblicalStory"];
                this.columnStoryPurpose = base.Columns["StoryPurpose"];
                this.columnResourcesUsed = base.Columns["ResourcesUsed"];
                this.columnMiscellaneousStoryInfo = base.Columns["MiscellaneousStoryInfo"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
                this.columnstory_Id = base.Columns["story_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNonBiblicalStory = new global::System.Data.DataColumn("NonBiblicalStory", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNonBiblicalStory);
                this.columnStoryPurpose = new global::System.Data.DataColumn("StoryPurpose", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoryPurpose);
                this.columnResourcesUsed = new global::System.Data.DataColumn("ResourcesUsed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResourcesUsed);
                this.columnMiscellaneousStoryInfo = new global::System.Data.DataColumn("MiscellaneousStoryInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiscellaneousStoryInfo);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnstory_Id = new global::System.Data.DataColumn("story_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstory_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCraftingInfo_Id}, true));
                this.columnNonBiblicalStory.Namespace = "";
                this.columnCraftingInfo_Id.AutoIncrement = true;
                this.columnCraftingInfo_Id.AllowDBNull = false;
                this.columnCraftingInfo_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow NewCraftingInfoRow() {
                return ((CraftingInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CraftingInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CraftingInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CraftingInfoRowChanged != null)) {
                    this.CraftingInfoRowChanged(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CraftingInfoRowChanging != null)) {
                    this.CraftingInfoRowChanging(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CraftingInfoRowDeleted != null)) {
                    this.CraftingInfoRowDeleted(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CraftingInfoRowDeleting != null)) {
                    this.CraftingInfoRowDeleting(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCraftingInfoRow(CraftingInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CraftingInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StoryCrafterDataTable : global::System.Data.TypedTableBase<StoryCrafterRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnStoryCrafter_text;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterDataTable() {
                this.TableName = "StoryCrafter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryCrafterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StoryCrafterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryCrafter_textColumn {
                get {
                    return this.columnStoryCrafter_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow this[int index] {
                get {
                    return ((StoryCrafterRow)(this.Rows[index]));
                }
            }
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowChanging;
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowChanged;
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowDeleting;
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStoryCrafterRow(StoryCrafterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow AddStoryCrafterRow(string memberID, string StoryCrafter_text, CraftingInfoRow parentCraftingInfoRowByCraftingInfo_StoryCrafter) {
                StoryCrafterRow rowStoryCrafterRow = ((StoryCrafterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        StoryCrafter_text,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_StoryCrafter != null)) {
                    columnValuesArray[2] = parentCraftingInfoRowByCraftingInfo_StoryCrafter[4];
                }
                rowStoryCrafterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStoryCrafterRow);
                return rowStoryCrafterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StoryCrafterDataTable cln = ((StoryCrafterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StoryCrafterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnStoryCrafter_text = base.Columns["StoryCrafter_text"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnStoryCrafter_text = new global::System.Data.DataColumn("StoryCrafter_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnStoryCrafter_text);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnmemberID.AllowDBNull = false;
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow NewStoryCrafterRow() {
                return ((StoryCrafterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StoryCrafterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StoryCrafterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoryCrafterRowChanged != null)) {
                    this.StoryCrafterRowChanged(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoryCrafterRowChanging != null)) {
                    this.StoryCrafterRowChanging(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoryCrafterRowDeleted != null)) {
                    this.StoryCrafterRowDeleted(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoryCrafterRowDeleting != null)) {
                    this.StoryCrafterRowDeleting(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStoryCrafterRow(StoryCrafterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StoryCrafterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectFacilitatorDataTable : global::System.Data.TypedTableBase<ProjectFacilitatorRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnProjectFacilitator_text;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectFacilitatorDataTable() {
                this.TableName = "ProjectFacilitator";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectFacilitatorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectFacilitatorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectFacilitator_textColumn {
                get {
                    return this.columnProjectFacilitator_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectFacilitatorRow this[int index] {
                get {
                    return ((ProjectFacilitatorRow)(this.Rows[index]));
                }
            }
            
            public event ProjectFacilitatorRowChangeEventHandler ProjectFacilitatorRowChanging;
            
            public event ProjectFacilitatorRowChangeEventHandler ProjectFacilitatorRowChanged;
            
            public event ProjectFacilitatorRowChangeEventHandler ProjectFacilitatorRowDeleting;
            
            public event ProjectFacilitatorRowChangeEventHandler ProjectFacilitatorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectFacilitatorRow(ProjectFacilitatorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectFacilitatorRow AddProjectFacilitatorRow(string memberID, string ProjectFacilitator_text, CraftingInfoRow parentCraftingInfoRowByCraftingInfo_ProjectFacilitator) {
                ProjectFacilitatorRow rowProjectFacilitatorRow = ((ProjectFacilitatorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        ProjectFacilitator_text,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_ProjectFacilitator != null)) {
                    columnValuesArray[2] = parentCraftingInfoRowByCraftingInfo_ProjectFacilitator[4];
                }
                rowProjectFacilitatorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectFacilitatorRow);
                return rowProjectFacilitatorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectFacilitatorDataTable cln = ((ProjectFacilitatorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectFacilitatorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnProjectFacilitator_text = base.Columns["ProjectFacilitator_text"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnProjectFacilitator_text = new global::System.Data.DataColumn("ProjectFacilitator_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnProjectFacilitator_text);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnmemberID.AllowDBNull = false;
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectFacilitatorRow NewProjectFacilitatorRow() {
                return ((ProjectFacilitatorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectFacilitatorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectFacilitatorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectFacilitatorRowChanged != null)) {
                    this.ProjectFacilitatorRowChanged(this, new ProjectFacilitatorRowChangeEvent(((ProjectFacilitatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectFacilitatorRowChanging != null)) {
                    this.ProjectFacilitatorRowChanging(this, new ProjectFacilitatorRowChangeEvent(((ProjectFacilitatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectFacilitatorRowDeleted != null)) {
                    this.ProjectFacilitatorRowDeleted(this, new ProjectFacilitatorRowChangeEvent(((ProjectFacilitatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectFacilitatorRowDeleting != null)) {
                    this.ProjectFacilitatorRowDeleting(this, new ProjectFacilitatorRowChangeEvent(((ProjectFacilitatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectFacilitatorRow(ProjectFacilitatorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectFacilitatorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantDataTable : global::System.Data.TypedTableBase<ConsultantRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnConsultant_text;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantDataTable() {
                this.TableName = "Consultant";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsultantDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Consultant_textColumn {
                get {
                    return this.columnConsultant_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow this[int index] {
                get {
                    return ((ConsultantRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantRowChangeEventHandler ConsultantRowChanging;
            
            public event ConsultantRowChangeEventHandler ConsultantRowChanged;
            
            public event ConsultantRowChangeEventHandler ConsultantRowDeleting;
            
            public event ConsultantRowChangeEventHandler ConsultantRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantRow(ConsultantRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow AddConsultantRow(string memberID, string Consultant_text, CraftingInfoRow parentCraftingInfoRowByCraftingInfo_Consultant) {
                ConsultantRow rowConsultantRow = ((ConsultantRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        Consultant_text,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_Consultant != null)) {
                    columnValuesArray[2] = parentCraftingInfoRowByCraftingInfo_Consultant[4];
                }
                rowConsultantRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantRow);
                return rowConsultantRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantDataTable cln = ((ConsultantDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnConsultant_text = base.Columns["Consultant_text"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnConsultant_text = new global::System.Data.DataColumn("Consultant_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnConsultant_text);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnmemberID.AllowDBNull = false;
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow NewConsultantRow() {
                return ((ConsultantRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantRowChanged != null)) {
                    this.ConsultantRowChanged(this, new ConsultantRowChangeEvent(((ConsultantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantRowChanging != null)) {
                    this.ConsultantRowChanging(this, new ConsultantRowChangeEvent(((ConsultantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantRowDeleted != null)) {
                    this.ConsultantRowDeleted(this, new ConsultantRowChangeEvent(((ConsultantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantRowDeleting != null)) {
                    this.ConsultantRowDeleting(this, new ConsultantRowChangeEvent(((ConsultantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantRow(ConsultantRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoachDataTable : global::System.Data.TypedTableBase<CoachRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnCoach_text;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachDataTable() {
                this.TableName = "Coach";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoachDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Coach_textColumn {
                get {
                    return this.columnCoach_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachRow this[int index] {
                get {
                    return ((CoachRow)(this.Rows[index]));
                }
            }
            
            public event CoachRowChangeEventHandler CoachRowChanging;
            
            public event CoachRowChangeEventHandler CoachRowChanged;
            
            public event CoachRowChangeEventHandler CoachRowDeleting;
            
            public event CoachRowChangeEventHandler CoachRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoachRow(CoachRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachRow AddCoachRow(string memberID, string Coach_text, CraftingInfoRow parentCraftingInfoRowByCraftingInfo_Coach) {
                CoachRow rowCoachRow = ((CoachRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        Coach_text,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_Coach != null)) {
                    columnValuesArray[2] = parentCraftingInfoRowByCraftingInfo_Coach[4];
                }
                rowCoachRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoachRow);
                return rowCoachRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoachDataTable cln = ((CoachDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoachDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnCoach_text = base.Columns["Coach_text"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnCoach_text = new global::System.Data.DataColumn("Coach_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnCoach_text);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnmemberID.AllowDBNull = false;
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachRow NewCoachRow() {
                return ((CoachRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoachRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoachRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoachRowChanged != null)) {
                    this.CoachRowChanged(this, new CoachRowChangeEvent(((CoachRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoachRowChanging != null)) {
                    this.CoachRowChanging(this, new CoachRowChangeEvent(((CoachRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoachRowDeleted != null)) {
                    this.CoachRowDeleted(this, new CoachRowChangeEvent(((CoachRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoachRowDeleting != null)) {
                    this.CoachRowDeleting(this, new CoachRowChangeEvent(((CoachRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoachRow(CoachRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoachDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BackTranslatorDataTable : global::System.Data.TypedTableBase<BackTranslatorRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnBackTranslator_text;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorDataTable() {
                this.TableName = "BackTranslator";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BackTranslatorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BackTranslatorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackTranslator_textColumn {
                get {
                    return this.columnBackTranslator_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow this[int index] {
                get {
                    return ((BackTranslatorRow)(this.Rows[index]));
                }
            }
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowChanging;
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowChanged;
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowDeleting;
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBackTranslatorRow(BackTranslatorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow AddBackTranslatorRow(string memberID, string BackTranslator_text, CraftingInfoRow parentCraftingInfoRowByCraftingInfo_BackTranslator) {
                BackTranslatorRow rowBackTranslatorRow = ((BackTranslatorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        BackTranslator_text,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_BackTranslator != null)) {
                    columnValuesArray[2] = parentCraftingInfoRowByCraftingInfo_BackTranslator[4];
                }
                rowBackTranslatorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBackTranslatorRow);
                return rowBackTranslatorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BackTranslatorDataTable cln = ((BackTranslatorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BackTranslatorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnBackTranslator_text = base.Columns["BackTranslator_text"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnBackTranslator_text = new global::System.Data.DataColumn("BackTranslator_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnBackTranslator_text);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnmemberID.AllowDBNull = false;
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow NewBackTranslatorRow() {
                return ((BackTranslatorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BackTranslatorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BackTranslatorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BackTranslatorRowChanged != null)) {
                    this.BackTranslatorRowChanged(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BackTranslatorRowChanging != null)) {
                    this.BackTranslatorRowChanging(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BackTranslatorRowDeleted != null)) {
                    this.BackTranslatorRowDeleted(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BackTranslatorRowDeleting != null)) {
                    this.BackTranslatorRowDeleting(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBackTranslatorRow(BackTranslatorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BackTranslatorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OutsideEnglishBackTranslatorDataTable : global::System.Data.TypedTableBase<OutsideEnglishBackTranslatorRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnOutsideEnglishBackTranslator_text;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutsideEnglishBackTranslatorDataTable() {
                this.TableName = "OutsideEnglishBackTranslator";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutsideEnglishBackTranslatorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OutsideEnglishBackTranslatorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutsideEnglishBackTranslator_textColumn {
                get {
                    return this.columnOutsideEnglishBackTranslator_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutsideEnglishBackTranslatorRow this[int index] {
                get {
                    return ((OutsideEnglishBackTranslatorRow)(this.Rows[index]));
                }
            }
            
            public event OutsideEnglishBackTranslatorRowChangeEventHandler OutsideEnglishBackTranslatorRowChanging;
            
            public event OutsideEnglishBackTranslatorRowChangeEventHandler OutsideEnglishBackTranslatorRowChanged;
            
            public event OutsideEnglishBackTranslatorRowChangeEventHandler OutsideEnglishBackTranslatorRowDeleting;
            
            public event OutsideEnglishBackTranslatorRowChangeEventHandler OutsideEnglishBackTranslatorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOutsideEnglishBackTranslatorRow(OutsideEnglishBackTranslatorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutsideEnglishBackTranslatorRow AddOutsideEnglishBackTranslatorRow(string memberID, string OutsideEnglishBackTranslator_text, CraftingInfoRow parentCraftingInfoRowByCraftingInfo_OutsideEnglishBackTranslator) {
                OutsideEnglishBackTranslatorRow rowOutsideEnglishBackTranslatorRow = ((OutsideEnglishBackTranslatorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        OutsideEnglishBackTranslator_text,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_OutsideEnglishBackTranslator != null)) {
                    columnValuesArray[2] = parentCraftingInfoRowByCraftingInfo_OutsideEnglishBackTranslator[4];
                }
                rowOutsideEnglishBackTranslatorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOutsideEnglishBackTranslatorRow);
                return rowOutsideEnglishBackTranslatorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OutsideEnglishBackTranslatorDataTable cln = ((OutsideEnglishBackTranslatorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OutsideEnglishBackTranslatorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnOutsideEnglishBackTranslator_text = base.Columns["OutsideEnglishBackTranslator_text"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnOutsideEnglishBackTranslator_text = new global::System.Data.DataColumn("OutsideEnglishBackTranslator_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnOutsideEnglishBackTranslator_text);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnmemberID.AllowDBNull = false;
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutsideEnglishBackTranslatorRow NewOutsideEnglishBackTranslatorRow() {
                return ((OutsideEnglishBackTranslatorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OutsideEnglishBackTranslatorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OutsideEnglishBackTranslatorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OutsideEnglishBackTranslatorRowChanged != null)) {
                    this.OutsideEnglishBackTranslatorRowChanged(this, new OutsideEnglishBackTranslatorRowChangeEvent(((OutsideEnglishBackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OutsideEnglishBackTranslatorRowChanging != null)) {
                    this.OutsideEnglishBackTranslatorRowChanging(this, new OutsideEnglishBackTranslatorRowChangeEvent(((OutsideEnglishBackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OutsideEnglishBackTranslatorRowDeleted != null)) {
                    this.OutsideEnglishBackTranslatorRowDeleted(this, new OutsideEnglishBackTranslatorRowChangeEvent(((OutsideEnglishBackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OutsideEnglishBackTranslatorRowDeleting != null)) {
                    this.OutsideEnglishBackTranslatorRowDeleting(this, new OutsideEnglishBackTranslatorRowChangeEvent(((OutsideEnglishBackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOutsideEnglishBackTranslatorRow(OutsideEnglishBackTranslatorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OutsideEnglishBackTranslatorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestsRetellingsDataTable : global::System.Data.TypedTableBase<TestsRetellingsRow> {
            
            private global::System.Data.DataColumn columnTestsRetellings_Id;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRetellingsDataTable() {
                this.TableName = "TestsRetellings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsRetellingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestsRetellingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestsRetellings_IdColumn {
                get {
                    return this.columnTestsRetellings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRetellingsRow this[int index] {
                get {
                    return ((TestsRetellingsRow)(this.Rows[index]));
                }
            }
            
            public event TestsRetellingsRowChangeEventHandler TestsRetellingsRowChanging;
            
            public event TestsRetellingsRowChangeEventHandler TestsRetellingsRowChanged;
            
            public event TestsRetellingsRowChangeEventHandler TestsRetellingsRowDeleting;
            
            public event TestsRetellingsRowChangeEventHandler TestsRetellingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestsRetellingsRow(TestsRetellingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRetellingsRow AddTestsRetellingsRow(CraftingInfoRow parentCraftingInfoRowByCraftingInfo_TestsRetellings) {
                TestsRetellingsRow rowTestsRetellingsRow = ((TestsRetellingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_TestsRetellings != null)) {
                    columnValuesArray[1] = parentCraftingInfoRowByCraftingInfo_TestsRetellings[4];
                }
                rowTestsRetellingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestsRetellingsRow);
                return rowTestsRetellingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestsRetellingsDataTable cln = ((TestsRetellingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestsRetellingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestsRetellings_Id = base.Columns["TestsRetellings_Id"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestsRetellings_Id = new global::System.Data.DataColumn("TestsRetellings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestsRetellings_Id);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestsRetellings_Id}, true));
                this.columnTestsRetellings_Id.AutoIncrement = true;
                this.columnTestsRetellings_Id.AllowDBNull = false;
                this.columnTestsRetellings_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRetellingsRow NewTestsRetellingsRow() {
                return ((TestsRetellingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestsRetellingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestsRetellingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestsRetellingsRowChanged != null)) {
                    this.TestsRetellingsRowChanged(this, new TestsRetellingsRowChangeEvent(((TestsRetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestsRetellingsRowChanging != null)) {
                    this.TestsRetellingsRowChanging(this, new TestsRetellingsRowChangeEvent(((TestsRetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestsRetellingsRowDeleted != null)) {
                    this.TestsRetellingsRowDeleted(this, new TestsRetellingsRowChangeEvent(((TestsRetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestsRetellingsRowDeleting != null)) {
                    this.TestsRetellingsRowDeleting(this, new TestsRetellingsRowChangeEvent(((TestsRetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestsRetellingsRow(TestsRetellingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestsRetellingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestRetellingDataTable : global::System.Data.TypedTableBase<TestRetellingRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnTestRetelling_text;
            
            private global::System.Data.DataColumn columnTestsRetellings_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRetellingDataTable() {
                this.TableName = "TestRetelling";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRetellingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestRetellingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRetelling_textColumn {
                get {
                    return this.columnTestRetelling_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestsRetellings_IdColumn {
                get {
                    return this.columnTestsRetellings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRetellingRow this[int index] {
                get {
                    return ((TestRetellingRow)(this.Rows[index]));
                }
            }
            
            public event TestRetellingRowChangeEventHandler TestRetellingRowChanging;
            
            public event TestRetellingRowChangeEventHandler TestRetellingRowChanged;
            
            public event TestRetellingRowChangeEventHandler TestRetellingRowDeleting;
            
            public event TestRetellingRowChangeEventHandler TestRetellingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestRetellingRow(TestRetellingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRetellingRow AddTestRetellingRow(string memberID, string TestRetelling_text, TestsRetellingsRow parentTestsRetellingsRowByTestsRetellings_TestRetelling) {
                TestRetellingRow rowTestRetellingRow = ((TestRetellingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        TestRetelling_text,
                        null};
                if ((parentTestsRetellingsRowByTestsRetellings_TestRetelling != null)) {
                    columnValuesArray[2] = parentTestsRetellingsRowByTestsRetellings_TestRetelling[0];
                }
                rowTestRetellingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestRetellingRow);
                return rowTestRetellingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestRetellingDataTable cln = ((TestRetellingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestRetellingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnTestRetelling_text = base.Columns["TestRetelling_text"];
                this.columnTestsRetellings_Id = base.Columns["TestsRetellings_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnTestRetelling_text = new global::System.Data.DataColumn("TestRetelling_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnTestRetelling_text);
                this.columnTestsRetellings_Id = new global::System.Data.DataColumn("TestsRetellings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestsRetellings_Id);
                this.columnmemberID.AllowDBNull = false;
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRetellingRow NewTestRetellingRow() {
                return ((TestRetellingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestRetellingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestRetellingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestRetellingRowChanged != null)) {
                    this.TestRetellingRowChanged(this, new TestRetellingRowChangeEvent(((TestRetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestRetellingRowChanging != null)) {
                    this.TestRetellingRowChanging(this, new TestRetellingRowChangeEvent(((TestRetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestRetellingRowDeleted != null)) {
                    this.TestRetellingRowDeleted(this, new TestRetellingRowChangeEvent(((TestRetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestRetellingRowDeleting != null)) {
                    this.TestRetellingRowDeleting(this, new TestRetellingRowChangeEvent(((TestRetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestRetellingRow(TestRetellingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestRetellingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestsTqAnswersDataTable : global::System.Data.TypedTableBase<TestsTqAnswersRow> {
            
            private global::System.Data.DataColumn columnTestsTqAnswers_Id;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsTqAnswersDataTable() {
                this.TableName = "TestsTqAnswers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsTqAnswersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestsTqAnswersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestsTqAnswers_IdColumn {
                get {
                    return this.columnTestsTqAnswers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsTqAnswersRow this[int index] {
                get {
                    return ((TestsTqAnswersRow)(this.Rows[index]));
                }
            }
            
            public event TestsTqAnswersRowChangeEventHandler TestsTqAnswersRowChanging;
            
            public event TestsTqAnswersRowChangeEventHandler TestsTqAnswersRowChanged;
            
            public event TestsTqAnswersRowChangeEventHandler TestsTqAnswersRowDeleting;
            
            public event TestsTqAnswersRowChangeEventHandler TestsTqAnswersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestsTqAnswersRow(TestsTqAnswersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsTqAnswersRow AddTestsTqAnswersRow(CraftingInfoRow parentCraftingInfoRowByCraftingInfo_TestsTqAnswers) {
                TestsTqAnswersRow rowTestsTqAnswersRow = ((TestsTqAnswersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_TestsTqAnswers != null)) {
                    columnValuesArray[1] = parentCraftingInfoRowByCraftingInfo_TestsTqAnswers[4];
                }
                rowTestsTqAnswersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestsTqAnswersRow);
                return rowTestsTqAnswersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestsTqAnswersDataTable cln = ((TestsTqAnswersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestsTqAnswersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestsTqAnswers_Id = base.Columns["TestsTqAnswers_Id"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestsTqAnswers_Id = new global::System.Data.DataColumn("TestsTqAnswers_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestsTqAnswers_Id);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestsTqAnswers_Id}, true));
                this.columnTestsTqAnswers_Id.AutoIncrement = true;
                this.columnTestsTqAnswers_Id.AllowDBNull = false;
                this.columnTestsTqAnswers_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsTqAnswersRow NewTestsTqAnswersRow() {
                return ((TestsTqAnswersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestsTqAnswersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestsTqAnswersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestsTqAnswersRowChanged != null)) {
                    this.TestsTqAnswersRowChanged(this, new TestsTqAnswersRowChangeEvent(((TestsTqAnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestsTqAnswersRowChanging != null)) {
                    this.TestsTqAnswersRowChanging(this, new TestsTqAnswersRowChangeEvent(((TestsTqAnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestsTqAnswersRowDeleted != null)) {
                    this.TestsTqAnswersRowDeleted(this, new TestsTqAnswersRowChangeEvent(((TestsTqAnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestsTqAnswersRowDeleting != null)) {
                    this.TestsTqAnswersRowDeleting(this, new TestsTqAnswersRowChangeEvent(((TestsTqAnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestsTqAnswersRow(TestsTqAnswersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestsTqAnswersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestTqAnswerDataTable : global::System.Data.TypedTableBase<TestTqAnswerRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnTestTqAnswer_text;
            
            private global::System.Data.DataColumn columnTestsTqAnswers_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestTqAnswerDataTable() {
                this.TableName = "TestTqAnswer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestTqAnswerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestTqAnswerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestTqAnswer_textColumn {
                get {
                    return this.columnTestTqAnswer_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestsTqAnswers_IdColumn {
                get {
                    return this.columnTestsTqAnswers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestTqAnswerRow this[int index] {
                get {
                    return ((TestTqAnswerRow)(this.Rows[index]));
                }
            }
            
            public event TestTqAnswerRowChangeEventHandler TestTqAnswerRowChanging;
            
            public event TestTqAnswerRowChangeEventHandler TestTqAnswerRowChanged;
            
            public event TestTqAnswerRowChangeEventHandler TestTqAnswerRowDeleting;
            
            public event TestTqAnswerRowChangeEventHandler TestTqAnswerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestTqAnswerRow(TestTqAnswerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestTqAnswerRow AddTestTqAnswerRow(string memberID, string TestTqAnswer_text, TestsTqAnswersRow parentTestsTqAnswersRowByTestsTqAnswers_TestTqAnswer) {
                TestTqAnswerRow rowTestTqAnswerRow = ((TestTqAnswerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        TestTqAnswer_text,
                        null};
                if ((parentTestsTqAnswersRowByTestsTqAnswers_TestTqAnswer != null)) {
                    columnValuesArray[2] = parentTestsTqAnswersRowByTestsTqAnswers_TestTqAnswer[0];
                }
                rowTestTqAnswerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestTqAnswerRow);
                return rowTestTqAnswerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestTqAnswerDataTable cln = ((TestTqAnswerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestTqAnswerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnTestTqAnswer_text = base.Columns["TestTqAnswer_text"];
                this.columnTestsTqAnswers_Id = base.Columns["TestsTqAnswers_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnTestTqAnswer_text = new global::System.Data.DataColumn("TestTqAnswer_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnTestTqAnswer_text);
                this.columnTestsTqAnswers_Id = new global::System.Data.DataColumn("TestsTqAnswers_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestsTqAnswers_Id);
                this.columnmemberID.AllowDBNull = false;
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestTqAnswerRow NewTestTqAnswerRow() {
                return ((TestTqAnswerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestTqAnswerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestTqAnswerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestTqAnswerRowChanged != null)) {
                    this.TestTqAnswerRowChanged(this, new TestTqAnswerRowChangeEvent(((TestTqAnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestTqAnswerRowChanging != null)) {
                    this.TestTqAnswerRowChanging(this, new TestTqAnswerRowChangeEvent(((TestTqAnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestTqAnswerRowDeleted != null)) {
                    this.TestTqAnswerRowDeleted(this, new TestTqAnswerRowChangeEvent(((TestTqAnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestTqAnswerRowDeleting != null)) {
                    this.TestTqAnswerRowDeleting(this, new TestTqAnswerRowChangeEvent(((TestTqAnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestTqAnswerRow(TestTqAnswerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestTqAnswerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TransitionHistoryDataTable : global::System.Data.TypedTableBase<TransitionHistoryRow> {
            
            private global::System.Data.DataColumn columnTransitionHistory_Id;
            
            private global::System.Data.DataColumn columnstory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransitionHistoryDataTable() {
                this.TableName = "TransitionHistory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransitionHistoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TransitionHistoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransitionHistory_IdColumn {
                get {
                    return this.columnTransitionHistory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn story_IdColumn {
                get {
                    return this.columnstory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransitionHistoryRow this[int index] {
                get {
                    return ((TransitionHistoryRow)(this.Rows[index]));
                }
            }
            
            public event TransitionHistoryRowChangeEventHandler TransitionHistoryRowChanging;
            
            public event TransitionHistoryRowChangeEventHandler TransitionHistoryRowChanged;
            
            public event TransitionHistoryRowChangeEventHandler TransitionHistoryRowDeleting;
            
            public event TransitionHistoryRowChangeEventHandler TransitionHistoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTransitionHistoryRow(TransitionHistoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransitionHistoryRow AddTransitionHistoryRow(storyRow parentstoryRowBystory_TransitionHistory) {
                TransitionHistoryRow rowTransitionHistoryRow = ((TransitionHistoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentstoryRowBystory_TransitionHistory != null)) {
                    columnValuesArray[1] = parentstoryRowBystory_TransitionHistory[10];
                }
                rowTransitionHistoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTransitionHistoryRow);
                return rowTransitionHistoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TransitionHistoryDataTable cln = ((TransitionHistoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TransitionHistoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTransitionHistory_Id = base.Columns["TransitionHistory_Id"];
                this.columnstory_Id = base.Columns["story_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTransitionHistory_Id = new global::System.Data.DataColumn("TransitionHistory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTransitionHistory_Id);
                this.columnstory_Id = new global::System.Data.DataColumn("story_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstory_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTransitionHistory_Id}, true));
                this.columnTransitionHistory_Id.AutoIncrement = true;
                this.columnTransitionHistory_Id.AllowDBNull = false;
                this.columnTransitionHistory_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransitionHistoryRow NewTransitionHistoryRow() {
                return ((TransitionHistoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TransitionHistoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TransitionHistoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransitionHistoryRowChanged != null)) {
                    this.TransitionHistoryRowChanged(this, new TransitionHistoryRowChangeEvent(((TransitionHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransitionHistoryRowChanging != null)) {
                    this.TransitionHistoryRowChanging(this, new TransitionHistoryRowChangeEvent(((TransitionHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransitionHistoryRowDeleted != null)) {
                    this.TransitionHistoryRowDeleted(this, new TransitionHistoryRowChangeEvent(((TransitionHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransitionHistoryRowDeleting != null)) {
                    this.TransitionHistoryRowDeleting(this, new TransitionHistoryRowChangeEvent(((TransitionHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTransitionHistoryRow(TransitionHistoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TransitionHistoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StateTransitionDataTable : global::System.Data.TypedTableBase<StateTransitionRow> {
            
            private global::System.Data.DataColumn columnLoggedInMemberId;
            
            private global::System.Data.DataColumn columnWindowsUserName;
            
            private global::System.Data.DataColumn columnFromState;
            
            private global::System.Data.DataColumn columnToState;
            
            private global::System.Data.DataColumn columnTransitionDateTime;
            
            private global::System.Data.DataColumn columnTransitionHistory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateTransitionDataTable() {
                this.TableName = "StateTransition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StateTransitionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StateTransitionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoggedInMemberIdColumn {
                get {
                    return this.columnLoggedInMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WindowsUserNameColumn {
                get {
                    return this.columnWindowsUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromStateColumn {
                get {
                    return this.columnFromState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToStateColumn {
                get {
                    return this.columnToState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransitionDateTimeColumn {
                get {
                    return this.columnTransitionDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransitionHistory_IdColumn {
                get {
                    return this.columnTransitionHistory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateTransitionRow this[int index] {
                get {
                    return ((StateTransitionRow)(this.Rows[index]));
                }
            }
            
            public event StateTransitionRowChangeEventHandler StateTransitionRowChanging;
            
            public event StateTransitionRowChangeEventHandler StateTransitionRowChanged;
            
            public event StateTransitionRowChangeEventHandler StateTransitionRowDeleting;
            
            public event StateTransitionRowChangeEventHandler StateTransitionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStateTransitionRow(StateTransitionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateTransitionRow AddStateTransitionRow(string LoggedInMemberId, string WindowsUserName, string FromState, string ToState, System.DateTime TransitionDateTime, TransitionHistoryRow parentTransitionHistoryRowByTransitionHistory_StateTransition) {
                StateTransitionRow rowStateTransitionRow = ((StateTransitionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LoggedInMemberId,
                        WindowsUserName,
                        FromState,
                        ToState,
                        TransitionDateTime,
                        null};
                if ((parentTransitionHistoryRowByTransitionHistory_StateTransition != null)) {
                    columnValuesArray[5] = parentTransitionHistoryRowByTransitionHistory_StateTransition[0];
                }
                rowStateTransitionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStateTransitionRow);
                return rowStateTransitionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StateTransitionDataTable cln = ((StateTransitionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StateTransitionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLoggedInMemberId = base.Columns["LoggedInMemberId"];
                this.columnWindowsUserName = base.Columns["WindowsUserName"];
                this.columnFromState = base.Columns["FromState"];
                this.columnToState = base.Columns["ToState"];
                this.columnTransitionDateTime = base.Columns["TransitionDateTime"];
                this.columnTransitionHistory_Id = base.Columns["TransitionHistory_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLoggedInMemberId = new global::System.Data.DataColumn("LoggedInMemberId", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLoggedInMemberId);
                this.columnWindowsUserName = new global::System.Data.DataColumn("WindowsUserName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnWindowsUserName);
                this.columnFromState = new global::System.Data.DataColumn("FromState", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFromState);
                this.columnToState = new global::System.Data.DataColumn("ToState", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnToState);
                this.columnTransitionDateTime = new global::System.Data.DataColumn("TransitionDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTransitionDateTime);
                this.columnTransitionHistory_Id = new global::System.Data.DataColumn("TransitionHistory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTransitionHistory_Id);
                this.columnLoggedInMemberId.AllowDBNull = false;
                this.columnLoggedInMemberId.Namespace = "";
                this.columnWindowsUserName.Namespace = "";
                this.columnFromState.AllowDBNull = false;
                this.columnFromState.Namespace = "";
                this.columnToState.AllowDBNull = false;
                this.columnToState.Namespace = "";
                this.columnTransitionDateTime.AllowDBNull = false;
                this.columnTransitionDateTime.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateTransitionRow NewStateTransitionRow() {
                return ((StateTransitionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StateTransitionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StateTransitionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StateTransitionRowChanged != null)) {
                    this.StateTransitionRowChanged(this, new StateTransitionRowChangeEvent(((StateTransitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StateTransitionRowChanging != null)) {
                    this.StateTransitionRowChanging(this, new StateTransitionRowChangeEvent(((StateTransitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StateTransitionRowDeleted != null)) {
                    this.StateTransitionRowDeleted(this, new StateTransitionRowChangeEvent(((StateTransitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StateTransitionRowDeleting != null)) {
                    this.StateTransitionRowDeleting(this, new StateTransitionRowChangeEvent(((StateTransitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStateTransitionRow(StateTransitionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StateTransitionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VersesDataTable : global::System.Data.TypedTableBase<VersesRow> {
            
            private global::System.Data.DataColumn columnVerses_Id;
            
            private global::System.Data.DataColumn columnstory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersesDataTable() {
                this.TableName = "Verses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VersesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VersesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Verses_IdColumn {
                get {
                    return this.columnVerses_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn story_IdColumn {
                get {
                    return this.columnstory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersesRow this[int index] {
                get {
                    return ((VersesRow)(this.Rows[index]));
                }
            }
            
            public event VersesRowChangeEventHandler VersesRowChanging;
            
            public event VersesRowChangeEventHandler VersesRowChanged;
            
            public event VersesRowChangeEventHandler VersesRowDeleting;
            
            public event VersesRowChangeEventHandler VersesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVersesRow(VersesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersesRow AddVersesRow(storyRow parentstoryRowBystory_Verses) {
                VersesRow rowVersesRow = ((VersesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentstoryRowBystory_Verses != null)) {
                    columnValuesArray[1] = parentstoryRowBystory_Verses[10];
                }
                rowVersesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVersesRow);
                return rowVersesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VersesDataTable cln = ((VersesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VersesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVerses_Id = base.Columns["Verses_Id"];
                this.columnstory_Id = base.Columns["story_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVerses_Id = new global::System.Data.DataColumn("Verses_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerses_Id);
                this.columnstory_Id = new global::System.Data.DataColumn("story_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstory_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnVerses_Id}, true));
                this.columnVerses_Id.AutoIncrement = true;
                this.columnVerses_Id.AllowDBNull = false;
                this.columnVerses_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersesRow NewVersesRow() {
                return ((VersesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VersesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VersesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VersesRowChanged != null)) {
                    this.VersesRowChanged(this, new VersesRowChangeEvent(((VersesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VersesRowChanging != null)) {
                    this.VersesRowChanging(this, new VersesRowChangeEvent(((VersesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VersesRowDeleted != null)) {
                    this.VersesRowDeleted(this, new VersesRowChangeEvent(((VersesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VersesRowDeleting != null)) {
                    this.VersesRowDeleting(this, new VersesRowChangeEvent(((VersesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVersesRow(VersesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VersesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VerseDataTable : global::System.Data.TypedTableBase<VerseRow> {
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnfirst;
            
            private global::System.Data.DataColumn columnvisible;
            
            private global::System.Data.DataColumn columnVerse_Id;
            
            private global::System.Data.DataColumn columnVerses_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseDataTable() {
                this.TableName = "Verse";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VerseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn firstColumn {
                get {
                    return this.columnfirst;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Verse_IdColumn {
                get {
                    return this.columnVerse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Verses_IdColumn {
                get {
                    return this.columnVerses_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow this[int index] {
                get {
                    return ((VerseRow)(this.Rows[index]));
                }
            }
            
            public event VerseRowChangeEventHandler VerseRowChanging;
            
            public event VerseRowChangeEventHandler VerseRowChanged;
            
            public event VerseRowChangeEventHandler VerseRowDeleting;
            
            public event VerseRowChangeEventHandler VerseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVerseRow(VerseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow AddVerseRow(string guid, bool first, bool visible, VersesRow parentVersesRowByVerses_Verse) {
                VerseRow rowVerseRow = ((VerseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        guid,
                        first,
                        visible,
                        null,
                        null};
                if ((parentVersesRowByVerses_Verse != null)) {
                    columnValuesArray[4] = parentVersesRowByVerses_Verse[0];
                }
                rowVerseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVerseRow);
                return rowVerseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VerseDataTable cln = ((VerseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VerseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnguid = base.Columns["guid"];
                this.columnfirst = base.Columns["first"];
                this.columnvisible = base.Columns["visible"];
                this.columnVerse_Id = base.Columns["Verse_Id"];
                this.columnVerses_Id = base.Columns["Verses_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnfirst = new global::System.Data.DataColumn("first", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnfirst);
                this.columnvisible = new global::System.Data.DataColumn("visible", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvisible);
                this.columnVerse_Id = new global::System.Data.DataColumn("Verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerse_Id);
                this.columnVerses_Id = new global::System.Data.DataColumn("Verses_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerses_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnVerse_Id}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnfirst.Namespace = "";
                this.columnfirst.DefaultValue = ((bool)(false));
                this.columnvisible.Namespace = "";
                this.columnvisible.DefaultValue = ((bool)(true));
                this.columnVerse_Id.AutoIncrement = true;
                this.columnVerse_Id.AllowDBNull = false;
                this.columnVerse_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow NewVerseRow() {
                return ((VerseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VerseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VerseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VerseRowChanged != null)) {
                    this.VerseRowChanged(this, new VerseRowChangeEvent(((VerseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VerseRowChanging != null)) {
                    this.VerseRowChanging(this, new VerseRowChangeEvent(((VerseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VerseRowDeleted != null)) {
                    this.VerseRowDeleted(this, new VerseRowChangeEvent(((VerseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VerseRowDeleting != null)) {
                    this.VerseRowDeleting(this, new VerseRowChangeEvent(((VerseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVerseRow(VerseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VerseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StoryLineDataTable : global::System.Data.TypedTableBase<StoryLineRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnStoryLine_text;
            
            private global::System.Data.DataColumn columnVerse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryLineDataTable() {
                this.TableName = "StoryLine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryLineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StoryLineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryLine_textColumn {
                get {
                    return this.columnStoryLine_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Verse_IdColumn {
                get {
                    return this.columnVerse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryLineRow this[int index] {
                get {
                    return ((StoryLineRow)(this.Rows[index]));
                }
            }
            
            public event StoryLineRowChangeEventHandler StoryLineRowChanging;
            
            public event StoryLineRowChangeEventHandler StoryLineRowChanged;
            
            public event StoryLineRowChangeEventHandler StoryLineRowDeleting;
            
            public event StoryLineRowChangeEventHandler StoryLineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStoryLineRow(StoryLineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryLineRow AddStoryLineRow(string lang, string StoryLine_text, VerseRow parentVerseRowByVerse_StoryLine) {
                StoryLineRow rowStoryLineRow = ((StoryLineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        StoryLine_text,
                        null};
                if ((parentVerseRowByVerse_StoryLine != null)) {
                    columnValuesArray[2] = parentVerseRowByVerse_StoryLine[3];
                }
                rowStoryLineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStoryLineRow);
                return rowStoryLineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StoryLineDataTable cln = ((StoryLineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StoryLineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnStoryLine_text = base.Columns["StoryLine_text"];
                this.columnVerse_Id = base.Columns["Verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnStoryLine_text = new global::System.Data.DataColumn("StoryLine_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnStoryLine_text);
                this.columnVerse_Id = new global::System.Data.DataColumn("Verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerse_Id);
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryLineRow NewStoryLineRow() {
                return ((StoryLineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StoryLineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StoryLineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoryLineRowChanged != null)) {
                    this.StoryLineRowChanged(this, new StoryLineRowChangeEvent(((StoryLineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoryLineRowChanging != null)) {
                    this.StoryLineRowChanging(this, new StoryLineRowChangeEvent(((StoryLineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoryLineRowDeleted != null)) {
                    this.StoryLineRowDeleted(this, new StoryLineRowChangeEvent(((StoryLineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoryLineRowDeleting != null)) {
                    this.StoryLineRowDeleting(this, new StoryLineRowChangeEvent(((StoryLineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStoryLineRow(StoryLineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StoryLineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnchorsDataTable : global::System.Data.TypedTableBase<AnchorsRow> {
            
            private global::System.Data.DataColumn columnkeyTermChecked;
            
            private global::System.Data.DataColumn columnAnchors_Id;
            
            private global::System.Data.DataColumn columnVerse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorsDataTable() {
                this.TableName = "Anchors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnchorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnchorsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn keyTermCheckedColumn {
                get {
                    return this.columnkeyTermChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Anchors_IdColumn {
                get {
                    return this.columnAnchors_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Verse_IdColumn {
                get {
                    return this.columnVerse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorsRow this[int index] {
                get {
                    return ((AnchorsRow)(this.Rows[index]));
                }
            }
            
            public event AnchorsRowChangeEventHandler AnchorsRowChanging;
            
            public event AnchorsRowChangeEventHandler AnchorsRowChanged;
            
            public event AnchorsRowChangeEventHandler AnchorsRowDeleting;
            
            public event AnchorsRowChangeEventHandler AnchorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnchorsRow(AnchorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorsRow AddAnchorsRow(bool keyTermChecked, VerseRow parentVerseRowByVerse_Anchors) {
                AnchorsRow rowAnchorsRow = ((AnchorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        keyTermChecked,
                        null,
                        null};
                if ((parentVerseRowByVerse_Anchors != null)) {
                    columnValuesArray[2] = parentVerseRowByVerse_Anchors[3];
                }
                rowAnchorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnchorsRow);
                return rowAnchorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AnchorsDataTable cln = ((AnchorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnchorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnkeyTermChecked = base.Columns["keyTermChecked"];
                this.columnAnchors_Id = base.Columns["Anchors_Id"];
                this.columnVerse_Id = base.Columns["Verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnkeyTermChecked = new global::System.Data.DataColumn("keyTermChecked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnkeyTermChecked);
                this.columnAnchors_Id = new global::System.Data.DataColumn("Anchors_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAnchors_Id);
                this.columnVerse_Id = new global::System.Data.DataColumn("Verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAnchors_Id}, true));
                this.columnkeyTermChecked.Namespace = "";
                this.columnAnchors_Id.AutoIncrement = true;
                this.columnAnchors_Id.AllowDBNull = false;
                this.columnAnchors_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorsRow NewAnchorsRow() {
                return ((AnchorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnchorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AnchorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnchorsRowChanged != null)) {
                    this.AnchorsRowChanged(this, new AnchorsRowChangeEvent(((AnchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnchorsRowChanging != null)) {
                    this.AnchorsRowChanging(this, new AnchorsRowChangeEvent(((AnchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnchorsRowDeleted != null)) {
                    this.AnchorsRowDeleted(this, new AnchorsRowChangeEvent(((AnchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnchorsRowDeleting != null)) {
                    this.AnchorsRowDeleting(this, new AnchorsRowChangeEvent(((AnchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnchorsRow(AnchorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnchorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnchorDataTable : global::System.Data.TypedTableBase<AnchorRow> {
            
            private global::System.Data.DataColumn columnjumpTarget;
            
            private global::System.Data.DataColumn columnAnchor_text;
            
            private global::System.Data.DataColumn columnAnchors_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorDataTable() {
                this.TableName = "Anchor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnchorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnchorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jumpTargetColumn {
                get {
                    return this.columnjumpTarget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Anchor_textColumn {
                get {
                    return this.columnAnchor_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Anchors_IdColumn {
                get {
                    return this.columnAnchors_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorRow this[int index] {
                get {
                    return ((AnchorRow)(this.Rows[index]));
                }
            }
            
            public event AnchorRowChangeEventHandler AnchorRowChanging;
            
            public event AnchorRowChangeEventHandler AnchorRowChanged;
            
            public event AnchorRowChangeEventHandler AnchorRowDeleting;
            
            public event AnchorRowChangeEventHandler AnchorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnchorRow(AnchorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorRow AddAnchorRow(string jumpTarget, string Anchor_text, AnchorsRow parentAnchorsRowByAnchors_Anchor) {
                AnchorRow rowAnchorRow = ((AnchorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        jumpTarget,
                        Anchor_text,
                        null};
                if ((parentAnchorsRowByAnchors_Anchor != null)) {
                    columnValuesArray[2] = parentAnchorsRowByAnchors_Anchor[1];
                }
                rowAnchorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnchorRow);
                return rowAnchorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AnchorDataTable cln = ((AnchorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnchorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnjumpTarget = base.Columns["jumpTarget"];
                this.columnAnchor_text = base.Columns["Anchor_text"];
                this.columnAnchors_Id = base.Columns["Anchors_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnjumpTarget = new global::System.Data.DataColumn("jumpTarget", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnjumpTarget);
                this.columnAnchor_text = new global::System.Data.DataColumn("Anchor_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnAnchor_text);
                this.columnAnchors_Id = new global::System.Data.DataColumn("Anchors_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAnchors_Id);
                this.columnjumpTarget.AllowDBNull = false;
                this.columnjumpTarget.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorRow NewAnchorRow() {
                return ((AnchorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnchorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AnchorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnchorRowChanged != null)) {
                    this.AnchorRowChanged(this, new AnchorRowChangeEvent(((AnchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnchorRowChanging != null)) {
                    this.AnchorRowChanging(this, new AnchorRowChangeEvent(((AnchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnchorRowDeleted != null)) {
                    this.AnchorRowDeleted(this, new AnchorRowChangeEvent(((AnchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnchorRowDeleting != null)) {
                    this.AnchorRowDeleting(this, new AnchorRowChangeEvent(((AnchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnchorRow(AnchorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnchorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExegeticalHelpsDataTable : global::System.Data.TypedTableBase<ExegeticalHelpsRow> {
            
            private global::System.Data.DataColumn columnExegeticalHelps_Id;
            
            private global::System.Data.DataColumn columnVerse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpsDataTable() {
                this.TableName = "ExegeticalHelps";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExegeticalHelpsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExegeticalHelpsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExegeticalHelps_IdColumn {
                get {
                    return this.columnExegeticalHelps_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Verse_IdColumn {
                get {
                    return this.columnVerse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpsRow this[int index] {
                get {
                    return ((ExegeticalHelpsRow)(this.Rows[index]));
                }
            }
            
            public event ExegeticalHelpsRowChangeEventHandler ExegeticalHelpsRowChanging;
            
            public event ExegeticalHelpsRowChangeEventHandler ExegeticalHelpsRowChanged;
            
            public event ExegeticalHelpsRowChangeEventHandler ExegeticalHelpsRowDeleting;
            
            public event ExegeticalHelpsRowChangeEventHandler ExegeticalHelpsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExegeticalHelpsRow(ExegeticalHelpsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpsRow AddExegeticalHelpsRow(VerseRow parentVerseRowByVerse_ExegeticalHelps) {
                ExegeticalHelpsRow rowExegeticalHelpsRow = ((ExegeticalHelpsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentVerseRowByVerse_ExegeticalHelps != null)) {
                    columnValuesArray[1] = parentVerseRowByVerse_ExegeticalHelps[3];
                }
                rowExegeticalHelpsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExegeticalHelpsRow);
                return rowExegeticalHelpsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExegeticalHelpsDataTable cln = ((ExegeticalHelpsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExegeticalHelpsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExegeticalHelps_Id = base.Columns["ExegeticalHelps_Id"];
                this.columnVerse_Id = base.Columns["Verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExegeticalHelps_Id = new global::System.Data.DataColumn("ExegeticalHelps_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnExegeticalHelps_Id);
                this.columnVerse_Id = new global::System.Data.DataColumn("Verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnExegeticalHelps_Id}, true));
                this.columnExegeticalHelps_Id.AutoIncrement = true;
                this.columnExegeticalHelps_Id.AllowDBNull = false;
                this.columnExegeticalHelps_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpsRow NewExegeticalHelpsRow() {
                return ((ExegeticalHelpsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExegeticalHelpsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExegeticalHelpsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExegeticalHelpsRowChanged != null)) {
                    this.ExegeticalHelpsRowChanged(this, new ExegeticalHelpsRowChangeEvent(((ExegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExegeticalHelpsRowChanging != null)) {
                    this.ExegeticalHelpsRowChanging(this, new ExegeticalHelpsRowChangeEvent(((ExegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExegeticalHelpsRowDeleted != null)) {
                    this.ExegeticalHelpsRowDeleted(this, new ExegeticalHelpsRowChangeEvent(((ExegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExegeticalHelpsRowDeleting != null)) {
                    this.ExegeticalHelpsRowDeleting(this, new ExegeticalHelpsRowChangeEvent(((ExegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExegeticalHelpsRow(ExegeticalHelpsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExegeticalHelpsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExegeticalHelpDataTable : global::System.Data.TypedTableBase<ExegeticalHelpRow> {
            
            private global::System.Data.DataColumn columnExegeticalHelp_Column;
            
            private global::System.Data.DataColumn columnExegeticalHelps_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpDataTable() {
                this.TableName = "ExegeticalHelp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExegeticalHelpDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExegeticalHelpDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExegeticalHelp_ColumnColumn {
                get {
                    return this.columnExegeticalHelp_Column;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExegeticalHelps_IdColumn {
                get {
                    return this.columnExegeticalHelps_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpRow this[int index] {
                get {
                    return ((ExegeticalHelpRow)(this.Rows[index]));
                }
            }
            
            public event ExegeticalHelpRowChangeEventHandler ExegeticalHelpRowChanging;
            
            public event ExegeticalHelpRowChangeEventHandler ExegeticalHelpRowChanged;
            
            public event ExegeticalHelpRowChangeEventHandler ExegeticalHelpRowDeleting;
            
            public event ExegeticalHelpRowChangeEventHandler ExegeticalHelpRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExegeticalHelpRow(ExegeticalHelpRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpRow AddExegeticalHelpRow(string ExegeticalHelp_Column, ExegeticalHelpsRow parentExegeticalHelpsRowByExegeticalHelps_ExegeticalHelp) {
                ExegeticalHelpRow rowExegeticalHelpRow = ((ExegeticalHelpRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExegeticalHelp_Column,
                        null};
                if ((parentExegeticalHelpsRowByExegeticalHelps_ExegeticalHelp != null)) {
                    columnValuesArray[1] = parentExegeticalHelpsRowByExegeticalHelps_ExegeticalHelp[0];
                }
                rowExegeticalHelpRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExegeticalHelpRow);
                return rowExegeticalHelpRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExegeticalHelpDataTable cln = ((ExegeticalHelpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExegeticalHelpDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExegeticalHelp_Column = base.Columns["ExegeticalHelp_Column"];
                this.columnExegeticalHelps_Id = base.Columns["ExegeticalHelps_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExegeticalHelp_Column = new global::System.Data.DataColumn("ExegeticalHelp_Column", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnExegeticalHelp_Column);
                this.columnExegeticalHelps_Id = new global::System.Data.DataColumn("ExegeticalHelps_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnExegeticalHelps_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpRow NewExegeticalHelpRow() {
                return ((ExegeticalHelpRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExegeticalHelpRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExegeticalHelpRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExegeticalHelpRowChanged != null)) {
                    this.ExegeticalHelpRowChanged(this, new ExegeticalHelpRowChangeEvent(((ExegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExegeticalHelpRowChanging != null)) {
                    this.ExegeticalHelpRowChanging(this, new ExegeticalHelpRowChangeEvent(((ExegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExegeticalHelpRowDeleted != null)) {
                    this.ExegeticalHelpRowDeleted(this, new ExegeticalHelpRowChangeEvent(((ExegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExegeticalHelpRowDeleting != null)) {
                    this.ExegeticalHelpRowDeleting(this, new ExegeticalHelpRowChangeEvent(((ExegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExegeticalHelpRow(ExegeticalHelpRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExegeticalHelpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestQuestionsDataTable : global::System.Data.TypedTableBase<TestQuestionsRow> {
            
            private global::System.Data.DataColumn columnTestQuestions_Id;
            
            private global::System.Data.DataColumn columnVerse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsDataTable() {
                this.TableName = "TestQuestions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestQuestionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestions_IdColumn {
                get {
                    return this.columnTestQuestions_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Verse_IdColumn {
                get {
                    return this.columnVerse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow this[int index] {
                get {
                    return ((TestQuestionsRow)(this.Rows[index]));
                }
            }
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowChanging;
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowChanged;
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowDeleting;
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestQuestionsRow(TestQuestionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow AddTestQuestionsRow(VerseRow parentVerseRowByVerse_TestQuestions) {
                TestQuestionsRow rowTestQuestionsRow = ((TestQuestionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentVerseRowByVerse_TestQuestions != null)) {
                    columnValuesArray[1] = parentVerseRowByVerse_TestQuestions[3];
                }
                rowTestQuestionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestQuestionsRow);
                return rowTestQuestionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestQuestionsDataTable cln = ((TestQuestionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestQuestionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestQuestions_Id = base.Columns["TestQuestions_Id"];
                this.columnVerse_Id = base.Columns["Verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestQuestions_Id = new global::System.Data.DataColumn("TestQuestions_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestions_Id);
                this.columnVerse_Id = new global::System.Data.DataColumn("Verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestQuestions_Id}, true));
                this.columnTestQuestions_Id.AutoIncrement = true;
                this.columnTestQuestions_Id.AllowDBNull = false;
                this.columnTestQuestions_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow NewTestQuestionsRow() {
                return ((TestQuestionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestQuestionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestQuestionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestQuestionsRowChanged != null)) {
                    this.TestQuestionsRowChanged(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestQuestionsRowChanging != null)) {
                    this.TestQuestionsRowChanging(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestQuestionsRowDeleted != null)) {
                    this.TestQuestionsRowDeleted(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestQuestionsRowDeleting != null)) {
                    this.TestQuestionsRowDeleting(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestQuestionsRow(TestQuestionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestQuestionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestQuestionDataTable : global::System.Data.TypedTableBase<TestQuestionRow> {
            
            private global::System.Data.DataColumn columnvisible;
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnTestQuestion_Id;
            
            private global::System.Data.DataColumn columnTestQuestions_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionDataTable() {
                this.TableName = "TestQuestion";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestQuestionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestion_IdColumn {
                get {
                    return this.columnTestQuestion_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestions_IdColumn {
                get {
                    return this.columnTestQuestions_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow this[int index] {
                get {
                    return ((TestQuestionRow)(this.Rows[index]));
                }
            }
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowChanging;
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowChanged;
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowDeleting;
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestQuestionRow(TestQuestionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow AddTestQuestionRow(bool visible, string guid, TestQuestionsRow parentTestQuestionsRowByTestQuestions_TestQuestion) {
                TestQuestionRow rowTestQuestionRow = ((TestQuestionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        visible,
                        guid,
                        null,
                        null};
                if ((parentTestQuestionsRowByTestQuestions_TestQuestion != null)) {
                    columnValuesArray[3] = parentTestQuestionsRowByTestQuestions_TestQuestion[0];
                }
                rowTestQuestionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestQuestionRow);
                return rowTestQuestionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestQuestionDataTable cln = ((TestQuestionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestQuestionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvisible = base.Columns["visible"];
                this.columnguid = base.Columns["guid"];
                this.columnTestQuestion_Id = base.Columns["TestQuestion_Id"];
                this.columnTestQuestions_Id = base.Columns["TestQuestions_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvisible = new global::System.Data.DataColumn("visible", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvisible);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnTestQuestion_Id = new global::System.Data.DataColumn("TestQuestion_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestion_Id);
                this.columnTestQuestions_Id = new global::System.Data.DataColumn("TestQuestions_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestions_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestQuestion_Id}, true));
                this.columnvisible.Namespace = "";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnTestQuestion_Id.AutoIncrement = true;
                this.columnTestQuestion_Id.AllowDBNull = false;
                this.columnTestQuestion_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow NewTestQuestionRow() {
                return ((TestQuestionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestQuestionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestQuestionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestQuestionRowChanged != null)) {
                    this.TestQuestionRowChanged(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestQuestionRowChanging != null)) {
                    this.TestQuestionRowChanging(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestQuestionRowDeleted != null)) {
                    this.TestQuestionRowDeleted(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestQuestionRowDeleting != null)) {
                    this.TestQuestionRowDeleting(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestQuestionRow(TestQuestionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestQuestionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestQuestionLineDataTable : global::System.Data.TypedTableBase<TestQuestionLineRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnTestQuestionLine_text;
            
            private global::System.Data.DataColumn columnTestQuestion_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionLineDataTable() {
                this.TableName = "TestQuestionLine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionLineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestQuestionLineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestionLine_textColumn {
                get {
                    return this.columnTestQuestionLine_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestion_IdColumn {
                get {
                    return this.columnTestQuestion_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionLineRow this[int index] {
                get {
                    return ((TestQuestionLineRow)(this.Rows[index]));
                }
            }
            
            public event TestQuestionLineRowChangeEventHandler TestQuestionLineRowChanging;
            
            public event TestQuestionLineRowChangeEventHandler TestQuestionLineRowChanged;
            
            public event TestQuestionLineRowChangeEventHandler TestQuestionLineRowDeleting;
            
            public event TestQuestionLineRowChangeEventHandler TestQuestionLineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestQuestionLineRow(TestQuestionLineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionLineRow AddTestQuestionLineRow(string lang, string TestQuestionLine_text, TestQuestionRow parentTestQuestionRowByTestQuestion_TestQuestionLine) {
                TestQuestionLineRow rowTestQuestionLineRow = ((TestQuestionLineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        TestQuestionLine_text,
                        null};
                if ((parentTestQuestionRowByTestQuestion_TestQuestionLine != null)) {
                    columnValuesArray[2] = parentTestQuestionRowByTestQuestion_TestQuestionLine[2];
                }
                rowTestQuestionLineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestQuestionLineRow);
                return rowTestQuestionLineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestQuestionLineDataTable cln = ((TestQuestionLineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestQuestionLineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnTestQuestionLine_text = base.Columns["TestQuestionLine_text"];
                this.columnTestQuestion_Id = base.Columns["TestQuestion_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnTestQuestionLine_text = new global::System.Data.DataColumn("TestQuestionLine_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnTestQuestionLine_text);
                this.columnTestQuestion_Id = new global::System.Data.DataColumn("TestQuestion_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestion_Id);
                this.columnlang.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionLineRow NewTestQuestionLineRow() {
                return ((TestQuestionLineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestQuestionLineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestQuestionLineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestQuestionLineRowChanged != null)) {
                    this.TestQuestionLineRowChanged(this, new TestQuestionLineRowChangeEvent(((TestQuestionLineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestQuestionLineRowChanging != null)) {
                    this.TestQuestionLineRowChanging(this, new TestQuestionLineRowChangeEvent(((TestQuestionLineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestQuestionLineRowDeleted != null)) {
                    this.TestQuestionLineRowDeleted(this, new TestQuestionLineRowChangeEvent(((TestQuestionLineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestQuestionLineRowDeleting != null)) {
                    this.TestQuestionLineRowDeleting(this, new TestQuestionLineRowChangeEvent(((TestQuestionLineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestQuestionLineRow(TestQuestionLineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestQuestionLineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnswersDataTable : global::System.Data.TypedTableBase<AnswersRow> {
            
            private global::System.Data.DataColumn columnAnswers_Id;
            
            private global::System.Data.DataColumn columnTestQuestion_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersDataTable() {
                this.TableName = "Answers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnswersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnswersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Answers_IdColumn {
                get {
                    return this.columnAnswers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestion_IdColumn {
                get {
                    return this.columnTestQuestion_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow this[int index] {
                get {
                    return ((AnswersRow)(this.Rows[index]));
                }
            }
            
            public event AnswersRowChangeEventHandler AnswersRowChanging;
            
            public event AnswersRowChangeEventHandler AnswersRowChanged;
            
            public event AnswersRowChangeEventHandler AnswersRowDeleting;
            
            public event AnswersRowChangeEventHandler AnswersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnswersRow(AnswersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow AddAnswersRow(TestQuestionRow parentTestQuestionRowByTestQuestion_Answers) {
                AnswersRow rowAnswersRow = ((AnswersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentTestQuestionRowByTestQuestion_Answers != null)) {
                    columnValuesArray[1] = parentTestQuestionRowByTestQuestion_Answers[2];
                }
                rowAnswersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnswersRow);
                return rowAnswersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AnswersDataTable cln = ((AnswersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnswersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAnswers_Id = base.Columns["Answers_Id"];
                this.columnTestQuestion_Id = base.Columns["TestQuestion_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAnswers_Id = new global::System.Data.DataColumn("Answers_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAnswers_Id);
                this.columnTestQuestion_Id = new global::System.Data.DataColumn("TestQuestion_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestion_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAnswers_Id}, true));
                this.columnAnswers_Id.AutoIncrement = true;
                this.columnAnswers_Id.AllowDBNull = false;
                this.columnAnswers_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow NewAnswersRow() {
                return ((AnswersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnswersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AnswersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnswersRowChanged != null)) {
                    this.AnswersRowChanged(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnswersRowChanging != null)) {
                    this.AnswersRowChanging(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnswersRowDeleted != null)) {
                    this.AnswersRowDeleted(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnswersRowDeleting != null)) {
                    this.AnswersRowDeleting(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnswersRow(AnswersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnswersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnswerDataTable : global::System.Data.TypedTableBase<AnswerRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnAnswer_text;
            
            private global::System.Data.DataColumn columnAnswers_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswerDataTable() {
                this.TableName = "Answer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnswerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnswerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Answer_textColumn {
                get {
                    return this.columnAnswer_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Answers_IdColumn {
                get {
                    return this.columnAnswers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswerRow this[int index] {
                get {
                    return ((AnswerRow)(this.Rows[index]));
                }
            }
            
            public event AnswerRowChangeEventHandler AnswerRowChanging;
            
            public event AnswerRowChangeEventHandler AnswerRowChanged;
            
            public event AnswerRowChangeEventHandler AnswerRowDeleting;
            
            public event AnswerRowChangeEventHandler AnswerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnswerRow(AnswerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswerRow AddAnswerRow(string lang, string memberID, string Answer_text, AnswersRow parentAnswersRowByAnswers_Answer) {
                AnswerRow rowAnswerRow = ((AnswerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        memberID,
                        Answer_text,
                        null};
                if ((parentAnswersRowByAnswers_Answer != null)) {
                    columnValuesArray[3] = parentAnswersRowByAnswers_Answer[0];
                }
                rowAnswerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnswerRow);
                return rowAnswerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AnswerDataTable cln = ((AnswerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnswerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnmemberID = base.Columns["memberID"];
                this.columnAnswer_text = base.Columns["Answer_text"];
                this.columnAnswers_Id = base.Columns["Answers_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnAnswer_text = new global::System.Data.DataColumn("Answer_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnAnswer_text);
                this.columnAnswers_Id = new global::System.Data.DataColumn("Answers_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAnswers_Id);
                this.columnlang.Namespace = "";
                this.columnmemberID.AllowDBNull = false;
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswerRow NewAnswerRow() {
                return ((AnswerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnswerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AnswerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnswerRowChanged != null)) {
                    this.AnswerRowChanged(this, new AnswerRowChangeEvent(((AnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnswerRowChanging != null)) {
                    this.AnswerRowChanging(this, new AnswerRowChangeEvent(((AnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnswerRowDeleted != null)) {
                    this.AnswerRowDeleted(this, new AnswerRowChangeEvent(((AnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnswerRowDeleting != null)) {
                    this.AnswerRowDeleting(this, new AnswerRowChangeEvent(((AnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnswerRow(AnswerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnswerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RetellingsDataTable : global::System.Data.TypedTableBase<RetellingsRow> {
            
            private global::System.Data.DataColumn columnRetellings_Id;
            
            private global::System.Data.DataColumn columnVerse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsDataTable() {
                this.TableName = "Retellings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RetellingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Retellings_IdColumn {
                get {
                    return this.columnRetellings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Verse_IdColumn {
                get {
                    return this.columnVerse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow this[int index] {
                get {
                    return ((RetellingsRow)(this.Rows[index]));
                }
            }
            
            public event RetellingsRowChangeEventHandler RetellingsRowChanging;
            
            public event RetellingsRowChangeEventHandler RetellingsRowChanged;
            
            public event RetellingsRowChangeEventHandler RetellingsRowDeleting;
            
            public event RetellingsRowChangeEventHandler RetellingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRetellingsRow(RetellingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow AddRetellingsRow(VerseRow parentVerseRowByVerse_Retellings) {
                RetellingsRow rowRetellingsRow = ((RetellingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentVerseRowByVerse_Retellings != null)) {
                    columnValuesArray[1] = parentVerseRowByVerse_Retellings[3];
                }
                rowRetellingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRetellingsRow);
                return rowRetellingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RetellingsDataTable cln = ((RetellingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RetellingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRetellings_Id = base.Columns["Retellings_Id"];
                this.columnVerse_Id = base.Columns["Verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRetellings_Id = new global::System.Data.DataColumn("Retellings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRetellings_Id);
                this.columnVerse_Id = new global::System.Data.DataColumn("Verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRetellings_Id}, true));
                this.columnRetellings_Id.AutoIncrement = true;
                this.columnRetellings_Id.AllowDBNull = false;
                this.columnRetellings_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow NewRetellingsRow() {
                return ((RetellingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RetellingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RetellingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RetellingsRowChanged != null)) {
                    this.RetellingsRowChanged(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RetellingsRowChanging != null)) {
                    this.RetellingsRowChanging(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RetellingsRowDeleted != null)) {
                    this.RetellingsRowDeleted(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RetellingsRowDeleting != null)) {
                    this.RetellingsRowDeleting(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRetellingsRow(RetellingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RetellingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RetellingDataTable : global::System.Data.TypedTableBase<RetellingRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnRetelling_text;
            
            private global::System.Data.DataColumn columnRetellings_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingDataTable() {
                this.TableName = "Retelling";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RetellingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Retelling_textColumn {
                get {
                    return this.columnRetelling_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Retellings_IdColumn {
                get {
                    return this.columnRetellings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow this[int index] {
                get {
                    return ((RetellingRow)(this.Rows[index]));
                }
            }
            
            public event RetellingRowChangeEventHandler RetellingRowChanging;
            
            public event RetellingRowChangeEventHandler RetellingRowChanged;
            
            public event RetellingRowChangeEventHandler RetellingRowDeleting;
            
            public event RetellingRowChangeEventHandler RetellingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRetellingRow(RetellingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow AddRetellingRow(string lang, string memberID, string Retelling_text, RetellingsRow parentRetellingsRowByRetellings_Retelling) {
                RetellingRow rowRetellingRow = ((RetellingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        memberID,
                        Retelling_text,
                        null};
                if ((parentRetellingsRowByRetellings_Retelling != null)) {
                    columnValuesArray[3] = parentRetellingsRowByRetellings_Retelling[0];
                }
                rowRetellingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRetellingRow);
                return rowRetellingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RetellingDataTable cln = ((RetellingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RetellingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnmemberID = base.Columns["memberID"];
                this.columnRetelling_text = base.Columns["Retelling_text"];
                this.columnRetellings_Id = base.Columns["Retellings_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnRetelling_text = new global::System.Data.DataColumn("Retelling_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnRetelling_text);
                this.columnRetellings_Id = new global::System.Data.DataColumn("Retellings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRetellings_Id);
                this.columnlang.Namespace = "";
                this.columnmemberID.AllowDBNull = false;
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow NewRetellingRow() {
                return ((RetellingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RetellingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RetellingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RetellingRowChanged != null)) {
                    this.RetellingRowChanged(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RetellingRowChanging != null)) {
                    this.RetellingRowChanging(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RetellingRowDeleted != null)) {
                    this.RetellingRowDeleted(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RetellingRowDeleting != null)) {
                    this.RetellingRowDeleting(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRetellingRow(RetellingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RetellingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantNotesDataTable : global::System.Data.TypedTableBase<ConsultantNotesRow> {
            
            private global::System.Data.DataColumn columnConsultantNotes_Id;
            
            private global::System.Data.DataColumn columnVerse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesDataTable() {
                this.TableName = "ConsultantNotes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNotesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsultantNotesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNotes_IdColumn {
                get {
                    return this.columnConsultantNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Verse_IdColumn {
                get {
                    return this.columnVerse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow this[int index] {
                get {
                    return ((ConsultantNotesRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowChanging;
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowChanged;
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowDeleting;
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantNotesRow(ConsultantNotesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow AddConsultantNotesRow(VerseRow parentVerseRowByVerse_ConsultantNotes) {
                ConsultantNotesRow rowConsultantNotesRow = ((ConsultantNotesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentVerseRowByVerse_ConsultantNotes != null)) {
                    columnValuesArray[1] = parentVerseRowByVerse_ConsultantNotes[3];
                }
                rowConsultantNotesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantNotesRow);
                return rowConsultantNotesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantNotesDataTable cln = ((ConsultantNotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantNotesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConsultantNotes_Id = base.Columns["ConsultantNotes_Id"];
                this.columnVerse_Id = base.Columns["Verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConsultantNotes_Id = new global::System.Data.DataColumn("ConsultantNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantNotes_Id);
                this.columnVerse_Id = new global::System.Data.DataColumn("Verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnConsultantNotes_Id}, true));
                this.columnConsultantNotes_Id.AutoIncrement = true;
                this.columnConsultantNotes_Id.AllowDBNull = false;
                this.columnConsultantNotes_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow NewConsultantNotesRow() {
                return ((ConsultantNotesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantNotesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantNotesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantNotesRowChanged != null)) {
                    this.ConsultantNotesRowChanged(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantNotesRowChanging != null)) {
                    this.ConsultantNotesRowChanging(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantNotesRowDeleted != null)) {
                    this.ConsultantNotesRowDeleted(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantNotesRowDeleting != null)) {
                    this.ConsultantNotesRowDeleting(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantNotesRow(ConsultantNotesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantNotesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantConversationDataTable : global::System.Data.TypedTableBase<ConsultantConversationRow> {
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnvisible;
            
            private global::System.Data.DataColumn columnfinished;
            
            private global::System.Data.DataColumn columnConsultantConversation_Id;
            
            private global::System.Data.DataColumn columnConsultantNotes_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationDataTable() {
                this.TableName = "ConsultantConversation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantConversationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsultantConversationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn finishedColumn {
                get {
                    return this.columnfinished;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantConversation_IdColumn {
                get {
                    return this.columnConsultantConversation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNotes_IdColumn {
                get {
                    return this.columnConsultantNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow this[int index] {
                get {
                    return ((ConsultantConversationRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantConversationRowChangeEventHandler ConsultantConversationRowChanging;
            
            public event ConsultantConversationRowChangeEventHandler ConsultantConversationRowChanged;
            
            public event ConsultantConversationRowChangeEventHandler ConsultantConversationRowDeleting;
            
            public event ConsultantConversationRowChangeEventHandler ConsultantConversationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantConversationRow(ConsultantConversationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow AddConsultantConversationRow(string guid, bool visible, bool finished, ConsultantNotesRow parentConsultantNotesRowByConsultantNotes_ConsultantConversation) {
                ConsultantConversationRow rowConsultantConversationRow = ((ConsultantConversationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        guid,
                        visible,
                        finished,
                        null,
                        null};
                if ((parentConsultantNotesRowByConsultantNotes_ConsultantConversation != null)) {
                    columnValuesArray[4] = parentConsultantNotesRowByConsultantNotes_ConsultantConversation[0];
                }
                rowConsultantConversationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantConversationRow);
                return rowConsultantConversationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantConversationDataTable cln = ((ConsultantConversationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantConversationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnguid = base.Columns["guid"];
                this.columnvisible = base.Columns["visible"];
                this.columnfinished = base.Columns["finished"];
                this.columnConsultantConversation_Id = base.Columns["ConsultantConversation_Id"];
                this.columnConsultantNotes_Id = base.Columns["ConsultantNotes_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnvisible = new global::System.Data.DataColumn("visible", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvisible);
                this.columnfinished = new global::System.Data.DataColumn("finished", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnfinished);
                this.columnConsultantConversation_Id = new global::System.Data.DataColumn("ConsultantConversation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantConversation_Id);
                this.columnConsultantNotes_Id = new global::System.Data.DataColumn("ConsultantNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantNotes_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnConsultantConversation_Id}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnvisible.Namespace = "";
                this.columnfinished.Namespace = "";
                this.columnfinished.DefaultValue = ((bool)(false));
                this.columnConsultantConversation_Id.AutoIncrement = true;
                this.columnConsultantConversation_Id.AllowDBNull = false;
                this.columnConsultantConversation_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow NewConsultantConversationRow() {
                return ((ConsultantConversationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantConversationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantConversationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantConversationRowChanged != null)) {
                    this.ConsultantConversationRowChanged(this, new ConsultantConversationRowChangeEvent(((ConsultantConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantConversationRowChanging != null)) {
                    this.ConsultantConversationRowChanging(this, new ConsultantConversationRowChangeEvent(((ConsultantConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantConversationRowDeleted != null)) {
                    this.ConsultantConversationRowDeleted(this, new ConsultantConversationRowChangeEvent(((ConsultantConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantConversationRowDeleting != null)) {
                    this.ConsultantConversationRowDeleting(this, new ConsultantConversationRowChangeEvent(((ConsultantConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantConversationRow(ConsultantConversationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantConversationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantNoteDataTable : global::System.Data.TypedTableBase<ConsultantNoteRow> {
            
            private global::System.Data.DataColumn columnDirection;
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columntimeStamp;
            
            private global::System.Data.DataColumn columnConsultantNote_text;
            
            private global::System.Data.DataColumn columnConsultantConversation_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteDataTable() {
                this.TableName = "ConsultantNote";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNoteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsultantNoteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timeStampColumn {
                get {
                    return this.columntimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNote_textColumn {
                get {
                    return this.columnConsultantNote_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantConversation_IdColumn {
                get {
                    return this.columnConsultantConversation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow this[int index] {
                get {
                    return ((ConsultantNoteRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowChanging;
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowChanged;
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowDeleting;
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantNoteRow(ConsultantNoteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow AddConsultantNoteRow(string Direction, string guid, string memberID, System.DateTime timeStamp, string ConsultantNote_text, ConsultantConversationRow parentConsultantConversationRowByConsultantConversation_ConsultantNote) {
                ConsultantNoteRow rowConsultantNoteRow = ((ConsultantNoteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Direction,
                        guid,
                        memberID,
                        timeStamp,
                        ConsultantNote_text,
                        null};
                if ((parentConsultantConversationRowByConsultantConversation_ConsultantNote != null)) {
                    columnValuesArray[5] = parentConsultantConversationRowByConsultantConversation_ConsultantNote[3];
                }
                rowConsultantNoteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantNoteRow);
                return rowConsultantNoteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantNoteDataTable cln = ((ConsultantNoteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantNoteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDirection = base.Columns["Direction"];
                this.columnguid = base.Columns["guid"];
                this.columnmemberID = base.Columns["memberID"];
                this.columntimeStamp = base.Columns["timeStamp"];
                this.columnConsultantNote_text = base.Columns["ConsultantNote_text"];
                this.columnConsultantConversation_Id = base.Columns["ConsultantConversation_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDirection = new global::System.Data.DataColumn("Direction", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirection);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columntimeStamp = new global::System.Data.DataColumn("timeStamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntimeStamp);
                this.columnConsultantNote_text = new global::System.Data.DataColumn("ConsultantNote_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnConsultantNote_text);
                this.columnConsultantConversation_Id = new global::System.Data.DataColumn("ConsultantConversation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantConversation_Id);
                this.columnDirection.AllowDBNull = false;
                this.columnDirection.Namespace = "";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnmemberID.Namespace = "";
                this.columntimeStamp.Namespace = "";
                this.columnConsultantNote_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow NewConsultantNoteRow() {
                return ((ConsultantNoteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantNoteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantNoteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantNoteRowChanged != null)) {
                    this.ConsultantNoteRowChanged(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantNoteRowChanging != null)) {
                    this.ConsultantNoteRowChanging(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantNoteRowDeleted != null)) {
                    this.ConsultantNoteRowDeleted(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantNoteRowDeleting != null)) {
                    this.ConsultantNoteRowDeleting(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantNoteRow(ConsultantNoteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantNoteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoachNotesDataTable : global::System.Data.TypedTableBase<CoachNotesRow> {
            
            private global::System.Data.DataColumn columnCoachNotes_Id;
            
            private global::System.Data.DataColumn columnVerse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesDataTable() {
                this.TableName = "CoachNotes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNotesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoachNotesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachNotes_IdColumn {
                get {
                    return this.columnCoachNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Verse_IdColumn {
                get {
                    return this.columnVerse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow this[int index] {
                get {
                    return ((CoachNotesRow)(this.Rows[index]));
                }
            }
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowChanging;
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowChanged;
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowDeleting;
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoachNotesRow(CoachNotesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow AddCoachNotesRow(VerseRow parentVerseRowByVerse_CoachNotes) {
                CoachNotesRow rowCoachNotesRow = ((CoachNotesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentVerseRowByVerse_CoachNotes != null)) {
                    columnValuesArray[1] = parentVerseRowByVerse_CoachNotes[3];
                }
                rowCoachNotesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoachNotesRow);
                return rowCoachNotesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoachNotesDataTable cln = ((CoachNotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoachNotesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCoachNotes_Id = base.Columns["CoachNotes_Id"];
                this.columnVerse_Id = base.Columns["Verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCoachNotes_Id = new global::System.Data.DataColumn("CoachNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachNotes_Id);
                this.columnVerse_Id = new global::System.Data.DataColumn("Verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCoachNotes_Id}, true));
                this.columnCoachNotes_Id.AutoIncrement = true;
                this.columnCoachNotes_Id.AllowDBNull = false;
                this.columnCoachNotes_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow NewCoachNotesRow() {
                return ((CoachNotesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoachNotesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoachNotesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoachNotesRowChanged != null)) {
                    this.CoachNotesRowChanged(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoachNotesRowChanging != null)) {
                    this.CoachNotesRowChanging(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoachNotesRowDeleted != null)) {
                    this.CoachNotesRowDeleted(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoachNotesRowDeleting != null)) {
                    this.CoachNotesRowDeleting(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoachNotesRow(CoachNotesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoachNotesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoachConversationDataTable : global::System.Data.TypedTableBase<CoachConversationRow> {
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnvisible;
            
            private global::System.Data.DataColumn columnfinished;
            
            private global::System.Data.DataColumn columnCoachConversation_Id;
            
            private global::System.Data.DataColumn columnCoachNotes_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationDataTable() {
                this.TableName = "CoachConversation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachConversationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoachConversationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn finishedColumn {
                get {
                    return this.columnfinished;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachConversation_IdColumn {
                get {
                    return this.columnCoachConversation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachNotes_IdColumn {
                get {
                    return this.columnCoachNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow this[int index] {
                get {
                    return ((CoachConversationRow)(this.Rows[index]));
                }
            }
            
            public event CoachConversationRowChangeEventHandler CoachConversationRowChanging;
            
            public event CoachConversationRowChangeEventHandler CoachConversationRowChanged;
            
            public event CoachConversationRowChangeEventHandler CoachConversationRowDeleting;
            
            public event CoachConversationRowChangeEventHandler CoachConversationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoachConversationRow(CoachConversationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow AddCoachConversationRow(string guid, bool visible, bool finished, CoachNotesRow parentCoachNotesRowByCoachNotes_CoachConversation) {
                CoachConversationRow rowCoachConversationRow = ((CoachConversationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        guid,
                        visible,
                        finished,
                        null,
                        null};
                if ((parentCoachNotesRowByCoachNotes_CoachConversation != null)) {
                    columnValuesArray[4] = parentCoachNotesRowByCoachNotes_CoachConversation[0];
                }
                rowCoachConversationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoachConversationRow);
                return rowCoachConversationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoachConversationDataTable cln = ((CoachConversationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoachConversationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnguid = base.Columns["guid"];
                this.columnvisible = base.Columns["visible"];
                this.columnfinished = base.Columns["finished"];
                this.columnCoachConversation_Id = base.Columns["CoachConversation_Id"];
                this.columnCoachNotes_Id = base.Columns["CoachNotes_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnvisible = new global::System.Data.DataColumn("visible", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvisible);
                this.columnfinished = new global::System.Data.DataColumn("finished", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnfinished);
                this.columnCoachConversation_Id = new global::System.Data.DataColumn("CoachConversation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachConversation_Id);
                this.columnCoachNotes_Id = new global::System.Data.DataColumn("CoachNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachNotes_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCoachConversation_Id}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnvisible.Namespace = "";
                this.columnfinished.Namespace = "";
                this.columnfinished.DefaultValue = ((bool)(false));
                this.columnCoachConversation_Id.AutoIncrement = true;
                this.columnCoachConversation_Id.AllowDBNull = false;
                this.columnCoachConversation_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow NewCoachConversationRow() {
                return ((CoachConversationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoachConversationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoachConversationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoachConversationRowChanged != null)) {
                    this.CoachConversationRowChanged(this, new CoachConversationRowChangeEvent(((CoachConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoachConversationRowChanging != null)) {
                    this.CoachConversationRowChanging(this, new CoachConversationRowChangeEvent(((CoachConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoachConversationRowDeleted != null)) {
                    this.CoachConversationRowDeleted(this, new CoachConversationRowChangeEvent(((CoachConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoachConversationRowDeleting != null)) {
                    this.CoachConversationRowDeleting(this, new CoachConversationRowChangeEvent(((CoachConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoachConversationRow(CoachConversationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoachConversationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoachNoteDataTable : global::System.Data.TypedTableBase<CoachNoteRow> {
            
            private global::System.Data.DataColumn columnDirection;
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columntimeStamp;
            
            private global::System.Data.DataColumn columnCoachNote_text;
            
            private global::System.Data.DataColumn columnCoachConversation_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteDataTable() {
                this.TableName = "CoachNote";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNoteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoachNoteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timeStampColumn {
                get {
                    return this.columntimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachNote_textColumn {
                get {
                    return this.columnCoachNote_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachConversation_IdColumn {
                get {
                    return this.columnCoachConversation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow this[int index] {
                get {
                    return ((CoachNoteRow)(this.Rows[index]));
                }
            }
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowChanging;
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowChanged;
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowDeleting;
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoachNoteRow(CoachNoteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow AddCoachNoteRow(string Direction, string guid, string memberID, System.DateTime timeStamp, string CoachNote_text, CoachConversationRow parentCoachConversationRowByCoachConversation_CoachNote) {
                CoachNoteRow rowCoachNoteRow = ((CoachNoteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Direction,
                        guid,
                        memberID,
                        timeStamp,
                        CoachNote_text,
                        null};
                if ((parentCoachConversationRowByCoachConversation_CoachNote != null)) {
                    columnValuesArray[5] = parentCoachConversationRowByCoachConversation_CoachNote[3];
                }
                rowCoachNoteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoachNoteRow);
                return rowCoachNoteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoachNoteDataTable cln = ((CoachNoteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoachNoteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDirection = base.Columns["Direction"];
                this.columnguid = base.Columns["guid"];
                this.columnmemberID = base.Columns["memberID"];
                this.columntimeStamp = base.Columns["timeStamp"];
                this.columnCoachNote_text = base.Columns["CoachNote_text"];
                this.columnCoachConversation_Id = base.Columns["CoachConversation_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDirection = new global::System.Data.DataColumn("Direction", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirection);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columntimeStamp = new global::System.Data.DataColumn("timeStamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntimeStamp);
                this.columnCoachNote_text = new global::System.Data.DataColumn("CoachNote_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnCoachNote_text);
                this.columnCoachConversation_Id = new global::System.Data.DataColumn("CoachConversation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachConversation_Id);
                this.columnDirection.AllowDBNull = false;
                this.columnDirection.Namespace = "";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnmemberID.Namespace = "";
                this.columntimeStamp.Namespace = "";
                this.columnCoachNote_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow NewCoachNoteRow() {
                return ((CoachNoteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoachNoteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoachNoteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoachNoteRowChanged != null)) {
                    this.CoachNoteRowChanged(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoachNoteRowChanging != null)) {
                    this.CoachNoteRowChanging(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoachNoteRowDeleted != null)) {
                    this.CoachNoteRowDeleted(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoachNoteRowDeleting != null)) {
                    this.CoachNoteRowDeleting(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoachNoteRow(CoachNoteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoachNoteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StoryProjectRow : global::System.Data.DataRow {
            
            private StoryProjectDataTable tableStoryProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryProjectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStoryProject = ((StoryProjectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string version {
                get {
                    return ((string)(this[this.tableStoryProject.versionColumn]));
                }
                set {
                    this[this.tableStoryProject.versionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    return ((string)(this[this.tableStoryProject.ProjectNameColumn]));
                }
                set {
                    this[this.tableStoryProject.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HgRepoUrlHost {
                get {
                    try {
                        return ((string)(this[this.tableStoryProject.HgRepoUrlHostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HgRepoUrlHost\' in table \'StoryProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryProject.HgRepoUrlHostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PanoramaFrontMatter {
                get {
                    try {
                        return ((string)(this[this.tableStoryProject.PanoramaFrontMatterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PanoramaFrontMatter\' in table \'StoryProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryProject.PanoramaFrontMatterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StoryProject_Id {
                get {
                    return ((int)(this[this.tableStoryProject.StoryProject_IdColumn]));
                }
                set {
                    this[this.tableStoryProject.StoryProject_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHgRepoUrlHostNull() {
                return this.IsNull(this.tableStoryProject.HgRepoUrlHostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHgRepoUrlHostNull() {
                this[this.tableStoryProject.HgRepoUrlHostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPanoramaFrontMatterNull() {
                return this.IsNull(this.tableStoryProject.PanoramaFrontMatterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPanoramaFrontMatterNull() {
                this[this.tableStoryProject.PanoramaFrontMatterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow[] GetMembersRows() {
                if ((this.Table.ChildRelations["StoryProject_Members"] == null)) {
                    return new MembersRow[0];
                }
                else {
                    return ((MembersRow[])(base.GetChildRows(this.Table.ChildRelations["StoryProject_Members"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow[] GetLanguagesRows() {
                if ((this.Table.ChildRelations["StoryProject_Languages"] == null)) {
                    return new LanguagesRow[0];
                }
                else {
                    return ((LanguagesRow[])(base.GetChildRows(this.Table.ChildRelations["StoryProject_Languages"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationsRow[] GetAdaptItConfigurationsRows() {
                if ((this.Table.ChildRelations["StoryProject_AdaptItConfigurations"] == null)) {
                    return new AdaptItConfigurationsRow[0];
                }
                else {
                    return ((AdaptItConfigurationsRow[])(base.GetChildRows(this.Table.ChildRelations["StoryProject_AdaptItConfigurations"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNotesRow[] GetLnCNotesRows() {
                if ((this.Table.ChildRelations["StoryProject_LnCNotes"] == null)) {
                    return new LnCNotesRow[0];
                }
                else {
                    return ((LnCNotesRow[])(base.GetChildRows(this.Table.ChildRelations["StoryProject_LnCNotes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow[] GetstoriesRows() {
                if ((this.Table.ChildRelations["StoryProject_stories"] == null)) {
                    return new storiesRow[0];
                }
                else {
                    return ((storiesRow[])(base.GetChildRows(this.Table.ChildRelations["StoryProject_stories"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MembersRow : global::System.Data.DataRow {
            
            private MembersDataTable tableMembers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMembers = ((MembersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasOutsideEnglishBTer {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.HasOutsideEnglishBTerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasOutsideEnglishBTer\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.HasOutsideEnglishBTerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasFirstPassMentor {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.HasFirstPassMentorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasFirstPassMentor\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.HasFirstPassMentorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasIndependentConsultant {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.HasIndependentConsultantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasIndependentConsultant\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.HasIndependentConsultantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Members_Id {
                get {
                    return ((int)(this[this.tableMembers.Members_IdColumn]));
                }
                set {
                    this[this.tableMembers.Members_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StoryProject_Id {
                get {
                    try {
                        return ((int)(this[this.tableMembers.StoryProject_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryProject_Id\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.StoryProject_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow StoryProjectRow {
                get {
                    return ((StoryProjectRow)(this.GetParentRow(this.Table.ParentRelations["StoryProject_Members"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StoryProject_Members"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasOutsideEnglishBTerNull() {
                return this.IsNull(this.tableMembers.HasOutsideEnglishBTerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasOutsideEnglishBTerNull() {
                this[this.tableMembers.HasOutsideEnglishBTerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasFirstPassMentorNull() {
                return this.IsNull(this.tableMembers.HasFirstPassMentorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasFirstPassMentorNull() {
                this[this.tableMembers.HasFirstPassMentorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasIndependentConsultantNull() {
                return this.IsNull(this.tableMembers.HasIndependentConsultantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasIndependentConsultantNull() {
                this[this.tableMembers.HasIndependentConsultantColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryProject_IdNull() {
                return this.IsNull(this.tableMembers.StoryProject_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryProject_IdNull() {
                this[this.tableMembers.StoryProject_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow[] GetMemberRows() {
                if ((this.Table.ChildRelations["Members_Member"] == null)) {
                    return new MemberRow[0];
                }
                else {
                    return ((MemberRow[])(base.GetChildRows(this.Table.ChildRelations["Members_Member"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MemberRow : global::System.Data.DataRow {
            
            private MemberDataTable tableMember;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MemberRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMember = ((MemberDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableMember.nameColumn]));
                }
                set {
                    this[this.tableMember.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberType {
                get {
                    return ((string)(this[this.tableMember.memberTypeColumn]));
                }
                set {
                    this[this.tableMember.memberTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberKey {
                get {
                    return ((string)(this[this.tableMember.memberKeyColumn]));
                }
                set {
                    this[this.tableMember.memberKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableMember.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'email\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string altPhone {
                get {
                    try {
                        return ((string)(this[this.tableMember.altPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'altPhone\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.altPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string phone {
                get {
                    try {
                        return ((string)(this[this.tableMember.phoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phone\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.phoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bioData {
                get {
                    try {
                        return ((string)(this[this.tableMember.bioDataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bioData\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.bioDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string skypeID {
                get {
                    try {
                        return ((string)(this[this.tableMember.skypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'skypeID\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.skypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string teamViewerID {
                get {
                    try {
                        return ((string)(this[this.tableMember.teamViewerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'teamViewerID\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.teamViewerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverrideVernacularKeyboard {
                get {
                    try {
                        return ((string)(this[this.tableMember.OverrideVernacularKeyboardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideVernacularKeyboard\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideVernacularKeyboardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverrideNationalBTKeyboard {
                get {
                    try {
                        return ((string)(this[this.tableMember.OverrideNationalBTKeyboardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideNationalBTKeyboard\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideNationalBTKeyboardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverrideInternationalBTKeyboard {
                get {
                    try {
                        return ((string)(this[this.tableMember.OverrideInternationalBTKeyboardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideInternationalBTKeyboard\' in table \'Member\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideInternationalBTKeyboardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverrideFreeTranslationKeyboard {
                get {
                    try {
                        return ((string)(this[this.tableMember.OverrideFreeTranslationKeyboardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideFreeTranslationKeyboard\' in table \'Member\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideFreeTranslationKeyboardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverrideFontNameVernacular {
                get {
                    try {
                        return ((string)(this[this.tableMember.OverrideFontNameVernacularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideFontNameVernacular\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideFontNameVernacularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float OverrideFontSizeVernacular {
                get {
                    try {
                        return ((float)(this[this.tableMember.OverrideFontSizeVernacularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideFontSizeVernacular\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideFontSizeVernacularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OverrideRtlVernacular {
                get {
                    try {
                        return ((bool)(this[this.tableMember.OverrideRtlVernacularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideRtlVernacular\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideRtlVernacularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverrideFontNameNationalBT {
                get {
                    try {
                        return ((string)(this[this.tableMember.OverrideFontNameNationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideFontNameNationalBT\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideFontNameNationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float OverrideFontSizeNationalBT {
                get {
                    try {
                        return ((float)(this[this.tableMember.OverrideFontSizeNationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideFontSizeNationalBT\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideFontSizeNationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OverrideRtlNationalBT {
                get {
                    try {
                        return ((bool)(this[this.tableMember.OverrideRtlNationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideRtlNationalBT\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideRtlNationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverrideFontNameInternationalBT {
                get {
                    try {
                        return ((string)(this[this.tableMember.OverrideFontNameInternationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideFontNameInternationalBT\' in table \'Member\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideFontNameInternationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float OverrideFontSizeInternationalBT {
                get {
                    try {
                        return ((float)(this[this.tableMember.OverrideFontSizeInternationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideFontSizeInternationalBT\' in table \'Member\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideFontSizeInternationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OverrideRtlInternationalBT {
                get {
                    try {
                        return ((bool)(this[this.tableMember.OverrideRtlInternationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideRtlInternationalBT\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideRtlInternationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverrideFontNameFreeTranslation {
                get {
                    try {
                        return ((string)(this[this.tableMember.OverrideFontNameFreeTranslationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideFontNameFreeTranslation\' in table \'Member\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideFontNameFreeTranslationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float OverrideFontSizeFreeTranslation {
                get {
                    try {
                        return ((float)(this[this.tableMember.OverrideFontSizeFreeTranslationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideFontSizeFreeTranslation\' in table \'Member\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideFontSizeFreeTranslationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OverrideRtlFreeTranslation {
                get {
                    try {
                        return ((bool)(this[this.tableMember.OverrideRtlFreeTranslationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideRtlFreeTranslation\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideRtlFreeTranslationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HgUsername {
                get {
                    try {
                        return ((string)(this[this.tableMember.HgUsernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HgUsername\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.HgUsernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HgPassword {
                get {
                    try {
                        return ((string)(this[this.tableMember.HgPasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HgPassword\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.HgPasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransliteratorVernacular {
                get {
                    try {
                        return ((string)(this[this.tableMember.TransliteratorVernacularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransliteratorVernacular\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.TransliteratorVernacularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TransliteratorDirectionForwardVernacular {
                get {
                    try {
                        return ((bool)(this[this.tableMember.TransliteratorDirectionForwardVernacularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransliteratorDirectionForwardVernacular\' in table \'Member\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.TransliteratorDirectionForwardVernacularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransliteratorNationalBT {
                get {
                    try {
                        return ((string)(this[this.tableMember.TransliteratorNationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransliteratorNationalBT\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.TransliteratorNationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TransliteratorDirectionForwardNationalBT {
                get {
                    try {
                        return ((bool)(this[this.tableMember.TransliteratorDirectionForwardNationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransliteratorDirectionForwardNationalBT\' in table \'Member\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.TransliteratorDirectionForwardNationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransliteratorInternationalBT {
                get {
                    try {
                        return ((string)(this[this.tableMember.TransliteratorInternationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransliteratorInternationalBT\' in table \'Member\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableMember.TransliteratorInternationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TransliteratorDirectionForwardInternationalBT {
                get {
                    try {
                        return ((bool)(this[this.tableMember.TransliteratorDirectionForwardInternationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransliteratorDirectionForwardInternationalBT\' in table \'Me" +
                                "mber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.TransliteratorDirectionForwardInternationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransliteratorFreeTranslation {
                get {
                    try {
                        return ((string)(this[this.tableMember.TransliteratorFreeTranslationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransliteratorFreeTranslation\' in table \'Member\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableMember.TransliteratorFreeTranslationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TransliteratorDirectionForwardFreeTranslation {
                get {
                    try {
                        return ((bool)(this[this.tableMember.TransliteratorDirectionForwardFreeTranslationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransliteratorDirectionForwardFreeTranslation\' in table \'Me" +
                                "mber\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.TransliteratorDirectionForwardFreeTranslationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefaultTasksAllowed {
                get {
                    try {
                        return ((string)(this[this.tableMember.DefaultTasksAllowedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefaultTasksAllowed\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.DefaultTasksAllowedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefaultTasksRequired {
                get {
                    try {
                        return ((string)(this[this.tableMember.DefaultTasksRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefaultTasksRequired\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.DefaultTasksRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Members_Id {
                get {
                    try {
                        return ((int)(this[this.tableMember.Members_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Members_Id\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.Members_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow MembersRow {
                get {
                    return ((MembersRow)(this.GetParentRow(this.Table.ParentRelations["Members_Member"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Members_Member"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.tableMember.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.tableMember.emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaltPhoneNull() {
                return this.IsNull(this.tableMember.altPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaltPhoneNull() {
                this[this.tableMember.altPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphoneNull() {
                return this.IsNull(this.tableMember.phoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphoneNull() {
                this[this.tableMember.phoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbioDataNull() {
                return this.IsNull(this.tableMember.bioDataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbioDataNull() {
                this[this.tableMember.bioDataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsskypeIDNull() {
                return this.IsNull(this.tableMember.skypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetskypeIDNull() {
                this[this.tableMember.skypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsteamViewerIDNull() {
                return this.IsNull(this.tableMember.teamViewerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetteamViewerIDNull() {
                this[this.tableMember.teamViewerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideVernacularKeyboardNull() {
                return this.IsNull(this.tableMember.OverrideVernacularKeyboardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideVernacularKeyboardNull() {
                this[this.tableMember.OverrideVernacularKeyboardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideNationalBTKeyboardNull() {
                return this.IsNull(this.tableMember.OverrideNationalBTKeyboardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideNationalBTKeyboardNull() {
                this[this.tableMember.OverrideNationalBTKeyboardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideInternationalBTKeyboardNull() {
                return this.IsNull(this.tableMember.OverrideInternationalBTKeyboardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideInternationalBTKeyboardNull() {
                this[this.tableMember.OverrideInternationalBTKeyboardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideFreeTranslationKeyboardNull() {
                return this.IsNull(this.tableMember.OverrideFreeTranslationKeyboardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideFreeTranslationKeyboardNull() {
                this[this.tableMember.OverrideFreeTranslationKeyboardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideFontNameVernacularNull() {
                return this.IsNull(this.tableMember.OverrideFontNameVernacularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideFontNameVernacularNull() {
                this[this.tableMember.OverrideFontNameVernacularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideFontSizeVernacularNull() {
                return this.IsNull(this.tableMember.OverrideFontSizeVernacularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideFontSizeVernacularNull() {
                this[this.tableMember.OverrideFontSizeVernacularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideRtlVernacularNull() {
                return this.IsNull(this.tableMember.OverrideRtlVernacularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideRtlVernacularNull() {
                this[this.tableMember.OverrideRtlVernacularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideFontNameNationalBTNull() {
                return this.IsNull(this.tableMember.OverrideFontNameNationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideFontNameNationalBTNull() {
                this[this.tableMember.OverrideFontNameNationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideFontSizeNationalBTNull() {
                return this.IsNull(this.tableMember.OverrideFontSizeNationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideFontSizeNationalBTNull() {
                this[this.tableMember.OverrideFontSizeNationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideRtlNationalBTNull() {
                return this.IsNull(this.tableMember.OverrideRtlNationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideRtlNationalBTNull() {
                this[this.tableMember.OverrideRtlNationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideFontNameInternationalBTNull() {
                return this.IsNull(this.tableMember.OverrideFontNameInternationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideFontNameInternationalBTNull() {
                this[this.tableMember.OverrideFontNameInternationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideFontSizeInternationalBTNull() {
                return this.IsNull(this.tableMember.OverrideFontSizeInternationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideFontSizeInternationalBTNull() {
                this[this.tableMember.OverrideFontSizeInternationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideRtlInternationalBTNull() {
                return this.IsNull(this.tableMember.OverrideRtlInternationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideRtlInternationalBTNull() {
                this[this.tableMember.OverrideRtlInternationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideFontNameFreeTranslationNull() {
                return this.IsNull(this.tableMember.OverrideFontNameFreeTranslationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideFontNameFreeTranslationNull() {
                this[this.tableMember.OverrideFontNameFreeTranslationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideFontSizeFreeTranslationNull() {
                return this.IsNull(this.tableMember.OverrideFontSizeFreeTranslationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideFontSizeFreeTranslationNull() {
                this[this.tableMember.OverrideFontSizeFreeTranslationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideRtlFreeTranslationNull() {
                return this.IsNull(this.tableMember.OverrideRtlFreeTranslationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideRtlFreeTranslationNull() {
                this[this.tableMember.OverrideRtlFreeTranslationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHgUsernameNull() {
                return this.IsNull(this.tableMember.HgUsernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHgUsernameNull() {
                this[this.tableMember.HgUsernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHgPasswordNull() {
                return this.IsNull(this.tableMember.HgPasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHgPasswordNull() {
                this[this.tableMember.HgPasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransliteratorVernacularNull() {
                return this.IsNull(this.tableMember.TransliteratorVernacularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransliteratorVernacularNull() {
                this[this.tableMember.TransliteratorVernacularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransliteratorDirectionForwardVernacularNull() {
                return this.IsNull(this.tableMember.TransliteratorDirectionForwardVernacularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransliteratorDirectionForwardVernacularNull() {
                this[this.tableMember.TransliteratorDirectionForwardVernacularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransliteratorNationalBTNull() {
                return this.IsNull(this.tableMember.TransliteratorNationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransliteratorNationalBTNull() {
                this[this.tableMember.TransliteratorNationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransliteratorDirectionForwardNationalBTNull() {
                return this.IsNull(this.tableMember.TransliteratorDirectionForwardNationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransliteratorDirectionForwardNationalBTNull() {
                this[this.tableMember.TransliteratorDirectionForwardNationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransliteratorInternationalBTNull() {
                return this.IsNull(this.tableMember.TransliteratorInternationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransliteratorInternationalBTNull() {
                this[this.tableMember.TransliteratorInternationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransliteratorDirectionForwardInternationalBTNull() {
                return this.IsNull(this.tableMember.TransliteratorDirectionForwardInternationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransliteratorDirectionForwardInternationalBTNull() {
                this[this.tableMember.TransliteratorDirectionForwardInternationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransliteratorFreeTranslationNull() {
                return this.IsNull(this.tableMember.TransliteratorFreeTranslationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransliteratorFreeTranslationNull() {
                this[this.tableMember.TransliteratorFreeTranslationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransliteratorDirectionForwardFreeTranslationNull() {
                return this.IsNull(this.tableMember.TransliteratorDirectionForwardFreeTranslationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransliteratorDirectionForwardFreeTranslationNull() {
                this[this.tableMember.TransliteratorDirectionForwardFreeTranslationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefaultTasksAllowedNull() {
                return this.IsNull(this.tableMember.DefaultTasksAllowedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefaultTasksAllowedNull() {
                this[this.tableMember.DefaultTasksAllowedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefaultTasksRequiredNull() {
                return this.IsNull(this.tableMember.DefaultTasksRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefaultTasksRequiredNull() {
                this[this.tableMember.DefaultTasksRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMembers_IdNull() {
                return this.IsNull(this.tableMember.Members_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMembers_IdNull() {
                this[this.tableMember.Members_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LanguagesRow : global::System.Data.DataRow {
            
            private LanguagesDataTable tableLanguages;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LanguagesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLanguages = ((LanguagesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UseRetellingVernacular {
                get {
                    try {
                        return ((bool)(this[this.tableLanguages.UseRetellingVernacularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseRetellingVernacular\' in table \'Languages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguages.UseRetellingVernacularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UseRetellingNationalBT {
                get {
                    try {
                        return ((bool)(this[this.tableLanguages.UseRetellingNationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseRetellingNationalBT\' in table \'Languages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguages.UseRetellingNationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UseRetellingInternationalBT {
                get {
                    try {
                        return ((bool)(this[this.tableLanguages.UseRetellingInternationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseRetellingInternationalBT\' in table \'Languages\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableLanguages.UseRetellingInternationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UseTestQuestionVernacular {
                get {
                    try {
                        return ((bool)(this[this.tableLanguages.UseTestQuestionVernacularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseTestQuestionVernacular\' in table \'Languages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguages.UseTestQuestionVernacularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UseTestQuestionNationalBT {
                get {
                    try {
                        return ((bool)(this[this.tableLanguages.UseTestQuestionNationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseTestQuestionNationalBT\' in table \'Languages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguages.UseTestQuestionNationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UseTestQuestionInternationalBT {
                get {
                    try {
                        return ((bool)(this[this.tableLanguages.UseTestQuestionInternationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseTestQuestionInternationalBT\' in table \'Languages\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableLanguages.UseTestQuestionInternationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UseAnswerVernacular {
                get {
                    try {
                        return ((bool)(this[this.tableLanguages.UseAnswerVernacularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAnswerVernacular\' in table \'Languages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguages.UseAnswerVernacularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UseAnswerNationalBT {
                get {
                    try {
                        return ((bool)(this[this.tableLanguages.UseAnswerNationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAnswerNationalBT\' in table \'Languages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguages.UseAnswerNationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UseAnswerInternationalBT {
                get {
                    try {
                        return ((bool)(this[this.tableLanguages.UseAnswerInternationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAnswerInternationalBT\' in table \'Languages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguages.UseAnswerInternationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Languages_Id {
                get {
                    return ((int)(this[this.tableLanguages.Languages_IdColumn]));
                }
                set {
                    this[this.tableLanguages.Languages_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StoryProject_Id {
                get {
                    try {
                        return ((int)(this[this.tableLanguages.StoryProject_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryProject_Id\' in table \'Languages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguages.StoryProject_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow StoryProjectRow {
                get {
                    return ((StoryProjectRow)(this.GetParentRow(this.Table.ParentRelations["StoryProject_Languages"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StoryProject_Languages"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseRetellingVernacularNull() {
                return this.IsNull(this.tableLanguages.UseRetellingVernacularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseRetellingVernacularNull() {
                this[this.tableLanguages.UseRetellingVernacularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseRetellingNationalBTNull() {
                return this.IsNull(this.tableLanguages.UseRetellingNationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseRetellingNationalBTNull() {
                this[this.tableLanguages.UseRetellingNationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseRetellingInternationalBTNull() {
                return this.IsNull(this.tableLanguages.UseRetellingInternationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseRetellingInternationalBTNull() {
                this[this.tableLanguages.UseRetellingInternationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseTestQuestionVernacularNull() {
                return this.IsNull(this.tableLanguages.UseTestQuestionVernacularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseTestQuestionVernacularNull() {
                this[this.tableLanguages.UseTestQuestionVernacularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseTestQuestionNationalBTNull() {
                return this.IsNull(this.tableLanguages.UseTestQuestionNationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseTestQuestionNationalBTNull() {
                this[this.tableLanguages.UseTestQuestionNationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseTestQuestionInternationalBTNull() {
                return this.IsNull(this.tableLanguages.UseTestQuestionInternationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseTestQuestionInternationalBTNull() {
                this[this.tableLanguages.UseTestQuestionInternationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAnswerVernacularNull() {
                return this.IsNull(this.tableLanguages.UseAnswerVernacularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAnswerVernacularNull() {
                this[this.tableLanguages.UseAnswerVernacularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAnswerNationalBTNull() {
                return this.IsNull(this.tableLanguages.UseAnswerNationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAnswerNationalBTNull() {
                this[this.tableLanguages.UseAnswerNationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAnswerInternationalBTNull() {
                return this.IsNull(this.tableLanguages.UseAnswerInternationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAnswerInternationalBTNull() {
                this[this.tableLanguages.UseAnswerInternationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryProject_IdNull() {
                return this.IsNull(this.tableLanguages.StoryProject_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryProject_IdNull() {
                this[this.tableLanguages.StoryProject_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageInfoRow[] GetLanguageInfoRows() {
                if ((this.Table.ChildRelations["Languages_LanguageInfo"] == null)) {
                    return new LanguageInfoRow[0];
                }
                else {
                    return ((LanguageInfoRow[])(base.GetChildRows(this.Table.ChildRelations["Languages_LanguageInfo"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LanguageInfoRow : global::System.Data.DataRow {
            
            private LanguageInfoDataTable tableLanguageInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LanguageInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLanguageInfo = ((LanguageInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tableLanguageInfo.langColumn]));
                }
                set {
                    this[this.tableLanguageInfo.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableLanguageInfo.nameColumn]));
                }
                set {
                    this[this.tableLanguageInfo.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string code {
                get {
                    return ((string)(this[this.tableLanguageInfo.codeColumn]));
                }
                set {
                    this[this.tableLanguageInfo.codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontName {
                get {
                    return ((string)(this[this.tableLanguageInfo.FontNameColumn]));
                }
                set {
                    this[this.tableLanguageInfo.FontNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FontSize {
                get {
                    return ((float)(this[this.tableLanguageInfo.FontSizeColumn]));
                }
                set {
                    this[this.tableLanguageInfo.FontSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontColor {
                get {
                    return ((string)(this[this.tableLanguageInfo.FontColorColumn]));
                }
                set {
                    this[this.tableLanguageInfo.FontColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SentenceFinalPunct {
                get {
                    return ((string)(this[this.tableLanguageInfo.SentenceFinalPunctColumn]));
                }
                set {
                    this[this.tableLanguageInfo.SentenceFinalPunctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Keyboard {
                get {
                    try {
                        return ((string)(this[this.tableLanguageInfo.KeyboardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Keyboard\' in table \'LanguageInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguageInfo.KeyboardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RTL {
                get {
                    try {
                        return ((bool)(this[this.tableLanguageInfo.RTLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RTL\' in table \'LanguageInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguageInfo.RTLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Languages_Id {
                get {
                    try {
                        return ((int)(this[this.tableLanguageInfo.Languages_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Languages_Id\' in table \'LanguageInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguageInfo.Languages_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow LanguagesRow {
                get {
                    return ((LanguagesRow)(this.GetParentRow(this.Table.ParentRelations["Languages_LanguageInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Languages_LanguageInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyboardNull() {
                return this.IsNull(this.tableLanguageInfo.KeyboardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyboardNull() {
                this[this.tableLanguageInfo.KeyboardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRTLNull() {
                return this.IsNull(this.tableLanguageInfo.RTLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRTLNull() {
                this[this.tableLanguageInfo.RTLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLanguages_IdNull() {
                return this.IsNull(this.tableLanguageInfo.Languages_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLanguages_IdNull() {
                this[this.tableLanguageInfo.Languages_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AdaptItConfigurationsRow : global::System.Data.DataRow {
            
            private AdaptItConfigurationsDataTable tableAdaptItConfigurations;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdaptItConfigurationsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdaptItConfigurations = ((AdaptItConfigurationsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdaptItConfigurations_Id {
                get {
                    return ((int)(this[this.tableAdaptItConfigurations.AdaptItConfigurations_IdColumn]));
                }
                set {
                    this[this.tableAdaptItConfigurations.AdaptItConfigurations_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StoryProject_Id {
                get {
                    try {
                        return ((int)(this[this.tableAdaptItConfigurations.StoryProject_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryProject_Id\' in table \'AdaptItConfigurations\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableAdaptItConfigurations.StoryProject_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow StoryProjectRow {
                get {
                    return ((StoryProjectRow)(this.GetParentRow(this.Table.ParentRelations["StoryProject_AdaptItConfigurations"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StoryProject_AdaptItConfigurations"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryProject_IdNull() {
                return this.IsNull(this.tableAdaptItConfigurations.StoryProject_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryProject_IdNull() {
                this[this.tableAdaptItConfigurations.StoryProject_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationRow[] GetAdaptItConfigurationRows() {
                if ((this.Table.ChildRelations["AdaptItConfigurations_AdaptItConfiguration"] == null)) {
                    return new AdaptItConfigurationRow[0];
                }
                else {
                    return ((AdaptItConfigurationRow[])(base.GetChildRows(this.Table.ChildRelations["AdaptItConfigurations_AdaptItConfiguration"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AdaptItConfigurationRow : global::System.Data.DataRow {
            
            private AdaptItConfigurationDataTable tableAdaptItConfiguration;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdaptItConfigurationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdaptItConfiguration = ((AdaptItConfigurationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectType {
                get {
                    return ((string)(this[this.tableAdaptItConfiguration.ProjectTypeColumn]));
                }
                set {
                    this[this.tableAdaptItConfiguration.ProjectTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BtDirection {
                get {
                    return ((string)(this[this.tableAdaptItConfiguration.BtDirectionColumn]));
                }
                set {
                    this[this.tableAdaptItConfiguration.BtDirectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConverterName {
                get {
                    return ((string)(this[this.tableAdaptItConfiguration.ConverterNameColumn]));
                }
                set {
                    this[this.tableAdaptItConfiguration.ConverterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectFolderName {
                get {
                    try {
                        return ((string)(this[this.tableAdaptItConfiguration.ProjectFolderNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectFolderName\' in table \'AdaptItConfiguration\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableAdaptItConfiguration.ProjectFolderNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepoProjectName {
                get {
                    try {
                        return ((string)(this[this.tableAdaptItConfiguration.RepoProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RepoProjectName\' in table \'AdaptItConfiguration\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableAdaptItConfiguration.RepoProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepositoryServer {
                get {
                    try {
                        return ((string)(this[this.tableAdaptItConfiguration.RepositoryServerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RepositoryServer\' in table \'AdaptItConfiguration\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableAdaptItConfiguration.RepositoryServerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NetworkRepositoryPath {
                get {
                    try {
                        return ((string)(this[this.tableAdaptItConfiguration.NetworkRepositoryPathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetworkRepositoryPath\' in table \'AdaptItConfiguration\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableAdaptItConfiguration.NetworkRepositoryPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdaptItConfiguration_text {
                get {
                    try {
                        return ((string)(this[this.tableAdaptItConfiguration.AdaptItConfiguration_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdaptItConfiguration_text\' in table \'AdaptItConfiguration\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdaptItConfiguration.AdaptItConfiguration_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdaptItConfigurations_Id {
                get {
                    try {
                        return ((int)(this[this.tableAdaptItConfiguration.AdaptItConfigurations_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdaptItConfigurations_Id\' in table \'AdaptItConfiguration\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdaptItConfiguration.AdaptItConfigurations_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationsRow AdaptItConfigurationsRow {
                get {
                    return ((AdaptItConfigurationsRow)(this.GetParentRow(this.Table.ParentRelations["AdaptItConfigurations_AdaptItConfiguration"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AdaptItConfigurations_AdaptItConfiguration"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectFolderNameNull() {
                return this.IsNull(this.tableAdaptItConfiguration.ProjectFolderNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectFolderNameNull() {
                this[this.tableAdaptItConfiguration.ProjectFolderNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepoProjectNameNull() {
                return this.IsNull(this.tableAdaptItConfiguration.RepoProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepoProjectNameNull() {
                this[this.tableAdaptItConfiguration.RepoProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepositoryServerNull() {
                return this.IsNull(this.tableAdaptItConfiguration.RepositoryServerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepositoryServerNull() {
                this[this.tableAdaptItConfiguration.RepositoryServerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetworkRepositoryPathNull() {
                return this.IsNull(this.tableAdaptItConfiguration.NetworkRepositoryPathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetworkRepositoryPathNull() {
                this[this.tableAdaptItConfiguration.NetworkRepositoryPathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdaptItConfiguration_textNull() {
                return this.IsNull(this.tableAdaptItConfiguration.AdaptItConfiguration_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdaptItConfiguration_textNull() {
                this[this.tableAdaptItConfiguration.AdaptItConfiguration_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdaptItConfigurations_IdNull() {
                return this.IsNull(this.tableAdaptItConfiguration.AdaptItConfigurations_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdaptItConfigurations_IdNull() {
                this[this.tableAdaptItConfiguration.AdaptItConfigurations_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LnCNotesRow : global::System.Data.DataRow {
            
            private LnCNotesDataTable tableLnCNotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LnCNotesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLnCNotes = ((LnCNotesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LnCNotes_Id {
                get {
                    return ((int)(this[this.tableLnCNotes.LnCNotes_IdColumn]));
                }
                set {
                    this[this.tableLnCNotes.LnCNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StoryProject_Id {
                get {
                    try {
                        return ((int)(this[this.tableLnCNotes.StoryProject_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryProject_Id\' in table \'LnCNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLnCNotes.StoryProject_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow StoryProjectRow {
                get {
                    return ((StoryProjectRow)(this.GetParentRow(this.Table.ParentRelations["StoryProject_LnCNotes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StoryProject_LnCNotes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryProject_IdNull() {
                return this.IsNull(this.tableLnCNotes.StoryProject_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryProject_IdNull() {
                this[this.tableLnCNotes.StoryProject_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNoteRow[] GetLnCNoteRows() {
                if ((this.Table.ChildRelations["LnCNotes_LnCNote"] == null)) {
                    return new LnCNoteRow[0];
                }
                else {
                    return ((LnCNoteRow[])(base.GetChildRows(this.Table.ChildRelations["LnCNotes_LnCNote"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LnCNoteRow : global::System.Data.DataRow {
            
            private LnCNoteDataTable tableLnCNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LnCNoteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLnCNote = ((LnCNoteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableLnCNote.guidColumn]));
                }
                set {
                    this[this.tableLnCNote.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VernacularRendering {
                get {
                    try {
                        return ((string)(this[this.tableLnCNote.VernacularRenderingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VernacularRendering\' in table \'LnCNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLnCNote.VernacularRenderingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NationalBTRendering {
                get {
                    try {
                        return ((string)(this[this.tableLnCNote.NationalBTRenderingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NationalBTRendering\' in table \'LnCNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLnCNote.NationalBTRenderingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InternationalBTRendering {
                get {
                    try {
                        return ((string)(this[this.tableLnCNote.InternationalBTRenderingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InternationalBTRendering\' in table \'LnCNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLnCNote.InternationalBTRenderingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyTermIds {
                get {
                    try {
                        return ((string)(this[this.tableLnCNote.KeyTermIdsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyTermIds\' in table \'LnCNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLnCNote.KeyTermIdsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LnCNote_text {
                get {
                    try {
                        return ((string)(this[this.tableLnCNote.LnCNote_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LnCNote_text\' in table \'LnCNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLnCNote.LnCNote_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LnCNotes_Id {
                get {
                    try {
                        return ((int)(this[this.tableLnCNote.LnCNotes_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LnCNotes_Id\' in table \'LnCNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLnCNote.LnCNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNotesRow LnCNotesRow {
                get {
                    return ((LnCNotesRow)(this.GetParentRow(this.Table.ParentRelations["LnCNotes_LnCNote"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LnCNotes_LnCNote"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVernacularRenderingNull() {
                return this.IsNull(this.tableLnCNote.VernacularRenderingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVernacularRenderingNull() {
                this[this.tableLnCNote.VernacularRenderingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNationalBTRenderingNull() {
                return this.IsNull(this.tableLnCNote.NationalBTRenderingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNationalBTRenderingNull() {
                this[this.tableLnCNote.NationalBTRenderingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInternationalBTRenderingNull() {
                return this.IsNull(this.tableLnCNote.InternationalBTRenderingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInternationalBTRenderingNull() {
                this[this.tableLnCNote.InternationalBTRenderingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyTermIdsNull() {
                return this.IsNull(this.tableLnCNote.KeyTermIdsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyTermIdsNull() {
                this[this.tableLnCNote.KeyTermIdsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLnCNote_textNull() {
                return this.IsNull(this.tableLnCNote.LnCNote_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLnCNote_textNull() {
                this[this.tableLnCNote.LnCNote_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLnCNotes_IdNull() {
                return this.IsNull(this.tableLnCNote.LnCNotes_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLnCNotes_IdNull() {
                this[this.tableLnCNote.LnCNotes_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class storiesRow : global::System.Data.DataRow {
            
            private storiesDataTable tablestories;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestories = ((storiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetName {
                get {
                    return ((string)(this[this.tablestories.SetNameColumn]));
                }
                set {
                    this[this.tablestories.SetNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stories_Id {
                get {
                    return ((int)(this[this.tablestories.stories_IdColumn]));
                }
                set {
                    this[this.tablestories.stories_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StoryProject_Id {
                get {
                    try {
                        return ((int)(this[this.tablestories.StoryProject_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryProject_Id\' in table \'stories\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestories.StoryProject_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow StoryProjectRow {
                get {
                    return ((StoryProjectRow)(this.GetParentRow(this.Table.ParentRelations["StoryProject_stories"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StoryProject_stories"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryProject_IdNull() {
                return this.IsNull(this.tablestories.StoryProject_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryProject_IdNull() {
                this[this.tablestories.StoryProject_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow[] GetstoryRows() {
                if ((this.Table.ChildRelations["stories_story"] == null)) {
                    return new storyRow[0];
                }
                else {
                    return ((storyRow[])(base.GetChildRows(this.Table.ChildRelations["stories_story"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class storyRow : global::System.Data.DataRow {
            
            private storyDataTable tablestory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestory = ((storyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tablestory.nameColumn]));
                }
                set {
                    this[this.tablestory.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stage {
                get {
                    return ((string)(this[this.tablestory.stageColumn]));
                }
                set {
                    this[this.tablestory.stageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TasksAllowedPf {
                get {
                    try {
                        return ((string)(this[this.tablestory.TasksAllowedPfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TasksAllowedPf\' in table \'story\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestory.TasksAllowedPfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TasksRequiredPf {
                get {
                    try {
                        return ((string)(this[this.tablestory.TasksRequiredPfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TasksRequiredPf\' in table \'story\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestory.TasksRequiredPfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TasksAllowedCit {
                get {
                    try {
                        return ((string)(this[this.tablestory.TasksAllowedCitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TasksAllowedCit\' in table \'story\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestory.TasksAllowedCitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TasksRequiredCit {
                get {
                    try {
                        return ((string)(this[this.tablestory.TasksRequiredCitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TasksRequiredCit\' in table \'story\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestory.TasksRequiredCitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountRetellingsTests {
                get {
                    try {
                        return ((int)(this[this.tablestory.CountRetellingsTestsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountRetellingsTests\' in table \'story\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestory.CountRetellingsTestsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountTestingQuestionTests {
                get {
                    try {
                        return ((int)(this[this.tablestory.CountTestingQuestionTestsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountTestingQuestionTests\' in table \'story\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestory.CountTestingQuestionTestsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tablestory.guidColumn]));
                }
                set {
                    this[this.tablestory.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime stageDateTimeStamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablestory.stageDateTimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stageDateTimeStamp\' in table \'story\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestory.stageDateTimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int story_Id {
                get {
                    return ((int)(this[this.tablestory.story_IdColumn]));
                }
                set {
                    this[this.tablestory.story_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stories_Id {
                get {
                    try {
                        return ((int)(this[this.tablestory.stories_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stories_Id\' in table \'story\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestory.stories_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow storiesRow {
                get {
                    return ((storiesRow)(this.GetParentRow(this.Table.ParentRelations["stories_story"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["stories_story"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTasksAllowedPfNull() {
                return this.IsNull(this.tablestory.TasksAllowedPfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTasksAllowedPfNull() {
                this[this.tablestory.TasksAllowedPfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTasksRequiredPfNull() {
                return this.IsNull(this.tablestory.TasksRequiredPfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTasksRequiredPfNull() {
                this[this.tablestory.TasksRequiredPfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTasksAllowedCitNull() {
                return this.IsNull(this.tablestory.TasksAllowedCitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTasksAllowedCitNull() {
                this[this.tablestory.TasksAllowedCitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTasksRequiredCitNull() {
                return this.IsNull(this.tablestory.TasksRequiredCitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTasksRequiredCitNull() {
                this[this.tablestory.TasksRequiredCitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountRetellingsTestsNull() {
                return this.IsNull(this.tablestory.CountRetellingsTestsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountRetellingsTestsNull() {
                this[this.tablestory.CountRetellingsTestsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountTestingQuestionTestsNull() {
                return this.IsNull(this.tablestory.CountTestingQuestionTestsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountTestingQuestionTestsNull() {
                this[this.tablestory.CountTestingQuestionTestsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstageDateTimeStampNull() {
                return this.IsNull(this.tablestory.stageDateTimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstageDateTimeStampNull() {
                this[this.tablestory.stageDateTimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstories_IdNull() {
                return this.IsNull(this.tablestory.stories_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstories_IdNull() {
                this[this.tablestory.stories_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow[] GetCraftingInfoRows() {
                if ((this.Table.ChildRelations["story_CraftingInfo"] == null)) {
                    return new CraftingInfoRow[0];
                }
                else {
                    return ((CraftingInfoRow[])(base.GetChildRows(this.Table.ChildRelations["story_CraftingInfo"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransitionHistoryRow[] GetTransitionHistoryRows() {
                if ((this.Table.ChildRelations["story_TransitionHistory"] == null)) {
                    return new TransitionHistoryRow[0];
                }
                else {
                    return ((TransitionHistoryRow[])(base.GetChildRows(this.Table.ChildRelations["story_TransitionHistory"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersesRow[] GetVersesRows() {
                if ((this.Table.ChildRelations["story_Verses"] == null)) {
                    return new VersesRow[0];
                }
                else {
                    return ((VersesRow[])(base.GetChildRows(this.Table.ChildRelations["story_Verses"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CraftingInfoRow : global::System.Data.DataRow {
            
            private CraftingInfoDataTable tableCraftingInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CraftingInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCraftingInfo = ((CraftingInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool NonBiblicalStory {
                get {
                    try {
                        return ((bool)(this[this.tableCraftingInfo.NonBiblicalStoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NonBiblicalStory\' in table \'CraftingInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCraftingInfo.NonBiblicalStoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoryPurpose {
                get {
                    try {
                        return ((string)(this[this.tableCraftingInfo.StoryPurposeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryPurpose\' in table \'CraftingInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCraftingInfo.StoryPurposeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResourcesUsed {
                get {
                    try {
                        return ((string)(this[this.tableCraftingInfo.ResourcesUsedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResourcesUsed\' in table \'CraftingInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCraftingInfo.ResourcesUsedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MiscellaneousStoryInfo {
                get {
                    try {
                        return ((string)(this[this.tableCraftingInfo.MiscellaneousStoryInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MiscellaneousStoryInfo\' in table \'CraftingInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCraftingInfo.MiscellaneousStoryInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    return ((int)(this[this.tableCraftingInfo.CraftingInfo_IdColumn]));
                }
                set {
                    this[this.tableCraftingInfo.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int story_Id {
                get {
                    try {
                        return ((int)(this[this.tableCraftingInfo.story_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'story_Id\' in table \'CraftingInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCraftingInfo.story_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow storyRow {
                get {
                    return ((storyRow)(this.GetParentRow(this.Table.ParentRelations["story_CraftingInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["story_CraftingInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNonBiblicalStoryNull() {
                return this.IsNull(this.tableCraftingInfo.NonBiblicalStoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNonBiblicalStoryNull() {
                this[this.tableCraftingInfo.NonBiblicalStoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryPurposeNull() {
                return this.IsNull(this.tableCraftingInfo.StoryPurposeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryPurposeNull() {
                this[this.tableCraftingInfo.StoryPurposeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResourcesUsedNull() {
                return this.IsNull(this.tableCraftingInfo.ResourcesUsedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResourcesUsedNull() {
                this[this.tableCraftingInfo.ResourcesUsedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiscellaneousStoryInfoNull() {
                return this.IsNull(this.tableCraftingInfo.MiscellaneousStoryInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiscellaneousStoryInfoNull() {
                this[this.tableCraftingInfo.MiscellaneousStoryInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstory_IdNull() {
                return this.IsNull(this.tableCraftingInfo.story_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstory_IdNull() {
                this[this.tableCraftingInfo.story_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow[] GetStoryCrafterRows() {
                if ((this.Table.ChildRelations["CraftingInfo_StoryCrafter"] == null)) {
                    return new StoryCrafterRow[0];
                }
                else {
                    return ((StoryCrafterRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_StoryCrafter"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectFacilitatorRow[] GetProjectFacilitatorRows() {
                if ((this.Table.ChildRelations["CraftingInfo_ProjectFacilitator"] == null)) {
                    return new ProjectFacilitatorRow[0];
                }
                else {
                    return ((ProjectFacilitatorRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_ProjectFacilitator"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow[] GetConsultantRows() {
                if ((this.Table.ChildRelations["CraftingInfo_Consultant"] == null)) {
                    return new ConsultantRow[0];
                }
                else {
                    return ((ConsultantRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_Consultant"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachRow[] GetCoachRows() {
                if ((this.Table.ChildRelations["CraftingInfo_Coach"] == null)) {
                    return new CoachRow[0];
                }
                else {
                    return ((CoachRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_Coach"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow[] GetBackTranslatorRows() {
                if ((this.Table.ChildRelations["CraftingInfo_BackTranslator"] == null)) {
                    return new BackTranslatorRow[0];
                }
                else {
                    return ((BackTranslatorRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_BackTranslator"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutsideEnglishBackTranslatorRow[] GetOutsideEnglishBackTranslatorRows() {
                if ((this.Table.ChildRelations["CraftingInfo_OutsideEnglishBackTranslator"] == null)) {
                    return new OutsideEnglishBackTranslatorRow[0];
                }
                else {
                    return ((OutsideEnglishBackTranslatorRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_OutsideEnglishBackTranslator"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRetellingsRow[] GetTestsRetellingsRows() {
                if ((this.Table.ChildRelations["CraftingInfo_TestsRetellings"] == null)) {
                    return new TestsRetellingsRow[0];
                }
                else {
                    return ((TestsRetellingsRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_TestsRetellings"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsTqAnswersRow[] GetTestsTqAnswersRows() {
                if ((this.Table.ChildRelations["CraftingInfo_TestsTqAnswers"] == null)) {
                    return new TestsTqAnswersRow[0];
                }
                else {
                    return ((TestsTqAnswersRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_TestsTqAnswers"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StoryCrafterRow : global::System.Data.DataRow {
            
            private StoryCrafterDataTable tableStoryCrafter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryCrafterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStoryCrafter = ((StoryCrafterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    return ((string)(this[this.tableStoryCrafter.memberIDColumn]));
                }
                set {
                    this[this.tableStoryCrafter.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoryCrafter_text {
                get {
                    try {
                        return ((string)(this[this.tableStoryCrafter.StoryCrafter_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryCrafter_text\' in table \'StoryCrafter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryCrafter.StoryCrafter_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableStoryCrafter.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'StoryCrafter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryCrafter.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_StoryCrafter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_StoryCrafter"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryCrafter_textNull() {
                return this.IsNull(this.tableStoryCrafter.StoryCrafter_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryCrafter_textNull() {
                this[this.tableStoryCrafter.StoryCrafter_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableStoryCrafter.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableStoryCrafter.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectFacilitatorRow : global::System.Data.DataRow {
            
            private ProjectFacilitatorDataTable tableProjectFacilitator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectFacilitatorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectFacilitator = ((ProjectFacilitatorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    return ((string)(this[this.tableProjectFacilitator.memberIDColumn]));
                }
                set {
                    this[this.tableProjectFacilitator.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectFacilitator_text {
                get {
                    try {
                        return ((string)(this[this.tableProjectFacilitator.ProjectFacilitator_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectFacilitator_text\' in table \'ProjectFacilitator\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableProjectFacilitator.ProjectFacilitator_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableProjectFacilitator.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'ProjectFacilitator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectFacilitator.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_ProjectFacilitator"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_ProjectFacilitator"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectFacilitator_textNull() {
                return this.IsNull(this.tableProjectFacilitator.ProjectFacilitator_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectFacilitator_textNull() {
                this[this.tableProjectFacilitator.ProjectFacilitator_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableProjectFacilitator.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableProjectFacilitator.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsultantRow : global::System.Data.DataRow {
            
            private ConsultantDataTable tableConsultant;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultant = ((ConsultantDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    return ((string)(this[this.tableConsultant.memberIDColumn]));
                }
                set {
                    this[this.tableConsultant.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Consultant_text {
                get {
                    try {
                        return ((string)(this[this.tableConsultant.Consultant_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Consultant_text\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.Consultant_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableConsultant.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_Consultant"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_Consultant"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultant_textNull() {
                return this.IsNull(this.tableConsultant.Consultant_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultant_textNull() {
                this[this.tableConsultant.Consultant_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableConsultant.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableConsultant.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoachRow : global::System.Data.DataRow {
            
            private CoachDataTable tableCoach;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoach = ((CoachDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    return ((string)(this[this.tableCoach.memberIDColumn]));
                }
                set {
                    this[this.tableCoach.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Coach_text {
                get {
                    try {
                        return ((string)(this[this.tableCoach.Coach_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Coach_text\' in table \'Coach\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoach.Coach_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableCoach.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'Coach\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoach.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_Coach"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_Coach"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoach_textNull() {
                return this.IsNull(this.tableCoach.Coach_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoach_textNull() {
                this[this.tableCoach.Coach_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableCoach.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableCoach.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BackTranslatorRow : global::System.Data.DataRow {
            
            private BackTranslatorDataTable tableBackTranslator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BackTranslatorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBackTranslator = ((BackTranslatorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    return ((string)(this[this.tableBackTranslator.memberIDColumn]));
                }
                set {
                    this[this.tableBackTranslator.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BackTranslator_text {
                get {
                    try {
                        return ((string)(this[this.tableBackTranslator.BackTranslator_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackTranslator_text\' in table \'BackTranslator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBackTranslator.BackTranslator_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableBackTranslator.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'BackTranslator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBackTranslator.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_BackTranslator"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_BackTranslator"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackTranslator_textNull() {
                return this.IsNull(this.tableBackTranslator.BackTranslator_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackTranslator_textNull() {
                this[this.tableBackTranslator.BackTranslator_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableBackTranslator.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableBackTranslator.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OutsideEnglishBackTranslatorRow : global::System.Data.DataRow {
            
            private OutsideEnglishBackTranslatorDataTable tableOutsideEnglishBackTranslator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutsideEnglishBackTranslatorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOutsideEnglishBackTranslator = ((OutsideEnglishBackTranslatorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    return ((string)(this[this.tableOutsideEnglishBackTranslator.memberIDColumn]));
                }
                set {
                    this[this.tableOutsideEnglishBackTranslator.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OutsideEnglishBackTranslator_text {
                get {
                    try {
                        return ((string)(this[this.tableOutsideEnglishBackTranslator.OutsideEnglishBackTranslator_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutsideEnglishBackTranslator_text\' in table \'OutsideEnglish" +
                                "BackTranslator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutsideEnglishBackTranslator.OutsideEnglishBackTranslator_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableOutsideEnglishBackTranslator.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'OutsideEnglishBackTranslator\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutsideEnglishBackTranslator.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_OutsideEnglishBackTranslator"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_OutsideEnglishBackTranslator"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutsideEnglishBackTranslator_textNull() {
                return this.IsNull(this.tableOutsideEnglishBackTranslator.OutsideEnglishBackTranslator_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutsideEnglishBackTranslator_textNull() {
                this[this.tableOutsideEnglishBackTranslator.OutsideEnglishBackTranslator_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableOutsideEnglishBackTranslator.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableOutsideEnglishBackTranslator.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestsRetellingsRow : global::System.Data.DataRow {
            
            private TestsRetellingsDataTable tableTestsRetellings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsRetellingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestsRetellings = ((TestsRetellingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestsRetellings_Id {
                get {
                    return ((int)(this[this.tableTestsRetellings.TestsRetellings_IdColumn]));
                }
                set {
                    this[this.tableTestsRetellings.TestsRetellings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableTestsRetellings.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'TestsRetellings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestsRetellings.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_TestsRetellings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_TestsRetellings"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableTestsRetellings.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableTestsRetellings.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRetellingRow[] GetTestRetellingRows() {
                if ((this.Table.ChildRelations["TestsRetellings_TestRetelling"] == null)) {
                    return new TestRetellingRow[0];
                }
                else {
                    return ((TestRetellingRow[])(base.GetChildRows(this.Table.ChildRelations["TestsRetellings_TestRetelling"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestRetellingRow : global::System.Data.DataRow {
            
            private TestRetellingDataTable tableTestRetelling;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRetellingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestRetelling = ((TestRetellingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    return ((string)(this[this.tableTestRetelling.memberIDColumn]));
                }
                set {
                    this[this.tableTestRetelling.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestRetelling_text {
                get {
                    try {
                        return ((string)(this[this.tableTestRetelling.TestRetelling_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestRetelling_text\' in table \'TestRetelling\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRetelling.TestRetelling_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestsRetellings_Id {
                get {
                    try {
                        return ((int)(this[this.tableTestRetelling.TestsRetellings_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestsRetellings_Id\' in table \'TestRetelling\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRetelling.TestsRetellings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRetellingsRow TestsRetellingsRow {
                get {
                    return ((TestsRetellingsRow)(this.GetParentRow(this.Table.ParentRelations["TestsRetellings_TestRetelling"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestsRetellings_TestRetelling"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestRetelling_textNull() {
                return this.IsNull(this.tableTestRetelling.TestRetelling_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestRetelling_textNull() {
                this[this.tableTestRetelling.TestRetelling_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestsRetellings_IdNull() {
                return this.IsNull(this.tableTestRetelling.TestsRetellings_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestsRetellings_IdNull() {
                this[this.tableTestRetelling.TestsRetellings_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestsTqAnswersRow : global::System.Data.DataRow {
            
            private TestsTqAnswersDataTable tableTestsTqAnswers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsTqAnswersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestsTqAnswers = ((TestsTqAnswersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestsTqAnswers_Id {
                get {
                    return ((int)(this[this.tableTestsTqAnswers.TestsTqAnswers_IdColumn]));
                }
                set {
                    this[this.tableTestsTqAnswers.TestsTqAnswers_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableTestsTqAnswers.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'TestsTqAnswers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestsTqAnswers.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_TestsTqAnswers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_TestsTqAnswers"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableTestsTqAnswers.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableTestsTqAnswers.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestTqAnswerRow[] GetTestTqAnswerRows() {
                if ((this.Table.ChildRelations["TestsTqAnswers_TestTqAnswer"] == null)) {
                    return new TestTqAnswerRow[0];
                }
                else {
                    return ((TestTqAnswerRow[])(base.GetChildRows(this.Table.ChildRelations["TestsTqAnswers_TestTqAnswer"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestTqAnswerRow : global::System.Data.DataRow {
            
            private TestTqAnswerDataTable tableTestTqAnswer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestTqAnswerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestTqAnswer = ((TestTqAnswerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    return ((string)(this[this.tableTestTqAnswer.memberIDColumn]));
                }
                set {
                    this[this.tableTestTqAnswer.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestTqAnswer_text {
                get {
                    try {
                        return ((string)(this[this.tableTestTqAnswer.TestTqAnswer_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestTqAnswer_text\' in table \'TestTqAnswer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestTqAnswer.TestTqAnswer_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestsTqAnswers_Id {
                get {
                    try {
                        return ((int)(this[this.tableTestTqAnswer.TestsTqAnswers_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestsTqAnswers_Id\' in table \'TestTqAnswer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestTqAnswer.TestsTqAnswers_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsTqAnswersRow TestsTqAnswersRow {
                get {
                    return ((TestsTqAnswersRow)(this.GetParentRow(this.Table.ParentRelations["TestsTqAnswers_TestTqAnswer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestsTqAnswers_TestTqAnswer"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestTqAnswer_textNull() {
                return this.IsNull(this.tableTestTqAnswer.TestTqAnswer_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestTqAnswer_textNull() {
                this[this.tableTestTqAnswer.TestTqAnswer_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestsTqAnswers_IdNull() {
                return this.IsNull(this.tableTestTqAnswer.TestsTqAnswers_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestsTqAnswers_IdNull() {
                this[this.tableTestTqAnswer.TestsTqAnswers_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TransitionHistoryRow : global::System.Data.DataRow {
            
            private TransitionHistoryDataTable tableTransitionHistory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransitionHistoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransitionHistory = ((TransitionHistoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TransitionHistory_Id {
                get {
                    return ((int)(this[this.tableTransitionHistory.TransitionHistory_IdColumn]));
                }
                set {
                    this[this.tableTransitionHistory.TransitionHistory_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int story_Id {
                get {
                    try {
                        return ((int)(this[this.tableTransitionHistory.story_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'story_Id\' in table \'TransitionHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransitionHistory.story_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow storyRow {
                get {
                    return ((storyRow)(this.GetParentRow(this.Table.ParentRelations["story_TransitionHistory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["story_TransitionHistory"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstory_IdNull() {
                return this.IsNull(this.tableTransitionHistory.story_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstory_IdNull() {
                this[this.tableTransitionHistory.story_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateTransitionRow[] GetStateTransitionRows() {
                if ((this.Table.ChildRelations["TransitionHistory_StateTransition"] == null)) {
                    return new StateTransitionRow[0];
                }
                else {
                    return ((StateTransitionRow[])(base.GetChildRows(this.Table.ChildRelations["TransitionHistory_StateTransition"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StateTransitionRow : global::System.Data.DataRow {
            
            private StateTransitionDataTable tableStateTransition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StateTransitionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStateTransition = ((StateTransitionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoggedInMemberId {
                get {
                    return ((string)(this[this.tableStateTransition.LoggedInMemberIdColumn]));
                }
                set {
                    this[this.tableStateTransition.LoggedInMemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WindowsUserName {
                get {
                    try {
                        return ((string)(this[this.tableStateTransition.WindowsUserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WindowsUserName\' in table \'StateTransition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStateTransition.WindowsUserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromState {
                get {
                    return ((string)(this[this.tableStateTransition.FromStateColumn]));
                }
                set {
                    this[this.tableStateTransition.FromStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToState {
                get {
                    return ((string)(this[this.tableStateTransition.ToStateColumn]));
                }
                set {
                    this[this.tableStateTransition.ToStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TransitionDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableStateTransition.TransitionDateTimeColumn]));
                }
                set {
                    this[this.tableStateTransition.TransitionDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TransitionHistory_Id {
                get {
                    try {
                        return ((int)(this[this.tableStateTransition.TransitionHistory_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransitionHistory_Id\' in table \'StateTransition\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableStateTransition.TransitionHistory_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransitionHistoryRow TransitionHistoryRow {
                get {
                    return ((TransitionHistoryRow)(this.GetParentRow(this.Table.ParentRelations["TransitionHistory_StateTransition"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TransitionHistory_StateTransition"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWindowsUserNameNull() {
                return this.IsNull(this.tableStateTransition.WindowsUserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWindowsUserNameNull() {
                this[this.tableStateTransition.WindowsUserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransitionHistory_IdNull() {
                return this.IsNull(this.tableStateTransition.TransitionHistory_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransitionHistory_IdNull() {
                this[this.tableStateTransition.TransitionHistory_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VersesRow : global::System.Data.DataRow {
            
            private VersesDataTable tableVerses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VersesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVerses = ((VersesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verses_Id {
                get {
                    return ((int)(this[this.tableVerses.Verses_IdColumn]));
                }
                set {
                    this[this.tableVerses.Verses_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int story_Id {
                get {
                    try {
                        return ((int)(this[this.tableVerses.story_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'story_Id\' in table \'Verses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerses.story_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow storyRow {
                get {
                    return ((storyRow)(this.GetParentRow(this.Table.ParentRelations["story_Verses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["story_Verses"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstory_IdNull() {
                return this.IsNull(this.tableVerses.story_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstory_IdNull() {
                this[this.tableVerses.story_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow[] GetVerseRows() {
                if ((this.Table.ChildRelations["Verses_Verse"] == null)) {
                    return new VerseRow[0];
                }
                else {
                    return ((VerseRow[])(base.GetChildRows(this.Table.ChildRelations["Verses_Verse"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VerseRow : global::System.Data.DataRow {
            
            private VerseDataTable tableVerse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVerse = ((VerseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableVerse.guidColumn]));
                }
                set {
                    this[this.tableVerse.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool first {
                get {
                    try {
                        return ((bool)(this[this.tableVerse.firstColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'first\' in table \'Verse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerse.firstColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool visible {
                get {
                    try {
                        return ((bool)(this[this.tableVerse.visibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'visible\' in table \'Verse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerse.visibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verse_Id {
                get {
                    return ((int)(this[this.tableVerse.Verse_IdColumn]));
                }
                set {
                    this[this.tableVerse.Verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verses_Id {
                get {
                    try {
                        return ((int)(this[this.tableVerse.Verses_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verses_Id\' in table \'Verse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerse.Verses_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersesRow VersesRow {
                get {
                    return ((VersesRow)(this.GetParentRow(this.Table.ParentRelations["Verses_Verse"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Verses_Verse"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfirstNull() {
                return this.IsNull(this.tableVerse.firstColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfirstNull() {
                this[this.tableVerse.firstColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvisibleNull() {
                return this.IsNull(this.tableVerse.visibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvisibleNull() {
                this[this.tableVerse.visibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerses_IdNull() {
                return this.IsNull(this.tableVerse.Verses_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerses_IdNull() {
                this[this.tableVerse.Verses_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryLineRow[] GetStoryLineRows() {
                if ((this.Table.ChildRelations["Verse_StoryLine"] == null)) {
                    return new StoryLineRow[0];
                }
                else {
                    return ((StoryLineRow[])(base.GetChildRows(this.Table.ChildRelations["Verse_StoryLine"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorsRow[] GetAnchorsRows() {
                if ((this.Table.ChildRelations["Verse_Anchors"] == null)) {
                    return new AnchorsRow[0];
                }
                else {
                    return ((AnchorsRow[])(base.GetChildRows(this.Table.ChildRelations["Verse_Anchors"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpsRow[] GetExegeticalHelpsRows() {
                if ((this.Table.ChildRelations["Verse_ExegeticalHelps"] == null)) {
                    return new ExegeticalHelpsRow[0];
                }
                else {
                    return ((ExegeticalHelpsRow[])(base.GetChildRows(this.Table.ChildRelations["Verse_ExegeticalHelps"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow[] GetTestQuestionsRows() {
                if ((this.Table.ChildRelations["Verse_TestQuestions"] == null)) {
                    return new TestQuestionsRow[0];
                }
                else {
                    return ((TestQuestionsRow[])(base.GetChildRows(this.Table.ChildRelations["Verse_TestQuestions"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow[] GetRetellingsRows() {
                if ((this.Table.ChildRelations["Verse_Retellings"] == null)) {
                    return new RetellingsRow[0];
                }
                else {
                    return ((RetellingsRow[])(base.GetChildRows(this.Table.ChildRelations["Verse_Retellings"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow[] GetConsultantNotesRows() {
                if ((this.Table.ChildRelations["Verse_ConsultantNotes"] == null)) {
                    return new ConsultantNotesRow[0];
                }
                else {
                    return ((ConsultantNotesRow[])(base.GetChildRows(this.Table.ChildRelations["Verse_ConsultantNotes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow[] GetCoachNotesRows() {
                if ((this.Table.ChildRelations["Verse_CoachNotes"] == null)) {
                    return new CoachNotesRow[0];
                }
                else {
                    return ((CoachNotesRow[])(base.GetChildRows(this.Table.ChildRelations["Verse_CoachNotes"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StoryLineRow : global::System.Data.DataRow {
            
            private StoryLineDataTable tableStoryLine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryLineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStoryLine = ((StoryLineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tableStoryLine.langColumn]));
                }
                set {
                    this[this.tableStoryLine.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoryLine_text {
                get {
                    try {
                        return ((string)(this[this.tableStoryLine.StoryLine_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryLine_text\' in table \'StoryLine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryLine.StoryLine_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableStoryLine.Verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verse_Id\' in table \'StoryLine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryLine.Verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow VerseRow {
                get {
                    return ((VerseRow)(this.GetParentRow(this.Table.ParentRelations["Verse_StoryLine"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Verse_StoryLine"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryLine_textNull() {
                return this.IsNull(this.tableStoryLine.StoryLine_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryLine_textNull() {
                this[this.tableStoryLine.StoryLine_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerse_IdNull() {
                return this.IsNull(this.tableStoryLine.Verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerse_IdNull() {
                this[this.tableStoryLine.Verse_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnchorsRow : global::System.Data.DataRow {
            
            private AnchorsDataTable tableAnchors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnchorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnchors = ((AnchorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool keyTermChecked {
                get {
                    try {
                        return ((bool)(this[this.tableAnchors.keyTermCheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'keyTermChecked\' in table \'Anchors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnchors.keyTermCheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Anchors_Id {
                get {
                    return ((int)(this[this.tableAnchors.Anchors_IdColumn]));
                }
                set {
                    this[this.tableAnchors.Anchors_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableAnchors.Verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verse_Id\' in table \'Anchors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnchors.Verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow VerseRow {
                get {
                    return ((VerseRow)(this.GetParentRow(this.Table.ParentRelations["Verse_Anchors"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Verse_Anchors"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskeyTermCheckedNull() {
                return this.IsNull(this.tableAnchors.keyTermCheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkeyTermCheckedNull() {
                this[this.tableAnchors.keyTermCheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerse_IdNull() {
                return this.IsNull(this.tableAnchors.Verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerse_IdNull() {
                this[this.tableAnchors.Verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorRow[] GetAnchorRows() {
                if ((this.Table.ChildRelations["Anchors_Anchor"] == null)) {
                    return new AnchorRow[0];
                }
                else {
                    return ((AnchorRow[])(base.GetChildRows(this.Table.ChildRelations["Anchors_Anchor"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnchorRow : global::System.Data.DataRow {
            
            private AnchorDataTable tableAnchor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnchorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnchor = ((AnchorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jumpTarget {
                get {
                    return ((string)(this[this.tableAnchor.jumpTargetColumn]));
                }
                set {
                    this[this.tableAnchor.jumpTargetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Anchor_text {
                get {
                    try {
                        return ((string)(this[this.tableAnchor.Anchor_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Anchor_text\' in table \'Anchor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnchor.Anchor_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Anchors_Id {
                get {
                    try {
                        return ((int)(this[this.tableAnchor.Anchors_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Anchors_Id\' in table \'Anchor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnchor.Anchors_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorsRow AnchorsRow {
                get {
                    return ((AnchorsRow)(this.GetParentRow(this.Table.ParentRelations["Anchors_Anchor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Anchors_Anchor"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnchor_textNull() {
                return this.IsNull(this.tableAnchor.Anchor_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnchor_textNull() {
                this[this.tableAnchor.Anchor_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnchors_IdNull() {
                return this.IsNull(this.tableAnchor.Anchors_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnchors_IdNull() {
                this[this.tableAnchor.Anchors_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExegeticalHelpsRow : global::System.Data.DataRow {
            
            private ExegeticalHelpsDataTable tableExegeticalHelps;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExegeticalHelpsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExegeticalHelps = ((ExegeticalHelpsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExegeticalHelps_Id {
                get {
                    return ((int)(this[this.tableExegeticalHelps.ExegeticalHelps_IdColumn]));
                }
                set {
                    this[this.tableExegeticalHelps.ExegeticalHelps_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableExegeticalHelps.Verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verse_Id\' in table \'ExegeticalHelps\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExegeticalHelps.Verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow VerseRow {
                get {
                    return ((VerseRow)(this.GetParentRow(this.Table.ParentRelations["Verse_ExegeticalHelps"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Verse_ExegeticalHelps"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerse_IdNull() {
                return this.IsNull(this.tableExegeticalHelps.Verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerse_IdNull() {
                this[this.tableExegeticalHelps.Verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpRow[] GetExegeticalHelpRows() {
                if ((this.Table.ChildRelations["ExegeticalHelps_ExegeticalHelp"] == null)) {
                    return new ExegeticalHelpRow[0];
                }
                else {
                    return ((ExegeticalHelpRow[])(base.GetChildRows(this.Table.ChildRelations["ExegeticalHelps_ExegeticalHelp"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExegeticalHelpRow : global::System.Data.DataRow {
            
            private ExegeticalHelpDataTable tableExegeticalHelp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExegeticalHelpRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExegeticalHelp = ((ExegeticalHelpDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExegeticalHelp_Column {
                get {
                    try {
                        return ((string)(this[this.tableExegeticalHelp.ExegeticalHelp_ColumnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExegeticalHelp_Column\' in table \'ExegeticalHelp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableExegeticalHelp.ExegeticalHelp_ColumnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExegeticalHelps_Id {
                get {
                    try {
                        return ((int)(this[this.tableExegeticalHelp.ExegeticalHelps_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExegeticalHelps_Id\' in table \'ExegeticalHelp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExegeticalHelp.ExegeticalHelps_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpsRow ExegeticalHelpsRow {
                get {
                    return ((ExegeticalHelpsRow)(this.GetParentRow(this.Table.ParentRelations["ExegeticalHelps_ExegeticalHelp"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ExegeticalHelps_ExegeticalHelp"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExegeticalHelp_ColumnNull() {
                return this.IsNull(this.tableExegeticalHelp.ExegeticalHelp_ColumnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExegeticalHelp_ColumnNull() {
                this[this.tableExegeticalHelp.ExegeticalHelp_ColumnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExegeticalHelps_IdNull() {
                return this.IsNull(this.tableExegeticalHelp.ExegeticalHelps_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExegeticalHelps_IdNull() {
                this[this.tableExegeticalHelp.ExegeticalHelps_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestQuestionsRow : global::System.Data.DataRow {
            
            private TestQuestionsDataTable tableTestQuestions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestQuestions = ((TestQuestionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestions_Id {
                get {
                    return ((int)(this[this.tableTestQuestions.TestQuestions_IdColumn]));
                }
                set {
                    this[this.tableTestQuestions.TestQuestions_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableTestQuestions.Verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verse_Id\' in table \'TestQuestions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestions.Verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow VerseRow {
                get {
                    return ((VerseRow)(this.GetParentRow(this.Table.ParentRelations["Verse_TestQuestions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Verse_TestQuestions"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerse_IdNull() {
                return this.IsNull(this.tableTestQuestions.Verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerse_IdNull() {
                this[this.tableTestQuestions.Verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow[] GetTestQuestionRows() {
                if ((this.Table.ChildRelations["TestQuestions_TestQuestion"] == null)) {
                    return new TestQuestionRow[0];
                }
                else {
                    return ((TestQuestionRow[])(base.GetChildRows(this.Table.ChildRelations["TestQuestions_TestQuestion"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestQuestionRow : global::System.Data.DataRow {
            
            private TestQuestionDataTable tableTestQuestion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestQuestion = ((TestQuestionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool visible {
                get {
                    try {
                        return ((bool)(this[this.tableTestQuestion.visibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'visible\' in table \'TestQuestion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestion.visibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableTestQuestion.guidColumn]));
                }
                set {
                    this[this.tableTestQuestion.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestion_Id {
                get {
                    return ((int)(this[this.tableTestQuestion.TestQuestion_IdColumn]));
                }
                set {
                    this[this.tableTestQuestion.TestQuestion_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestions_Id {
                get {
                    try {
                        return ((int)(this[this.tableTestQuestion.TestQuestions_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestQuestions_Id\' in table \'TestQuestion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestion.TestQuestions_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow TestQuestionsRow {
                get {
                    return ((TestQuestionsRow)(this.GetParentRow(this.Table.ParentRelations["TestQuestions_TestQuestion"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestQuestions_TestQuestion"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvisibleNull() {
                return this.IsNull(this.tableTestQuestion.visibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvisibleNull() {
                this[this.tableTestQuestion.visibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestQuestions_IdNull() {
                return this.IsNull(this.tableTestQuestion.TestQuestions_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestQuestions_IdNull() {
                this[this.tableTestQuestion.TestQuestions_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionLineRow[] GetTestQuestionLineRows() {
                if ((this.Table.ChildRelations["TestQuestion_TestQuestionLine"] == null)) {
                    return new TestQuestionLineRow[0];
                }
                else {
                    return ((TestQuestionLineRow[])(base.GetChildRows(this.Table.ChildRelations["TestQuestion_TestQuestionLine"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow[] GetAnswersRows() {
                if ((this.Table.ChildRelations["TestQuestion_Answers"] == null)) {
                    return new AnswersRow[0];
                }
                else {
                    return ((AnswersRow[])(base.GetChildRows(this.Table.ChildRelations["TestQuestion_Answers"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestQuestionLineRow : global::System.Data.DataRow {
            
            private TestQuestionLineDataTable tableTestQuestionLine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionLineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestQuestionLine = ((TestQuestionLineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    try {
                        return ((string)(this[this.tableTestQuestionLine.langColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lang\' in table \'TestQuestionLine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestionLine.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestQuestionLine_text {
                get {
                    try {
                        return ((string)(this[this.tableTestQuestionLine.TestQuestionLine_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestQuestionLine_text\' in table \'TestQuestionLine\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTestQuestionLine.TestQuestionLine_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestion_Id {
                get {
                    try {
                        return ((int)(this[this.tableTestQuestionLine.TestQuestion_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestQuestion_Id\' in table \'TestQuestionLine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestionLine.TestQuestion_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow TestQuestionRow {
                get {
                    return ((TestQuestionRow)(this.GetParentRow(this.Table.ParentRelations["TestQuestion_TestQuestionLine"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestQuestion_TestQuestionLine"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslangNull() {
                return this.IsNull(this.tableTestQuestionLine.langColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlangNull() {
                this[this.tableTestQuestionLine.langColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestQuestionLine_textNull() {
                return this.IsNull(this.tableTestQuestionLine.TestQuestionLine_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestQuestionLine_textNull() {
                this[this.tableTestQuestionLine.TestQuestionLine_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestQuestion_IdNull() {
                return this.IsNull(this.tableTestQuestionLine.TestQuestion_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestQuestion_IdNull() {
                this[this.tableTestQuestionLine.TestQuestion_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnswersRow : global::System.Data.DataRow {
            
            private AnswersDataTable tableAnswers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnswersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnswers = ((AnswersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Answers_Id {
                get {
                    return ((int)(this[this.tableAnswers.Answers_IdColumn]));
                }
                set {
                    this[this.tableAnswers.Answers_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestion_Id {
                get {
                    try {
                        return ((int)(this[this.tableAnswers.TestQuestion_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestQuestion_Id\' in table \'Answers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnswers.TestQuestion_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow TestQuestionRow {
                get {
                    return ((TestQuestionRow)(this.GetParentRow(this.Table.ParentRelations["TestQuestion_Answers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestQuestion_Answers"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestQuestion_IdNull() {
                return this.IsNull(this.tableAnswers.TestQuestion_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestQuestion_IdNull() {
                this[this.tableAnswers.TestQuestion_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswerRow[] GetAnswerRows() {
                if ((this.Table.ChildRelations["Answers_Answer"] == null)) {
                    return new AnswerRow[0];
                }
                else {
                    return ((AnswerRow[])(base.GetChildRows(this.Table.ChildRelations["Answers_Answer"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnswerRow : global::System.Data.DataRow {
            
            private AnswerDataTable tableAnswer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnswerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnswer = ((AnswerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    try {
                        return ((string)(this[this.tableAnswer.langColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lang\' in table \'Answer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnswer.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    return ((string)(this[this.tableAnswer.memberIDColumn]));
                }
                set {
                    this[this.tableAnswer.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Answer_text {
                get {
                    try {
                        return ((string)(this[this.tableAnswer.Answer_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Answer_text\' in table \'Answer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnswer.Answer_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Answers_Id {
                get {
                    try {
                        return ((int)(this[this.tableAnswer.Answers_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Answers_Id\' in table \'Answer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnswer.Answers_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow AnswersRow {
                get {
                    return ((AnswersRow)(this.GetParentRow(this.Table.ParentRelations["Answers_Answer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Answers_Answer"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslangNull() {
                return this.IsNull(this.tableAnswer.langColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlangNull() {
                this[this.tableAnswer.langColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnswer_textNull() {
                return this.IsNull(this.tableAnswer.Answer_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnswer_textNull() {
                this[this.tableAnswer.Answer_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnswers_IdNull() {
                return this.IsNull(this.tableAnswer.Answers_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnswers_IdNull() {
                this[this.tableAnswer.Answers_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RetellingsRow : global::System.Data.DataRow {
            
            private RetellingsDataTable tableRetellings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRetellings = ((RetellingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Retellings_Id {
                get {
                    return ((int)(this[this.tableRetellings.Retellings_IdColumn]));
                }
                set {
                    this[this.tableRetellings.Retellings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableRetellings.Verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verse_Id\' in table \'Retellings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRetellings.Verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow VerseRow {
                get {
                    return ((VerseRow)(this.GetParentRow(this.Table.ParentRelations["Verse_Retellings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Verse_Retellings"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerse_IdNull() {
                return this.IsNull(this.tableRetellings.Verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerse_IdNull() {
                this[this.tableRetellings.Verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow[] GetRetellingRows() {
                if ((this.Table.ChildRelations["Retellings_Retelling"] == null)) {
                    return new RetellingRow[0];
                }
                else {
                    return ((RetellingRow[])(base.GetChildRows(this.Table.ChildRelations["Retellings_Retelling"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RetellingRow : global::System.Data.DataRow {
            
            private RetellingDataTable tableRetelling;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRetelling = ((RetellingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    try {
                        return ((string)(this[this.tableRetelling.langColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lang\' in table \'Retelling\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRetelling.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    return ((string)(this[this.tableRetelling.memberIDColumn]));
                }
                set {
                    this[this.tableRetelling.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Retelling_text {
                get {
                    try {
                        return ((string)(this[this.tableRetelling.Retelling_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Retelling_text\' in table \'Retelling\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRetelling.Retelling_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Retellings_Id {
                get {
                    try {
                        return ((int)(this[this.tableRetelling.Retellings_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Retellings_Id\' in table \'Retelling\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRetelling.Retellings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow RetellingsRow {
                get {
                    return ((RetellingsRow)(this.GetParentRow(this.Table.ParentRelations["Retellings_Retelling"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Retellings_Retelling"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslangNull() {
                return this.IsNull(this.tableRetelling.langColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlangNull() {
                this[this.tableRetelling.langColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetelling_textNull() {
                return this.IsNull(this.tableRetelling.Retelling_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetelling_textNull() {
                this[this.tableRetelling.Retelling_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetellings_IdNull() {
                return this.IsNull(this.tableRetelling.Retellings_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetellings_IdNull() {
                this[this.tableRetelling.Retellings_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsultantNotesRow : global::System.Data.DataRow {
            
            private ConsultantNotesDataTable tableConsultantNotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNotesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantNotes = ((ConsultantNotesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantNotes_Id {
                get {
                    return ((int)(this[this.tableConsultantNotes.ConsultantNotes_IdColumn]));
                }
                set {
                    this[this.tableConsultantNotes.ConsultantNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableConsultantNotes.Verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verse_Id\' in table \'ConsultantNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantNotes.Verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow VerseRow {
                get {
                    return ((VerseRow)(this.GetParentRow(this.Table.ParentRelations["Verse_ConsultantNotes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Verse_ConsultantNotes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerse_IdNull() {
                return this.IsNull(this.tableConsultantNotes.Verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerse_IdNull() {
                this[this.tableConsultantNotes.Verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow[] GetConsultantConversationRows() {
                if ((this.Table.ChildRelations["ConsultantNotes_ConsultantConversation"] == null)) {
                    return new ConsultantConversationRow[0];
                }
                else {
                    return ((ConsultantConversationRow[])(base.GetChildRows(this.Table.ChildRelations["ConsultantNotes_ConsultantConversation"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsultantConversationRow : global::System.Data.DataRow {
            
            private ConsultantConversationDataTable tableConsultantConversation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantConversationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantConversation = ((ConsultantConversationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableConsultantConversation.guidColumn]));
                }
                set {
                    this[this.tableConsultantConversation.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool visible {
                get {
                    try {
                        return ((bool)(this[this.tableConsultantConversation.visibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'visible\' in table \'ConsultantConversation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantConversation.visibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool finished {
                get {
                    try {
                        return ((bool)(this[this.tableConsultantConversation.finishedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'finished\' in table \'ConsultantConversation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantConversation.finishedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantConversation_Id {
                get {
                    return ((int)(this[this.tableConsultantConversation.ConsultantConversation_IdColumn]));
                }
                set {
                    this[this.tableConsultantConversation.ConsultantConversation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantNotes_Id {
                get {
                    try {
                        return ((int)(this[this.tableConsultantConversation.ConsultantNotes_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantNotes_Id\' in table \'ConsultantConversation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableConsultantConversation.ConsultantNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow ConsultantNotesRow {
                get {
                    return ((ConsultantNotesRow)(this.GetParentRow(this.Table.ParentRelations["ConsultantNotes_ConsultantConversation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ConsultantNotes_ConsultantConversation"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvisibleNull() {
                return this.IsNull(this.tableConsultantConversation.visibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvisibleNull() {
                this[this.tableConsultantConversation.visibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfinishedNull() {
                return this.IsNull(this.tableConsultantConversation.finishedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfinishedNull() {
                this[this.tableConsultantConversation.finishedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantNotes_IdNull() {
                return this.IsNull(this.tableConsultantConversation.ConsultantNotes_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantNotes_IdNull() {
                this[this.tableConsultantConversation.ConsultantNotes_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow[] GetConsultantNoteRows() {
                if ((this.Table.ChildRelations["ConsultantConversation_ConsultantNote"] == null)) {
                    return new ConsultantNoteRow[0];
                }
                else {
                    return ((ConsultantNoteRow[])(base.GetChildRows(this.Table.ChildRelations["ConsultantConversation_ConsultantNote"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsultantNoteRow : global::System.Data.DataRow {
            
            private ConsultantNoteDataTable tableConsultantNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNoteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantNote = ((ConsultantNoteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Direction {
                get {
                    return ((string)(this[this.tableConsultantNote.DirectionColumn]));
                }
                set {
                    this[this.tableConsultantNote.DirectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableConsultantNote.guidColumn]));
                }
                set {
                    this[this.tableConsultantNote.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableConsultantNote.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'ConsultantNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantNote.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime timeStamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConsultantNote.timeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'timeStamp\' in table \'ConsultantNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantNote.timeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsultantNote_text {
                get {
                    return ((string)(this[this.tableConsultantNote.ConsultantNote_textColumn]));
                }
                set {
                    this[this.tableConsultantNote.ConsultantNote_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantConversation_Id {
                get {
                    try {
                        return ((int)(this[this.tableConsultantNote.ConsultantConversation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantConversation_Id\' in table \'ConsultantNote\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableConsultantNote.ConsultantConversation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow ConsultantConversationRow {
                get {
                    return ((ConsultantConversationRow)(this.GetParentRow(this.Table.ParentRelations["ConsultantConversation_ConsultantNote"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ConsultantConversation_ConsultantNote"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableConsultantNote.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableConsultantNote.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeStampNull() {
                return this.IsNull(this.tableConsultantNote.timeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeStampNull() {
                this[this.tableConsultantNote.timeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantConversation_IdNull() {
                return this.IsNull(this.tableConsultantNote.ConsultantConversation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantConversation_IdNull() {
                this[this.tableConsultantNote.ConsultantConversation_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoachNotesRow : global::System.Data.DataRow {
            
            private CoachNotesDataTable tableCoachNotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNotesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoachNotes = ((CoachNotesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachNotes_Id {
                get {
                    return ((int)(this[this.tableCoachNotes.CoachNotes_IdColumn]));
                }
                set {
                    this[this.tableCoachNotes.CoachNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableCoachNotes.Verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Verse_Id\' in table \'CoachNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachNotes.Verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow VerseRow {
                get {
                    return ((VerseRow)(this.GetParentRow(this.Table.ParentRelations["Verse_CoachNotes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Verse_CoachNotes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerse_IdNull() {
                return this.IsNull(this.tableCoachNotes.Verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerse_IdNull() {
                this[this.tableCoachNotes.Verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow[] GetCoachConversationRows() {
                if ((this.Table.ChildRelations["CoachNotes_CoachConversation"] == null)) {
                    return new CoachConversationRow[0];
                }
                else {
                    return ((CoachConversationRow[])(base.GetChildRows(this.Table.ChildRelations["CoachNotes_CoachConversation"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoachConversationRow : global::System.Data.DataRow {
            
            private CoachConversationDataTable tableCoachConversation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachConversationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoachConversation = ((CoachConversationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableCoachConversation.guidColumn]));
                }
                set {
                    this[this.tableCoachConversation.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool visible {
                get {
                    try {
                        return ((bool)(this[this.tableCoachConversation.visibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'visible\' in table \'CoachConversation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachConversation.visibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool finished {
                get {
                    try {
                        return ((bool)(this[this.tableCoachConversation.finishedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'finished\' in table \'CoachConversation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachConversation.finishedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachConversation_Id {
                get {
                    return ((int)(this[this.tableCoachConversation.CoachConversation_IdColumn]));
                }
                set {
                    this[this.tableCoachConversation.CoachConversation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachNotes_Id {
                get {
                    try {
                        return ((int)(this[this.tableCoachConversation.CoachNotes_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoachNotes_Id\' in table \'CoachConversation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachConversation.CoachNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow CoachNotesRow {
                get {
                    return ((CoachNotesRow)(this.GetParentRow(this.Table.ParentRelations["CoachNotes_CoachConversation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CoachNotes_CoachConversation"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvisibleNull() {
                return this.IsNull(this.tableCoachConversation.visibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvisibleNull() {
                this[this.tableCoachConversation.visibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfinishedNull() {
                return this.IsNull(this.tableCoachConversation.finishedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfinishedNull() {
                this[this.tableCoachConversation.finishedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoachNotes_IdNull() {
                return this.IsNull(this.tableCoachConversation.CoachNotes_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoachNotes_IdNull() {
                this[this.tableCoachConversation.CoachNotes_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow[] GetCoachNoteRows() {
                if ((this.Table.ChildRelations["CoachConversation_CoachNote"] == null)) {
                    return new CoachNoteRow[0];
                }
                else {
                    return ((CoachNoteRow[])(base.GetChildRows(this.Table.ChildRelations["CoachConversation_CoachNote"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoachNoteRow : global::System.Data.DataRow {
            
            private CoachNoteDataTable tableCoachNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNoteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoachNote = ((CoachNoteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Direction {
                get {
                    return ((string)(this[this.tableCoachNote.DirectionColumn]));
                }
                set {
                    this[this.tableCoachNote.DirectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableCoachNote.guidColumn]));
                }
                set {
                    this[this.tableCoachNote.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableCoachNote.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'CoachNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachNote.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime timeStamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCoachNote.timeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'timeStamp\' in table \'CoachNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachNote.timeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CoachNote_text {
                get {
                    return ((string)(this[this.tableCoachNote.CoachNote_textColumn]));
                }
                set {
                    this[this.tableCoachNote.CoachNote_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachConversation_Id {
                get {
                    try {
                        return ((int)(this[this.tableCoachNote.CoachConversation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoachConversation_Id\' in table \'CoachNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachNote.CoachConversation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow CoachConversationRow {
                get {
                    return ((CoachConversationRow)(this.GetParentRow(this.Table.ParentRelations["CoachConversation_CoachNote"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CoachConversation_CoachNote"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableCoachNote.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableCoachNote.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeStampNull() {
                return this.IsNull(this.tableCoachNote.timeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeStampNull() {
                this[this.tableCoachNote.timeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoachConversation_IdNull() {
                return this.IsNull(this.tableCoachNote.CoachConversation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoachConversation_IdNull() {
                this[this.tableCoachNote.CoachConversation_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StoryProjectRowChangeEvent : global::System.EventArgs {
            
            private StoryProjectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRowChangeEvent(StoryProjectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MembersRowChangeEvent : global::System.EventArgs {
            
            private MembersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRowChangeEvent(MembersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MemberRowChangeEvent : global::System.EventArgs {
            
            private MemberRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRowChangeEvent(MemberRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LanguagesRowChangeEvent : global::System.EventArgs {
            
            private LanguagesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRowChangeEvent(LanguagesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LanguageInfoRowChangeEvent : global::System.EventArgs {
            
            private LanguageInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageInfoRowChangeEvent(LanguageInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AdaptItConfigurationsRowChangeEvent : global::System.EventArgs {
            
            private AdaptItConfigurationsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationsRowChangeEvent(AdaptItConfigurationsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AdaptItConfigurationRowChangeEvent : global::System.EventArgs {
            
            private AdaptItConfigurationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationRowChangeEvent(AdaptItConfigurationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdaptItConfigurationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LnCNotesRowChangeEvent : global::System.EventArgs {
            
            private LnCNotesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNotesRowChangeEvent(LnCNotesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LnCNoteRowChangeEvent : global::System.EventArgs {
            
            private LnCNoteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNoteRowChangeEvent(LnCNoteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LnCNoteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class storiesRowChangeEvent : global::System.EventArgs {
            
            private storiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRowChangeEvent(storiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class storyRowChangeEvent : global::System.EventArgs {
            
            private storyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRowChangeEvent(storyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CraftingInfoRowChangeEvent : global::System.EventArgs {
            
            private CraftingInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRowChangeEvent(CraftingInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StoryCrafterRowChangeEvent : global::System.EventArgs {
            
            private StoryCrafterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRowChangeEvent(StoryCrafterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectFacilitatorRowChangeEvent : global::System.EventArgs {
            
            private ProjectFacilitatorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectFacilitatorRowChangeEvent(ProjectFacilitatorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectFacilitatorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsultantRowChangeEvent : global::System.EventArgs {
            
            private ConsultantRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRowChangeEvent(ConsultantRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoachRowChangeEvent : global::System.EventArgs {
            
            private CoachRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachRowChangeEvent(CoachRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BackTranslatorRowChangeEvent : global::System.EventArgs {
            
            private BackTranslatorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRowChangeEvent(BackTranslatorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OutsideEnglishBackTranslatorRowChangeEvent : global::System.EventArgs {
            
            private OutsideEnglishBackTranslatorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutsideEnglishBackTranslatorRowChangeEvent(OutsideEnglishBackTranslatorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutsideEnglishBackTranslatorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestsRetellingsRowChangeEvent : global::System.EventArgs {
            
            private TestsRetellingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRetellingsRowChangeEvent(TestsRetellingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRetellingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestRetellingRowChangeEvent : global::System.EventArgs {
            
            private TestRetellingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRetellingRowChangeEvent(TestRetellingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRetellingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestsTqAnswersRowChangeEvent : global::System.EventArgs {
            
            private TestsTqAnswersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsTqAnswersRowChangeEvent(TestsTqAnswersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsTqAnswersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestTqAnswerRowChangeEvent : global::System.EventArgs {
            
            private TestTqAnswerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestTqAnswerRowChangeEvent(TestTqAnswerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestTqAnswerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TransitionHistoryRowChangeEvent : global::System.EventArgs {
            
            private TransitionHistoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransitionHistoryRowChangeEvent(TransitionHistoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransitionHistoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StateTransitionRowChangeEvent : global::System.EventArgs {
            
            private StateTransitionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateTransitionRowChangeEvent(StateTransitionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateTransitionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VersesRowChangeEvent : global::System.EventArgs {
            
            private VersesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersesRowChangeEvent(VersesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VerseRowChangeEvent : global::System.EventArgs {
            
            private VerseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRowChangeEvent(VerseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StoryLineRowChangeEvent : global::System.EventArgs {
            
            private StoryLineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryLineRowChangeEvent(StoryLineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryLineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnchorsRowChangeEvent : global::System.EventArgs {
            
            private AnchorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorsRowChangeEvent(AnchorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnchorRowChangeEvent : global::System.EventArgs {
            
            private AnchorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorRowChangeEvent(AnchorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnchorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExegeticalHelpsRowChangeEvent : global::System.EventArgs {
            
            private ExegeticalHelpsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpsRowChangeEvent(ExegeticalHelpsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExegeticalHelpRowChangeEvent : global::System.EventArgs {
            
            private ExegeticalHelpRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpRowChangeEvent(ExegeticalHelpRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExegeticalHelpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestQuestionsRowChangeEvent : global::System.EventArgs {
            
            private TestQuestionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRowChangeEvent(TestQuestionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestQuestionRowChangeEvent : global::System.EventArgs {
            
            private TestQuestionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRowChangeEvent(TestQuestionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestQuestionLineRowChangeEvent : global::System.EventArgs {
            
            private TestQuestionLineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionLineRowChangeEvent(TestQuestionLineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionLineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnswersRowChangeEvent : global::System.EventArgs {
            
            private AnswersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRowChangeEvent(AnswersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnswerRowChangeEvent : global::System.EventArgs {
            
            private AnswerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswerRowChangeEvent(AnswerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RetellingsRowChangeEvent : global::System.EventArgs {
            
            private RetellingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRowChangeEvent(RetellingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RetellingRowChangeEvent : global::System.EventArgs {
            
            private RetellingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRowChangeEvent(RetellingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsultantNotesRowChangeEvent : global::System.EventArgs {
            
            private ConsultantNotesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRowChangeEvent(ConsultantNotesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsultantConversationRowChangeEvent : global::System.EventArgs {
            
            private ConsultantConversationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRowChangeEvent(ConsultantConversationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsultantNoteRowChangeEvent : global::System.EventArgs {
            
            private ConsultantNoteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRowChangeEvent(ConsultantNoteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoachNotesRowChangeEvent : global::System.EventArgs {
            
            private CoachNotesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRowChangeEvent(CoachNotesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoachConversationRowChangeEvent : global::System.EventArgs {
            
            private CoachConversationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRowChangeEvent(CoachConversationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoachNoteRowChangeEvent : global::System.EventArgs {
            
            private CoachNoteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRowChangeEvent(CoachNoteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591