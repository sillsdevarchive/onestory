//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace OneStoryProjectEditor {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("StoryProject")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StoryProject : global::System.Data.DataSet {
        
        private storiesDataTable tablestories;
        
        private MembersDataTable tableMembers;
        
        private MemberDataTable tableMember;
        
        private FontsDataTable tableFonts;
        
        private VernacularFontDataTable tableVernacularFont;
        
        private NationalBTFontDataTable tableNationalBTFont;
        
        private InternationalBTFontDataTable tableInternationalBTFont;
        
        private storyDataTable tablestory;
        
        private CraftingInfoDataTable tableCraftingInfo;
        
        private StoryCrafterDataTable tableStoryCrafter;
        
        private StoryPurposeDataTable tableStoryPurpose;
        
        private BackTranslatorDataTable tableBackTranslator;
        
        private TestsDataTable tableTests;
        
        private TestDataTable tableTest;
        
        private editsDataTable tableedits;
        
        private editDataTable tableedit;
        
        private descriptionDataTable tabledescription;
        
        private versesDataTable tableverses;
        
        private verseDataTable tableverse;
        
        private VernacularDataTable tableVernacular;
        
        private NationalBTDataTable tableNationalBT;
        
        private InternationalBTDataTable tableInternationalBT;
        
        private anchorsDataTable tableanchors;
        
        private anchorDataTable tableanchor;
        
        private exegeticalHelpsDataTable tableexegeticalHelps;
        
        private exegeticalHelpDataTable tableexegeticalHelp;
        
        private TestQuestionsDataTable tableTestQuestions;
        
        private TestQuestionDataTable tableTestQuestion;
        
        private TQVernacularDataTable tableTQVernacular;
        
        private TQInternationalBTDataTable tableTQInternationalBT;
        
        private AnswersDataTable tableAnswers;
        
        private answerDataTable tableanswer;
        
        private RetellingsDataTable tableRetellings;
        
        private RetellingDataTable tableRetelling;
        
        private ConsultantNotesDataTable tableConsultantNotes;
        
        private ConsultantNoteDataTable tableConsultantNote;
        
        private ConsultantCommentDataTable tableConsultantComment;
        
        private CrafterResponseDataTable tableCrafterResponse;
        
        private CoachNotesDataTable tableCoachNotes;
        
        private CoachNoteDataTable tableCoachNote;
        
        private CoachCommentDataTable tableCoachComment;
        
        private ConsultantResponseDataTable tableConsultantResponse;
        
        private global::System.Data.DataRelation relationstories_Members;
        
        private global::System.Data.DataRelation relationMembers_Member;
        
        private global::System.Data.DataRelation relationstories_Fonts;
        
        private global::System.Data.DataRelation relationFonts_VernacularFont;
        
        private global::System.Data.DataRelation relationFonts_NationalBTFont;
        
        private global::System.Data.DataRelation relationFonts_InternationalBTFont;
        
        private global::System.Data.DataRelation relationstories_story;
        
        private global::System.Data.DataRelation relationstory_CraftingInfo;
        
        private global::System.Data.DataRelation relationCraftingInfo_StoryCrafter;
        
        private global::System.Data.DataRelation relationCraftingInfo_StoryPurpose;
        
        private global::System.Data.DataRelation relationCraftingInfo_BackTranslator;
        
        private global::System.Data.DataRelation relationCraftingInfo_Tests;
        
        private global::System.Data.DataRelation relationTests_Test;
        
        private global::System.Data.DataRelation relationstory_edits;
        
        private global::System.Data.DataRelation relationedits_edit;
        
        private global::System.Data.DataRelation relationedit_description;
        
        private global::System.Data.DataRelation relationstory_verses;
        
        private global::System.Data.DataRelation relationverses_verse;
        
        private global::System.Data.DataRelation relationverse_Vernacular;
        
        private global::System.Data.DataRelation relationverse_NationalBT;
        
        private global::System.Data.DataRelation relationverse_InternationalBT;
        
        private global::System.Data.DataRelation relationverse_anchors;
        
        private global::System.Data.DataRelation relationanchors_anchor;
        
        private global::System.Data.DataRelation relationanchor_exegeticalHelps;
        
        private global::System.Data.DataRelation relationexegeticalHelps_exegeticalHelp;
        
        private global::System.Data.DataRelation relationverse_TestQuestions;
        
        private global::System.Data.DataRelation relationTestQuestions_TestQuestion;
        
        private global::System.Data.DataRelation relationTestQuestion_TQVernacular;
        
        private global::System.Data.DataRelation relationTestQuestion_TQInternationalBT;
        
        private global::System.Data.DataRelation relationTestQuestion_Answers;
        
        private global::System.Data.DataRelation relationAnswers_answer;
        
        private global::System.Data.DataRelation relationverse_Retellings;
        
        private global::System.Data.DataRelation relationRetellings_Retelling;
        
        private global::System.Data.DataRelation relationverse_ConsultantNotes;
        
        private global::System.Data.DataRelation relationConsultantNotes_ConsultantNote;
        
        private global::System.Data.DataRelation relationConsultantNote_ConsultantComment;
        
        private global::System.Data.DataRelation relationConsultantNote_CrafterResponse;
        
        private global::System.Data.DataRelation relationverse_CoachNotes;
        
        private global::System.Data.DataRelation relationCoachNotes_CoachNote;
        
        private global::System.Data.DataRelation relationCoachNote_CoachComment;
        
        private global::System.Data.DataRelation relationCoachNote_ConsultantResponse;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StoryProject() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StoryProject(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["stories"] != null)) {
                    base.Tables.Add(new storiesDataTable(ds.Tables["stories"]));
                }
                if ((ds.Tables["Members"] != null)) {
                    base.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
                }
                if ((ds.Tables["Member"] != null)) {
                    base.Tables.Add(new MemberDataTable(ds.Tables["Member"]));
                }
                if ((ds.Tables["Fonts"] != null)) {
                    base.Tables.Add(new FontsDataTable(ds.Tables["Fonts"]));
                }
                if ((ds.Tables["VernacularFont"] != null)) {
                    base.Tables.Add(new VernacularFontDataTable(ds.Tables["VernacularFont"]));
                }
                if ((ds.Tables["NationalBTFont"] != null)) {
                    base.Tables.Add(new NationalBTFontDataTable(ds.Tables["NationalBTFont"]));
                }
                if ((ds.Tables["InternationalBTFont"] != null)) {
                    base.Tables.Add(new InternationalBTFontDataTable(ds.Tables["InternationalBTFont"]));
                }
                if ((ds.Tables["story"] != null)) {
                    base.Tables.Add(new storyDataTable(ds.Tables["story"]));
                }
                if ((ds.Tables["CraftingInfo"] != null)) {
                    base.Tables.Add(new CraftingInfoDataTable(ds.Tables["CraftingInfo"]));
                }
                if ((ds.Tables["StoryCrafter"] != null)) {
                    base.Tables.Add(new StoryCrafterDataTable(ds.Tables["StoryCrafter"]));
                }
                if ((ds.Tables["StoryPurpose"] != null)) {
                    base.Tables.Add(new StoryPurposeDataTable(ds.Tables["StoryPurpose"]));
                }
                if ((ds.Tables["BackTranslator"] != null)) {
                    base.Tables.Add(new BackTranslatorDataTable(ds.Tables["BackTranslator"]));
                }
                if ((ds.Tables["Tests"] != null)) {
                    base.Tables.Add(new TestsDataTable(ds.Tables["Tests"]));
                }
                if ((ds.Tables["Test"] != null)) {
                    base.Tables.Add(new TestDataTable(ds.Tables["Test"]));
                }
                if ((ds.Tables["edits"] != null)) {
                    base.Tables.Add(new editsDataTable(ds.Tables["edits"]));
                }
                if ((ds.Tables["edit"] != null)) {
                    base.Tables.Add(new editDataTable(ds.Tables["edit"]));
                }
                if ((ds.Tables["description"] != null)) {
                    base.Tables.Add(new descriptionDataTable(ds.Tables["description"]));
                }
                if ((ds.Tables["verses"] != null)) {
                    base.Tables.Add(new versesDataTable(ds.Tables["verses"]));
                }
                if ((ds.Tables["verse"] != null)) {
                    base.Tables.Add(new verseDataTable(ds.Tables["verse"]));
                }
                if ((ds.Tables["Vernacular"] != null)) {
                    base.Tables.Add(new VernacularDataTable(ds.Tables["Vernacular"]));
                }
                if ((ds.Tables["NationalBT"] != null)) {
                    base.Tables.Add(new NationalBTDataTable(ds.Tables["NationalBT"]));
                }
                if ((ds.Tables["InternationalBT"] != null)) {
                    base.Tables.Add(new InternationalBTDataTable(ds.Tables["InternationalBT"]));
                }
                if ((ds.Tables["anchors"] != null)) {
                    base.Tables.Add(new anchorsDataTable(ds.Tables["anchors"]));
                }
                if ((ds.Tables["anchor"] != null)) {
                    base.Tables.Add(new anchorDataTable(ds.Tables["anchor"]));
                }
                if ((ds.Tables["exegeticalHelps"] != null)) {
                    base.Tables.Add(new exegeticalHelpsDataTable(ds.Tables["exegeticalHelps"]));
                }
                if ((ds.Tables["exegeticalHelp"] != null)) {
                    base.Tables.Add(new exegeticalHelpDataTable(ds.Tables["exegeticalHelp"]));
                }
                if ((ds.Tables["TestQuestions"] != null)) {
                    base.Tables.Add(new TestQuestionsDataTable(ds.Tables["TestQuestions"]));
                }
                if ((ds.Tables["TestQuestion"] != null)) {
                    base.Tables.Add(new TestQuestionDataTable(ds.Tables["TestQuestion"]));
                }
                if ((ds.Tables["TQVernacular"] != null)) {
                    base.Tables.Add(new TQVernacularDataTable(ds.Tables["TQVernacular"]));
                }
                if ((ds.Tables["TQInternationalBT"] != null)) {
                    base.Tables.Add(new TQInternationalBTDataTable(ds.Tables["TQInternationalBT"]));
                }
                if ((ds.Tables["Answers"] != null)) {
                    base.Tables.Add(new AnswersDataTable(ds.Tables["Answers"]));
                }
                if ((ds.Tables["answer"] != null)) {
                    base.Tables.Add(new answerDataTable(ds.Tables["answer"]));
                }
                if ((ds.Tables["Retellings"] != null)) {
                    base.Tables.Add(new RetellingsDataTable(ds.Tables["Retellings"]));
                }
                if ((ds.Tables["Retelling"] != null)) {
                    base.Tables.Add(new RetellingDataTable(ds.Tables["Retelling"]));
                }
                if ((ds.Tables["ConsultantNotes"] != null)) {
                    base.Tables.Add(new ConsultantNotesDataTable(ds.Tables["ConsultantNotes"]));
                }
                if ((ds.Tables["ConsultantNote"] != null)) {
                    base.Tables.Add(new ConsultantNoteDataTable(ds.Tables["ConsultantNote"]));
                }
                if ((ds.Tables["ConsultantComment"] != null)) {
                    base.Tables.Add(new ConsultantCommentDataTable(ds.Tables["ConsultantComment"]));
                }
                if ((ds.Tables["CrafterResponse"] != null)) {
                    base.Tables.Add(new CrafterResponseDataTable(ds.Tables["CrafterResponse"]));
                }
                if ((ds.Tables["CoachNotes"] != null)) {
                    base.Tables.Add(new CoachNotesDataTable(ds.Tables["CoachNotes"]));
                }
                if ((ds.Tables["CoachNote"] != null)) {
                    base.Tables.Add(new CoachNoteDataTable(ds.Tables["CoachNote"]));
                }
                if ((ds.Tables["CoachComment"] != null)) {
                    base.Tables.Add(new CoachCommentDataTable(ds.Tables["CoachComment"]));
                }
                if ((ds.Tables["ConsultantResponse"] != null)) {
                    base.Tables.Add(new ConsultantResponseDataTable(ds.Tables["ConsultantResponse"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public storiesDataTable stories {
            get {
                return this.tablestories;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MembersDataTable Members {
            get {
                return this.tableMembers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MemberDataTable Member {
            get {
                return this.tableMember;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FontsDataTable Fonts {
            get {
                return this.tableFonts;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VernacularFontDataTable VernacularFont {
            get {
                return this.tableVernacularFont;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NationalBTFontDataTable NationalBTFont {
            get {
                return this.tableNationalBTFont;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InternationalBTFontDataTable InternationalBTFont {
            get {
                return this.tableInternationalBTFont;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public storyDataTable story {
            get {
                return this.tablestory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CraftingInfoDataTable CraftingInfo {
            get {
                return this.tableCraftingInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StoryCrafterDataTable StoryCrafter {
            get {
                return this.tableStoryCrafter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StoryPurposeDataTable StoryPurpose {
            get {
                return this.tableStoryPurpose;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BackTranslatorDataTable BackTranslator {
            get {
                return this.tableBackTranslator;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestsDataTable Tests {
            get {
                return this.tableTests;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestDataTable Test {
            get {
                return this.tableTest;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public editsDataTable edits {
            get {
                return this.tableedits;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public editDataTable edit {
            get {
                return this.tableedit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public descriptionDataTable description {
            get {
                return this.tabledescription;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public versesDataTable verses {
            get {
                return this.tableverses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public verseDataTable verse {
            get {
                return this.tableverse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VernacularDataTable Vernacular {
            get {
                return this.tableVernacular;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NationalBTDataTable NationalBT {
            get {
                return this.tableNationalBT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InternationalBTDataTable InternationalBT {
            get {
                return this.tableInternationalBT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public anchorsDataTable anchors {
            get {
                return this.tableanchors;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public anchorDataTable anchor {
            get {
                return this.tableanchor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public exegeticalHelpsDataTable exegeticalHelps {
            get {
                return this.tableexegeticalHelps;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public exegeticalHelpDataTable exegeticalHelp {
            get {
                return this.tableexegeticalHelp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestQuestionsDataTable TestQuestions {
            get {
                return this.tableTestQuestions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestQuestionDataTable TestQuestion {
            get {
                return this.tableTestQuestion;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TQVernacularDataTable TQVernacular {
            get {
                return this.tableTQVernacular;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TQInternationalBTDataTable TQInternationalBT {
            get {
                return this.tableTQInternationalBT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnswersDataTable Answers {
            get {
                return this.tableAnswers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public answerDataTable answer {
            get {
                return this.tableanswer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RetellingsDataTable Retellings {
            get {
                return this.tableRetellings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RetellingDataTable Retelling {
            get {
                return this.tableRetelling;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsultantNotesDataTable ConsultantNotes {
            get {
                return this.tableConsultantNotes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsultantNoteDataTable ConsultantNote {
            get {
                return this.tableConsultantNote;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsultantCommentDataTable ConsultantComment {
            get {
                return this.tableConsultantComment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CrafterResponseDataTable CrafterResponse {
            get {
                return this.tableCrafterResponse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoachNotesDataTable CoachNotes {
            get {
                return this.tableCoachNotes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoachNoteDataTable CoachNote {
            get {
                return this.tableCoachNote;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoachCommentDataTable CoachComment {
            get {
                return this.tableCoachComment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsultantResponseDataTable ConsultantResponse {
            get {
                return this.tableConsultantResponse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            StoryProject cln = ((StoryProject)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["stories"] != null)) {
                    base.Tables.Add(new storiesDataTable(ds.Tables["stories"]));
                }
                if ((ds.Tables["Members"] != null)) {
                    base.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
                }
                if ((ds.Tables["Member"] != null)) {
                    base.Tables.Add(new MemberDataTable(ds.Tables["Member"]));
                }
                if ((ds.Tables["Fonts"] != null)) {
                    base.Tables.Add(new FontsDataTable(ds.Tables["Fonts"]));
                }
                if ((ds.Tables["VernacularFont"] != null)) {
                    base.Tables.Add(new VernacularFontDataTable(ds.Tables["VernacularFont"]));
                }
                if ((ds.Tables["NationalBTFont"] != null)) {
                    base.Tables.Add(new NationalBTFontDataTable(ds.Tables["NationalBTFont"]));
                }
                if ((ds.Tables["InternationalBTFont"] != null)) {
                    base.Tables.Add(new InternationalBTFontDataTable(ds.Tables["InternationalBTFont"]));
                }
                if ((ds.Tables["story"] != null)) {
                    base.Tables.Add(new storyDataTable(ds.Tables["story"]));
                }
                if ((ds.Tables["CraftingInfo"] != null)) {
                    base.Tables.Add(new CraftingInfoDataTable(ds.Tables["CraftingInfo"]));
                }
                if ((ds.Tables["StoryCrafter"] != null)) {
                    base.Tables.Add(new StoryCrafterDataTable(ds.Tables["StoryCrafter"]));
                }
                if ((ds.Tables["StoryPurpose"] != null)) {
                    base.Tables.Add(new StoryPurposeDataTable(ds.Tables["StoryPurpose"]));
                }
                if ((ds.Tables["BackTranslator"] != null)) {
                    base.Tables.Add(new BackTranslatorDataTable(ds.Tables["BackTranslator"]));
                }
                if ((ds.Tables["Tests"] != null)) {
                    base.Tables.Add(new TestsDataTable(ds.Tables["Tests"]));
                }
                if ((ds.Tables["Test"] != null)) {
                    base.Tables.Add(new TestDataTable(ds.Tables["Test"]));
                }
                if ((ds.Tables["edits"] != null)) {
                    base.Tables.Add(new editsDataTable(ds.Tables["edits"]));
                }
                if ((ds.Tables["edit"] != null)) {
                    base.Tables.Add(new editDataTable(ds.Tables["edit"]));
                }
                if ((ds.Tables["description"] != null)) {
                    base.Tables.Add(new descriptionDataTable(ds.Tables["description"]));
                }
                if ((ds.Tables["verses"] != null)) {
                    base.Tables.Add(new versesDataTable(ds.Tables["verses"]));
                }
                if ((ds.Tables["verse"] != null)) {
                    base.Tables.Add(new verseDataTable(ds.Tables["verse"]));
                }
                if ((ds.Tables["Vernacular"] != null)) {
                    base.Tables.Add(new VernacularDataTable(ds.Tables["Vernacular"]));
                }
                if ((ds.Tables["NationalBT"] != null)) {
                    base.Tables.Add(new NationalBTDataTable(ds.Tables["NationalBT"]));
                }
                if ((ds.Tables["InternationalBT"] != null)) {
                    base.Tables.Add(new InternationalBTDataTable(ds.Tables["InternationalBT"]));
                }
                if ((ds.Tables["anchors"] != null)) {
                    base.Tables.Add(new anchorsDataTable(ds.Tables["anchors"]));
                }
                if ((ds.Tables["anchor"] != null)) {
                    base.Tables.Add(new anchorDataTable(ds.Tables["anchor"]));
                }
                if ((ds.Tables["exegeticalHelps"] != null)) {
                    base.Tables.Add(new exegeticalHelpsDataTable(ds.Tables["exegeticalHelps"]));
                }
                if ((ds.Tables["exegeticalHelp"] != null)) {
                    base.Tables.Add(new exegeticalHelpDataTable(ds.Tables["exegeticalHelp"]));
                }
                if ((ds.Tables["TestQuestions"] != null)) {
                    base.Tables.Add(new TestQuestionsDataTable(ds.Tables["TestQuestions"]));
                }
                if ((ds.Tables["TestQuestion"] != null)) {
                    base.Tables.Add(new TestQuestionDataTable(ds.Tables["TestQuestion"]));
                }
                if ((ds.Tables["TQVernacular"] != null)) {
                    base.Tables.Add(new TQVernacularDataTable(ds.Tables["TQVernacular"]));
                }
                if ((ds.Tables["TQInternationalBT"] != null)) {
                    base.Tables.Add(new TQInternationalBTDataTable(ds.Tables["TQInternationalBT"]));
                }
                if ((ds.Tables["Answers"] != null)) {
                    base.Tables.Add(new AnswersDataTable(ds.Tables["Answers"]));
                }
                if ((ds.Tables["answer"] != null)) {
                    base.Tables.Add(new answerDataTable(ds.Tables["answer"]));
                }
                if ((ds.Tables["Retellings"] != null)) {
                    base.Tables.Add(new RetellingsDataTable(ds.Tables["Retellings"]));
                }
                if ((ds.Tables["Retelling"] != null)) {
                    base.Tables.Add(new RetellingDataTable(ds.Tables["Retelling"]));
                }
                if ((ds.Tables["ConsultantNotes"] != null)) {
                    base.Tables.Add(new ConsultantNotesDataTable(ds.Tables["ConsultantNotes"]));
                }
                if ((ds.Tables["ConsultantNote"] != null)) {
                    base.Tables.Add(new ConsultantNoteDataTable(ds.Tables["ConsultantNote"]));
                }
                if ((ds.Tables["ConsultantComment"] != null)) {
                    base.Tables.Add(new ConsultantCommentDataTable(ds.Tables["ConsultantComment"]));
                }
                if ((ds.Tables["CrafterResponse"] != null)) {
                    base.Tables.Add(new CrafterResponseDataTable(ds.Tables["CrafterResponse"]));
                }
                if ((ds.Tables["CoachNotes"] != null)) {
                    base.Tables.Add(new CoachNotesDataTable(ds.Tables["CoachNotes"]));
                }
                if ((ds.Tables["CoachNote"] != null)) {
                    base.Tables.Add(new CoachNoteDataTable(ds.Tables["CoachNote"]));
                }
                if ((ds.Tables["CoachComment"] != null)) {
                    base.Tables.Add(new CoachCommentDataTable(ds.Tables["CoachComment"]));
                }
                if ((ds.Tables["ConsultantResponse"] != null)) {
                    base.Tables.Add(new ConsultantResponseDataTable(ds.Tables["ConsultantResponse"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablestories = ((storiesDataTable)(base.Tables["stories"]));
            if ((initTable == true)) {
                if ((this.tablestories != null)) {
                    this.tablestories.InitVars();
                }
            }
            this.tableMembers = ((MembersDataTable)(base.Tables["Members"]));
            if ((initTable == true)) {
                if ((this.tableMembers != null)) {
                    this.tableMembers.InitVars();
                }
            }
            this.tableMember = ((MemberDataTable)(base.Tables["Member"]));
            if ((initTable == true)) {
                if ((this.tableMember != null)) {
                    this.tableMember.InitVars();
                }
            }
            this.tableFonts = ((FontsDataTable)(base.Tables["Fonts"]));
            if ((initTable == true)) {
                if ((this.tableFonts != null)) {
                    this.tableFonts.InitVars();
                }
            }
            this.tableVernacularFont = ((VernacularFontDataTable)(base.Tables["VernacularFont"]));
            if ((initTable == true)) {
                if ((this.tableVernacularFont != null)) {
                    this.tableVernacularFont.InitVars();
                }
            }
            this.tableNationalBTFont = ((NationalBTFontDataTable)(base.Tables["NationalBTFont"]));
            if ((initTable == true)) {
                if ((this.tableNationalBTFont != null)) {
                    this.tableNationalBTFont.InitVars();
                }
            }
            this.tableInternationalBTFont = ((InternationalBTFontDataTable)(base.Tables["InternationalBTFont"]));
            if ((initTable == true)) {
                if ((this.tableInternationalBTFont != null)) {
                    this.tableInternationalBTFont.InitVars();
                }
            }
            this.tablestory = ((storyDataTable)(base.Tables["story"]));
            if ((initTable == true)) {
                if ((this.tablestory != null)) {
                    this.tablestory.InitVars();
                }
            }
            this.tableCraftingInfo = ((CraftingInfoDataTable)(base.Tables["CraftingInfo"]));
            if ((initTable == true)) {
                if ((this.tableCraftingInfo != null)) {
                    this.tableCraftingInfo.InitVars();
                }
            }
            this.tableStoryCrafter = ((StoryCrafterDataTable)(base.Tables["StoryCrafter"]));
            if ((initTable == true)) {
                if ((this.tableStoryCrafter != null)) {
                    this.tableStoryCrafter.InitVars();
                }
            }
            this.tableStoryPurpose = ((StoryPurposeDataTable)(base.Tables["StoryPurpose"]));
            if ((initTable == true)) {
                if ((this.tableStoryPurpose != null)) {
                    this.tableStoryPurpose.InitVars();
                }
            }
            this.tableBackTranslator = ((BackTranslatorDataTable)(base.Tables["BackTranslator"]));
            if ((initTable == true)) {
                if ((this.tableBackTranslator != null)) {
                    this.tableBackTranslator.InitVars();
                }
            }
            this.tableTests = ((TestsDataTable)(base.Tables["Tests"]));
            if ((initTable == true)) {
                if ((this.tableTests != null)) {
                    this.tableTests.InitVars();
                }
            }
            this.tableTest = ((TestDataTable)(base.Tables["Test"]));
            if ((initTable == true)) {
                if ((this.tableTest != null)) {
                    this.tableTest.InitVars();
                }
            }
            this.tableedits = ((editsDataTable)(base.Tables["edits"]));
            if ((initTable == true)) {
                if ((this.tableedits != null)) {
                    this.tableedits.InitVars();
                }
            }
            this.tableedit = ((editDataTable)(base.Tables["edit"]));
            if ((initTable == true)) {
                if ((this.tableedit != null)) {
                    this.tableedit.InitVars();
                }
            }
            this.tabledescription = ((descriptionDataTable)(base.Tables["description"]));
            if ((initTable == true)) {
                if ((this.tabledescription != null)) {
                    this.tabledescription.InitVars();
                }
            }
            this.tableverses = ((versesDataTable)(base.Tables["verses"]));
            if ((initTable == true)) {
                if ((this.tableverses != null)) {
                    this.tableverses.InitVars();
                }
            }
            this.tableverse = ((verseDataTable)(base.Tables["verse"]));
            if ((initTable == true)) {
                if ((this.tableverse != null)) {
                    this.tableverse.InitVars();
                }
            }
            this.tableVernacular = ((VernacularDataTable)(base.Tables["Vernacular"]));
            if ((initTable == true)) {
                if ((this.tableVernacular != null)) {
                    this.tableVernacular.InitVars();
                }
            }
            this.tableNationalBT = ((NationalBTDataTable)(base.Tables["NationalBT"]));
            if ((initTable == true)) {
                if ((this.tableNationalBT != null)) {
                    this.tableNationalBT.InitVars();
                }
            }
            this.tableInternationalBT = ((InternationalBTDataTable)(base.Tables["InternationalBT"]));
            if ((initTable == true)) {
                if ((this.tableInternationalBT != null)) {
                    this.tableInternationalBT.InitVars();
                }
            }
            this.tableanchors = ((anchorsDataTable)(base.Tables["anchors"]));
            if ((initTable == true)) {
                if ((this.tableanchors != null)) {
                    this.tableanchors.InitVars();
                }
            }
            this.tableanchor = ((anchorDataTable)(base.Tables["anchor"]));
            if ((initTable == true)) {
                if ((this.tableanchor != null)) {
                    this.tableanchor.InitVars();
                }
            }
            this.tableexegeticalHelps = ((exegeticalHelpsDataTable)(base.Tables["exegeticalHelps"]));
            if ((initTable == true)) {
                if ((this.tableexegeticalHelps != null)) {
                    this.tableexegeticalHelps.InitVars();
                }
            }
            this.tableexegeticalHelp = ((exegeticalHelpDataTable)(base.Tables["exegeticalHelp"]));
            if ((initTable == true)) {
                if ((this.tableexegeticalHelp != null)) {
                    this.tableexegeticalHelp.InitVars();
                }
            }
            this.tableTestQuestions = ((TestQuestionsDataTable)(base.Tables["TestQuestions"]));
            if ((initTable == true)) {
                if ((this.tableTestQuestions != null)) {
                    this.tableTestQuestions.InitVars();
                }
            }
            this.tableTestQuestion = ((TestQuestionDataTable)(base.Tables["TestQuestion"]));
            if ((initTable == true)) {
                if ((this.tableTestQuestion != null)) {
                    this.tableTestQuestion.InitVars();
                }
            }
            this.tableTQVernacular = ((TQVernacularDataTable)(base.Tables["TQVernacular"]));
            if ((initTable == true)) {
                if ((this.tableTQVernacular != null)) {
                    this.tableTQVernacular.InitVars();
                }
            }
            this.tableTQInternationalBT = ((TQInternationalBTDataTable)(base.Tables["TQInternationalBT"]));
            if ((initTable == true)) {
                if ((this.tableTQInternationalBT != null)) {
                    this.tableTQInternationalBT.InitVars();
                }
            }
            this.tableAnswers = ((AnswersDataTable)(base.Tables["Answers"]));
            if ((initTable == true)) {
                if ((this.tableAnswers != null)) {
                    this.tableAnswers.InitVars();
                }
            }
            this.tableanswer = ((answerDataTable)(base.Tables["answer"]));
            if ((initTable == true)) {
                if ((this.tableanswer != null)) {
                    this.tableanswer.InitVars();
                }
            }
            this.tableRetellings = ((RetellingsDataTable)(base.Tables["Retellings"]));
            if ((initTable == true)) {
                if ((this.tableRetellings != null)) {
                    this.tableRetellings.InitVars();
                }
            }
            this.tableRetelling = ((RetellingDataTable)(base.Tables["Retelling"]));
            if ((initTable == true)) {
                if ((this.tableRetelling != null)) {
                    this.tableRetelling.InitVars();
                }
            }
            this.tableConsultantNotes = ((ConsultantNotesDataTable)(base.Tables["ConsultantNotes"]));
            if ((initTable == true)) {
                if ((this.tableConsultantNotes != null)) {
                    this.tableConsultantNotes.InitVars();
                }
            }
            this.tableConsultantNote = ((ConsultantNoteDataTable)(base.Tables["ConsultantNote"]));
            if ((initTable == true)) {
                if ((this.tableConsultantNote != null)) {
                    this.tableConsultantNote.InitVars();
                }
            }
            this.tableConsultantComment = ((ConsultantCommentDataTable)(base.Tables["ConsultantComment"]));
            if ((initTable == true)) {
                if ((this.tableConsultantComment != null)) {
                    this.tableConsultantComment.InitVars();
                }
            }
            this.tableCrafterResponse = ((CrafterResponseDataTable)(base.Tables["CrafterResponse"]));
            if ((initTable == true)) {
                if ((this.tableCrafterResponse != null)) {
                    this.tableCrafterResponse.InitVars();
                }
            }
            this.tableCoachNotes = ((CoachNotesDataTable)(base.Tables["CoachNotes"]));
            if ((initTable == true)) {
                if ((this.tableCoachNotes != null)) {
                    this.tableCoachNotes.InitVars();
                }
            }
            this.tableCoachNote = ((CoachNoteDataTable)(base.Tables["CoachNote"]));
            if ((initTable == true)) {
                if ((this.tableCoachNote != null)) {
                    this.tableCoachNote.InitVars();
                }
            }
            this.tableCoachComment = ((CoachCommentDataTable)(base.Tables["CoachComment"]));
            if ((initTable == true)) {
                if ((this.tableCoachComment != null)) {
                    this.tableCoachComment.InitVars();
                }
            }
            this.tableConsultantResponse = ((ConsultantResponseDataTable)(base.Tables["ConsultantResponse"]));
            if ((initTable == true)) {
                if ((this.tableConsultantResponse != null)) {
                    this.tableConsultantResponse.InitVars();
                }
            }
            this.relationstories_Members = this.Relations["stories_Members"];
            this.relationMembers_Member = this.Relations["Members_Member"];
            this.relationstories_Fonts = this.Relations["stories_Fonts"];
            this.relationFonts_VernacularFont = this.Relations["Fonts_VernacularFont"];
            this.relationFonts_NationalBTFont = this.Relations["Fonts_NationalBTFont"];
            this.relationFonts_InternationalBTFont = this.Relations["Fonts_InternationalBTFont"];
            this.relationstories_story = this.Relations["stories_story"];
            this.relationstory_CraftingInfo = this.Relations["story_CraftingInfo"];
            this.relationCraftingInfo_StoryCrafter = this.Relations["CraftingInfo_StoryCrafter"];
            this.relationCraftingInfo_StoryPurpose = this.Relations["CraftingInfo_StoryPurpose"];
            this.relationCraftingInfo_BackTranslator = this.Relations["CraftingInfo_BackTranslator"];
            this.relationCraftingInfo_Tests = this.Relations["CraftingInfo_Tests"];
            this.relationTests_Test = this.Relations["Tests_Test"];
            this.relationstory_edits = this.Relations["story_edits"];
            this.relationedits_edit = this.Relations["edits_edit"];
            this.relationedit_description = this.Relations["edit_description"];
            this.relationstory_verses = this.Relations["story_verses"];
            this.relationverses_verse = this.Relations["verses_verse"];
            this.relationverse_Vernacular = this.Relations["verse_Vernacular"];
            this.relationverse_NationalBT = this.Relations["verse_NationalBT"];
            this.relationverse_InternationalBT = this.Relations["verse_InternationalBT"];
            this.relationverse_anchors = this.Relations["verse_anchors"];
            this.relationanchors_anchor = this.Relations["anchors_anchor"];
            this.relationanchor_exegeticalHelps = this.Relations["anchor_exegeticalHelps"];
            this.relationexegeticalHelps_exegeticalHelp = this.Relations["exegeticalHelps_exegeticalHelp"];
            this.relationverse_TestQuestions = this.Relations["verse_TestQuestions"];
            this.relationTestQuestions_TestQuestion = this.Relations["TestQuestions_TestQuestion"];
            this.relationTestQuestion_TQVernacular = this.Relations["TestQuestion_TQVernacular"];
            this.relationTestQuestion_TQInternationalBT = this.Relations["TestQuestion_TQInternationalBT"];
            this.relationTestQuestion_Answers = this.Relations["TestQuestion_Answers"];
            this.relationAnswers_answer = this.Relations["Answers_answer"];
            this.relationverse_Retellings = this.Relations["verse_Retellings"];
            this.relationRetellings_Retelling = this.Relations["Retellings_Retelling"];
            this.relationverse_ConsultantNotes = this.Relations["verse_ConsultantNotes"];
            this.relationConsultantNotes_ConsultantNote = this.Relations["ConsultantNotes_ConsultantNote"];
            this.relationConsultantNote_ConsultantComment = this.Relations["ConsultantNote_ConsultantComment"];
            this.relationConsultantNote_CrafterResponse = this.Relations["ConsultantNote_CrafterResponse"];
            this.relationverse_CoachNotes = this.Relations["verse_CoachNotes"];
            this.relationCoachNotes_CoachNote = this.Relations["CoachNotes_CoachNote"];
            this.relationCoachNote_CoachComment = this.Relations["CoachNote_CoachComment"];
            this.relationCoachNote_ConsultantResponse = this.Relations["CoachNote_ConsultantResponse"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StoryProject";
            this.Prefix = "";
            this.Namespace = "http://www.sil.org/computing/schemas/StoryProject.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablestories = new storiesDataTable();
            base.Tables.Add(this.tablestories);
            this.tableMembers = new MembersDataTable();
            base.Tables.Add(this.tableMembers);
            this.tableMember = new MemberDataTable();
            base.Tables.Add(this.tableMember);
            this.tableFonts = new FontsDataTable();
            base.Tables.Add(this.tableFonts);
            this.tableVernacularFont = new VernacularFontDataTable();
            base.Tables.Add(this.tableVernacularFont);
            this.tableNationalBTFont = new NationalBTFontDataTable();
            base.Tables.Add(this.tableNationalBTFont);
            this.tableInternationalBTFont = new InternationalBTFontDataTable();
            base.Tables.Add(this.tableInternationalBTFont);
            this.tablestory = new storyDataTable();
            base.Tables.Add(this.tablestory);
            this.tableCraftingInfo = new CraftingInfoDataTable();
            base.Tables.Add(this.tableCraftingInfo);
            this.tableStoryCrafter = new StoryCrafterDataTable();
            base.Tables.Add(this.tableStoryCrafter);
            this.tableStoryPurpose = new StoryPurposeDataTable();
            base.Tables.Add(this.tableStoryPurpose);
            this.tableBackTranslator = new BackTranslatorDataTable();
            base.Tables.Add(this.tableBackTranslator);
            this.tableTests = new TestsDataTable();
            base.Tables.Add(this.tableTests);
            this.tableTest = new TestDataTable();
            base.Tables.Add(this.tableTest);
            this.tableedits = new editsDataTable();
            base.Tables.Add(this.tableedits);
            this.tableedit = new editDataTable();
            base.Tables.Add(this.tableedit);
            this.tabledescription = new descriptionDataTable();
            base.Tables.Add(this.tabledescription);
            this.tableverses = new versesDataTable();
            base.Tables.Add(this.tableverses);
            this.tableverse = new verseDataTable();
            base.Tables.Add(this.tableverse);
            this.tableVernacular = new VernacularDataTable();
            base.Tables.Add(this.tableVernacular);
            this.tableNationalBT = new NationalBTDataTable();
            base.Tables.Add(this.tableNationalBT);
            this.tableInternationalBT = new InternationalBTDataTable();
            base.Tables.Add(this.tableInternationalBT);
            this.tableanchors = new anchorsDataTable();
            base.Tables.Add(this.tableanchors);
            this.tableanchor = new anchorDataTable();
            base.Tables.Add(this.tableanchor);
            this.tableexegeticalHelps = new exegeticalHelpsDataTable();
            base.Tables.Add(this.tableexegeticalHelps);
            this.tableexegeticalHelp = new exegeticalHelpDataTable();
            base.Tables.Add(this.tableexegeticalHelp);
            this.tableTestQuestions = new TestQuestionsDataTable();
            base.Tables.Add(this.tableTestQuestions);
            this.tableTestQuestion = new TestQuestionDataTable();
            base.Tables.Add(this.tableTestQuestion);
            this.tableTQVernacular = new TQVernacularDataTable();
            base.Tables.Add(this.tableTQVernacular);
            this.tableTQInternationalBT = new TQInternationalBTDataTable();
            base.Tables.Add(this.tableTQInternationalBT);
            this.tableAnswers = new AnswersDataTable();
            base.Tables.Add(this.tableAnswers);
            this.tableanswer = new answerDataTable();
            base.Tables.Add(this.tableanswer);
            this.tableRetellings = new RetellingsDataTable();
            base.Tables.Add(this.tableRetellings);
            this.tableRetelling = new RetellingDataTable();
            base.Tables.Add(this.tableRetelling);
            this.tableConsultantNotes = new ConsultantNotesDataTable();
            base.Tables.Add(this.tableConsultantNotes);
            this.tableConsultantNote = new ConsultantNoteDataTable();
            base.Tables.Add(this.tableConsultantNote);
            this.tableConsultantComment = new ConsultantCommentDataTable();
            base.Tables.Add(this.tableConsultantComment);
            this.tableCrafterResponse = new CrafterResponseDataTable();
            base.Tables.Add(this.tableCrafterResponse);
            this.tableCoachNotes = new CoachNotesDataTable();
            base.Tables.Add(this.tableCoachNotes);
            this.tableCoachNote = new CoachNoteDataTable();
            base.Tables.Add(this.tableCoachNote);
            this.tableCoachComment = new CoachCommentDataTable();
            base.Tables.Add(this.tableCoachComment);
            this.tableConsultantResponse = new ConsultantResponseDataTable();
            base.Tables.Add(this.tableConsultantResponse);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("stories_Members", new global::System.Data.DataColumn[] {
                        this.tablestories.stories_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMembers.stories_IdColumn});
            this.tableMembers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Members_Member", new global::System.Data.DataColumn[] {
                        this.tableMembers.Members_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMember.Members_IdColumn});
            this.tableMember.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("stories_Fonts", new global::System.Data.DataColumn[] {
                        this.tablestories.stories_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableFonts.stories_IdColumn});
            this.tableFonts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Fonts_VernacularFont", new global::System.Data.DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableVernacularFont.Fonts_IdColumn});
            this.tableVernacularFont.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Fonts_NationalBTFont", new global::System.Data.DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableNationalBTFont.Fonts_IdColumn});
            this.tableNationalBTFont.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Fonts_InternationalBTFont", new global::System.Data.DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableInternationalBTFont.Fonts_IdColumn});
            this.tableInternationalBTFont.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("stories_story", new global::System.Data.DataColumn[] {
                        this.tablestories.stories_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestory.stories_IdColumn});
            this.tablestory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("story_CraftingInfo", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.story_IdColumn});
            this.tableCraftingInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_StoryCrafter", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStoryCrafter.CraftingInfo_IdColumn});
            this.tableStoryCrafter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_StoryPurpose", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStoryPurpose.CraftingInfo_IdColumn});
            this.tableStoryPurpose.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_BackTranslator", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableBackTranslator.CraftingInfo_IdColumn});
            this.tableBackTranslator.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_Tests", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTests.CraftingInfo_IdColumn});
            this.tableTests.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Tests_Test", new global::System.Data.DataColumn[] {
                        this.tableTests.Tests_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTest.Tests_IdColumn});
            this.tableTest.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("story_edits", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableedits.story_IdColumn});
            this.tableedits.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("edits_edit", new global::System.Data.DataColumn[] {
                        this.tableedits.edits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableedit.edits_IdColumn});
            this.tableedit.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("edit_description", new global::System.Data.DataColumn[] {
                        this.tableedit.editKeyColumn}, new global::System.Data.DataColumn[] {
                        this.tabledescription.editKeyColumn});
            this.tabledescription.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("story_verses", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableverses.story_IdColumn});
            this.tableverses.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verses_verse", new global::System.Data.DataColumn[] {
                        this.tableverses.verses_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableverse.verses_IdColumn});
            this.tableverse.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_Vernacular", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableVernacular.verse_IdColumn});
            this.tableVernacular.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_NationalBT", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableNationalBT.verse_IdColumn});
            this.tableNationalBT.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_InternationalBT", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableInternationalBT.verse_IdColumn});
            this.tableInternationalBT.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_anchors", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanchors.verse_IdColumn});
            this.tableanchors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("anchors_anchor", new global::System.Data.DataColumn[] {
                        this.tableanchors.anchors_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanchor.anchors_IdColumn});
            this.tableanchor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("anchor_exegeticalHelps", new global::System.Data.DataColumn[] {
                        this.tableanchor.anchor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelps.anchor_IdColumn});
            this.tableexegeticalHelps.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("exegeticalHelps_exegeticalHelp", new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelps.exegeticalHelps_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelp.exegeticalHelps_IdColumn});
            this.tableexegeticalHelp.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_TestQuestions", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.verse_IdColumn});
            this.tableTestQuestions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TestQuestions_TestQuestion", new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.TestQuestions_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestions_IdColumn});
            this.tableTestQuestion.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TestQuestion_TQVernacular", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTQVernacular.TestQuestion_IdColumn});
            this.tableTQVernacular.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TestQuestion_TQInternationalBT", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTQInternationalBT.TestQuestion_IdColumn});
            this.tableTQInternationalBT.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TestQuestion_Answers", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnswers.TestQuestion_IdColumn});
            this.tableAnswers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Answers_answer", new global::System.Data.DataColumn[] {
                        this.tableAnswers.Answers_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanswer.Answers_IdColumn});
            this.tableanswer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_Retellings", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetellings.verse_IdColumn});
            this.tableRetellings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Retellings_Retelling", new global::System.Data.DataColumn[] {
                        this.tableRetellings.Retellings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetelling.Retellings_IdColumn});
            this.tableRetelling.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_ConsultantNotes", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.verse_IdColumn});
            this.tableConsultantNotes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ConsultantNotes_ConsultantNote", new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.ConsultantNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNote.ConsultantNotes_IdColumn});
            this.tableConsultantNote.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ConsultantNote_ConsultantComment", new global::System.Data.DataColumn[] {
                        this.tableConsultantNote.ConsultantNote_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantComment.ConsultantNote_IdColumn});
            this.tableConsultantComment.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ConsultantNote_CrafterResponse", new global::System.Data.DataColumn[] {
                        this.tableConsultantNote.ConsultantNote_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCrafterResponse.ConsultantNote_IdColumn});
            this.tableCrafterResponse.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_CoachNotes", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.verse_IdColumn});
            this.tableCoachNotes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CoachNotes_CoachNote", new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.CoachNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNote.CoachNotes_IdColumn});
            this.tableCoachNote.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CoachNote_CoachComment", new global::System.Data.DataColumn[] {
                        this.tableCoachNote.CoachNote_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachComment.CoachNote_IdColumn});
            this.tableCoachComment.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CoachNote_ConsultantResponse", new global::System.Data.DataColumn[] {
                        this.tableCoachNote.CoachNote_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantResponse.CoachNote_IdColumn});
            this.tableConsultantResponse.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationstories_Members = new global::System.Data.DataRelation("stories_Members", new global::System.Data.DataColumn[] {
                        this.tablestories.stories_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMembers.stories_IdColumn}, false);
            this.relationstories_Members.Nested = true;
            this.Relations.Add(this.relationstories_Members);
            this.relationMembers_Member = new global::System.Data.DataRelation("Members_Member", new global::System.Data.DataColumn[] {
                        this.tableMembers.Members_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMember.Members_IdColumn}, false);
            this.relationMembers_Member.Nested = true;
            this.Relations.Add(this.relationMembers_Member);
            this.relationstories_Fonts = new global::System.Data.DataRelation("stories_Fonts", new global::System.Data.DataColumn[] {
                        this.tablestories.stories_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableFonts.stories_IdColumn}, false);
            this.relationstories_Fonts.Nested = true;
            this.Relations.Add(this.relationstories_Fonts);
            this.relationFonts_VernacularFont = new global::System.Data.DataRelation("Fonts_VernacularFont", new global::System.Data.DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableVernacularFont.Fonts_IdColumn}, false);
            this.relationFonts_VernacularFont.Nested = true;
            this.Relations.Add(this.relationFonts_VernacularFont);
            this.relationFonts_NationalBTFont = new global::System.Data.DataRelation("Fonts_NationalBTFont", new global::System.Data.DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableNationalBTFont.Fonts_IdColumn}, false);
            this.relationFonts_NationalBTFont.Nested = true;
            this.Relations.Add(this.relationFonts_NationalBTFont);
            this.relationFonts_InternationalBTFont = new global::System.Data.DataRelation("Fonts_InternationalBTFont", new global::System.Data.DataColumn[] {
                        this.tableFonts.Fonts_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableInternationalBTFont.Fonts_IdColumn}, false);
            this.relationFonts_InternationalBTFont.Nested = true;
            this.Relations.Add(this.relationFonts_InternationalBTFont);
            this.relationstories_story = new global::System.Data.DataRelation("stories_story", new global::System.Data.DataColumn[] {
                        this.tablestories.stories_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestory.stories_IdColumn}, false);
            this.relationstories_story.Nested = true;
            this.Relations.Add(this.relationstories_story);
            this.relationstory_CraftingInfo = new global::System.Data.DataRelation("story_CraftingInfo", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.story_IdColumn}, false);
            this.relationstory_CraftingInfo.Nested = true;
            this.Relations.Add(this.relationstory_CraftingInfo);
            this.relationCraftingInfo_StoryCrafter = new global::System.Data.DataRelation("CraftingInfo_StoryCrafter", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStoryCrafter.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_StoryCrafter.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_StoryCrafter);
            this.relationCraftingInfo_StoryPurpose = new global::System.Data.DataRelation("CraftingInfo_StoryPurpose", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStoryPurpose.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_StoryPurpose.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_StoryPurpose);
            this.relationCraftingInfo_BackTranslator = new global::System.Data.DataRelation("CraftingInfo_BackTranslator", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableBackTranslator.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_BackTranslator.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_BackTranslator);
            this.relationCraftingInfo_Tests = new global::System.Data.DataRelation("CraftingInfo_Tests", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTests.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_Tests.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_Tests);
            this.relationTests_Test = new global::System.Data.DataRelation("Tests_Test", new global::System.Data.DataColumn[] {
                        this.tableTests.Tests_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTest.Tests_IdColumn}, false);
            this.relationTests_Test.Nested = true;
            this.Relations.Add(this.relationTests_Test);
            this.relationstory_edits = new global::System.Data.DataRelation("story_edits", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableedits.story_IdColumn}, false);
            this.relationstory_edits.Nested = true;
            this.Relations.Add(this.relationstory_edits);
            this.relationedits_edit = new global::System.Data.DataRelation("edits_edit", new global::System.Data.DataColumn[] {
                        this.tableedits.edits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableedit.edits_IdColumn}, false);
            this.relationedits_edit.Nested = true;
            this.Relations.Add(this.relationedits_edit);
            this.relationedit_description = new global::System.Data.DataRelation("edit_description", new global::System.Data.DataColumn[] {
                        this.tableedit.editKeyColumn}, new global::System.Data.DataColumn[] {
                        this.tabledescription.editKeyColumn}, false);
            this.relationedit_description.Nested = true;
            this.Relations.Add(this.relationedit_description);
            this.relationstory_verses = new global::System.Data.DataRelation("story_verses", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableverses.story_IdColumn}, false);
            this.relationstory_verses.Nested = true;
            this.Relations.Add(this.relationstory_verses);
            this.relationverses_verse = new global::System.Data.DataRelation("verses_verse", new global::System.Data.DataColumn[] {
                        this.tableverses.verses_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableverse.verses_IdColumn}, false);
            this.relationverses_verse.Nested = true;
            this.Relations.Add(this.relationverses_verse);
            this.relationverse_Vernacular = new global::System.Data.DataRelation("verse_Vernacular", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableVernacular.verse_IdColumn}, false);
            this.relationverse_Vernacular.Nested = true;
            this.Relations.Add(this.relationverse_Vernacular);
            this.relationverse_NationalBT = new global::System.Data.DataRelation("verse_NationalBT", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableNationalBT.verse_IdColumn}, false);
            this.relationverse_NationalBT.Nested = true;
            this.Relations.Add(this.relationverse_NationalBT);
            this.relationverse_InternationalBT = new global::System.Data.DataRelation("verse_InternationalBT", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableInternationalBT.verse_IdColumn}, false);
            this.relationverse_InternationalBT.Nested = true;
            this.Relations.Add(this.relationverse_InternationalBT);
            this.relationverse_anchors = new global::System.Data.DataRelation("verse_anchors", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanchors.verse_IdColumn}, false);
            this.relationverse_anchors.Nested = true;
            this.Relations.Add(this.relationverse_anchors);
            this.relationanchors_anchor = new global::System.Data.DataRelation("anchors_anchor", new global::System.Data.DataColumn[] {
                        this.tableanchors.anchors_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanchor.anchors_IdColumn}, false);
            this.relationanchors_anchor.Nested = true;
            this.Relations.Add(this.relationanchors_anchor);
            this.relationanchor_exegeticalHelps = new global::System.Data.DataRelation("anchor_exegeticalHelps", new global::System.Data.DataColumn[] {
                        this.tableanchor.anchor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelps.anchor_IdColumn}, false);
            this.relationanchor_exegeticalHelps.Nested = true;
            this.Relations.Add(this.relationanchor_exegeticalHelps);
            this.relationexegeticalHelps_exegeticalHelp = new global::System.Data.DataRelation("exegeticalHelps_exegeticalHelp", new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelps.exegeticalHelps_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelp.exegeticalHelps_IdColumn}, false);
            this.relationexegeticalHelps_exegeticalHelp.Nested = true;
            this.Relations.Add(this.relationexegeticalHelps_exegeticalHelp);
            this.relationverse_TestQuestions = new global::System.Data.DataRelation("verse_TestQuestions", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.verse_IdColumn}, false);
            this.relationverse_TestQuestions.Nested = true;
            this.Relations.Add(this.relationverse_TestQuestions);
            this.relationTestQuestions_TestQuestion = new global::System.Data.DataRelation("TestQuestions_TestQuestion", new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.TestQuestions_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestions_IdColumn}, false);
            this.relationTestQuestions_TestQuestion.Nested = true;
            this.Relations.Add(this.relationTestQuestions_TestQuestion);
            this.relationTestQuestion_TQVernacular = new global::System.Data.DataRelation("TestQuestion_TQVernacular", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTQVernacular.TestQuestion_IdColumn}, false);
            this.relationTestQuestion_TQVernacular.Nested = true;
            this.Relations.Add(this.relationTestQuestion_TQVernacular);
            this.relationTestQuestion_TQInternationalBT = new global::System.Data.DataRelation("TestQuestion_TQInternationalBT", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTQInternationalBT.TestQuestion_IdColumn}, false);
            this.relationTestQuestion_TQInternationalBT.Nested = true;
            this.Relations.Add(this.relationTestQuestion_TQInternationalBT);
            this.relationTestQuestion_Answers = new global::System.Data.DataRelation("TestQuestion_Answers", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnswers.TestQuestion_IdColumn}, false);
            this.relationTestQuestion_Answers.Nested = true;
            this.Relations.Add(this.relationTestQuestion_Answers);
            this.relationAnswers_answer = new global::System.Data.DataRelation("Answers_answer", new global::System.Data.DataColumn[] {
                        this.tableAnswers.Answers_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanswer.Answers_IdColumn}, false);
            this.relationAnswers_answer.Nested = true;
            this.Relations.Add(this.relationAnswers_answer);
            this.relationverse_Retellings = new global::System.Data.DataRelation("verse_Retellings", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetellings.verse_IdColumn}, false);
            this.relationverse_Retellings.Nested = true;
            this.Relations.Add(this.relationverse_Retellings);
            this.relationRetellings_Retelling = new global::System.Data.DataRelation("Retellings_Retelling", new global::System.Data.DataColumn[] {
                        this.tableRetellings.Retellings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetelling.Retellings_IdColumn}, false);
            this.relationRetellings_Retelling.Nested = true;
            this.Relations.Add(this.relationRetellings_Retelling);
            this.relationverse_ConsultantNotes = new global::System.Data.DataRelation("verse_ConsultantNotes", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.verse_IdColumn}, false);
            this.relationverse_ConsultantNotes.Nested = true;
            this.Relations.Add(this.relationverse_ConsultantNotes);
            this.relationConsultantNotes_ConsultantNote = new global::System.Data.DataRelation("ConsultantNotes_ConsultantNote", new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.ConsultantNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNote.ConsultantNotes_IdColumn}, false);
            this.relationConsultantNotes_ConsultantNote.Nested = true;
            this.Relations.Add(this.relationConsultantNotes_ConsultantNote);
            this.relationConsultantNote_ConsultantComment = new global::System.Data.DataRelation("ConsultantNote_ConsultantComment", new global::System.Data.DataColumn[] {
                        this.tableConsultantNote.ConsultantNote_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantComment.ConsultantNote_IdColumn}, false);
            this.relationConsultantNote_ConsultantComment.Nested = true;
            this.Relations.Add(this.relationConsultantNote_ConsultantComment);
            this.relationConsultantNote_CrafterResponse = new global::System.Data.DataRelation("ConsultantNote_CrafterResponse", new global::System.Data.DataColumn[] {
                        this.tableConsultantNote.ConsultantNote_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCrafterResponse.ConsultantNote_IdColumn}, false);
            this.relationConsultantNote_CrafterResponse.Nested = true;
            this.Relations.Add(this.relationConsultantNote_CrafterResponse);
            this.relationverse_CoachNotes = new global::System.Data.DataRelation("verse_CoachNotes", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.verse_IdColumn}, false);
            this.relationverse_CoachNotes.Nested = true;
            this.Relations.Add(this.relationverse_CoachNotes);
            this.relationCoachNotes_CoachNote = new global::System.Data.DataRelation("CoachNotes_CoachNote", new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.CoachNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNote.CoachNotes_IdColumn}, false);
            this.relationCoachNotes_CoachNote.Nested = true;
            this.Relations.Add(this.relationCoachNotes_CoachNote);
            this.relationCoachNote_CoachComment = new global::System.Data.DataRelation("CoachNote_CoachComment", new global::System.Data.DataColumn[] {
                        this.tableCoachNote.CoachNote_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachComment.CoachNote_IdColumn}, false);
            this.relationCoachNote_CoachComment.Nested = true;
            this.Relations.Add(this.relationCoachNote_CoachComment);
            this.relationCoachNote_ConsultantResponse = new global::System.Data.DataRelation("CoachNote_ConsultantResponse", new global::System.Data.DataColumn[] {
                        this.tableCoachNote.CoachNote_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantResponse.CoachNote_IdColumn}, false);
            this.relationCoachNote_ConsultantResponse.Nested = true;
            this.Relations.Add(this.relationCoachNote_ConsultantResponse);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestories() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMembers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMember() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFonts() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVernacularFont() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNationalBTFont() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInternationalBTFont() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCraftingInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStoryCrafter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStoryPurpose() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBackTranslator() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTests() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTest() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeedits() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeedit() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedescription() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeverses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeverse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVernacular() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNationalBT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInternationalBT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeanchors() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeanchor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeexegeticalHelps() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeexegeticalHelp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestQuestions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestQuestion() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTQVernacular() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTQInternationalBT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnswers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeanswer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRetellings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRetelling() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantNotes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantNote() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantComment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCrafterResponse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoachNotes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoachNote() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoachComment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantResponse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            StoryProject ds = new StoryProject();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void storiesRowChangeEventHandler(object sender, storiesRowChangeEvent e);
        
        public delegate void MembersRowChangeEventHandler(object sender, MembersRowChangeEvent e);
        
        public delegate void MemberRowChangeEventHandler(object sender, MemberRowChangeEvent e);
        
        public delegate void FontsRowChangeEventHandler(object sender, FontsRowChangeEvent e);
        
        public delegate void VernacularFontRowChangeEventHandler(object sender, VernacularFontRowChangeEvent e);
        
        public delegate void NationalBTFontRowChangeEventHandler(object sender, NationalBTFontRowChangeEvent e);
        
        public delegate void InternationalBTFontRowChangeEventHandler(object sender, InternationalBTFontRowChangeEvent e);
        
        public delegate void storyRowChangeEventHandler(object sender, storyRowChangeEvent e);
        
        public delegate void CraftingInfoRowChangeEventHandler(object sender, CraftingInfoRowChangeEvent e);
        
        public delegate void StoryCrafterRowChangeEventHandler(object sender, StoryCrafterRowChangeEvent e);
        
        public delegate void StoryPurposeRowChangeEventHandler(object sender, StoryPurposeRowChangeEvent e);
        
        public delegate void BackTranslatorRowChangeEventHandler(object sender, BackTranslatorRowChangeEvent e);
        
        public delegate void TestsRowChangeEventHandler(object sender, TestsRowChangeEvent e);
        
        public delegate void TestRowChangeEventHandler(object sender, TestRowChangeEvent e);
        
        public delegate void editsRowChangeEventHandler(object sender, editsRowChangeEvent e);
        
        public delegate void editRowChangeEventHandler(object sender, editRowChangeEvent e);
        
        public delegate void descriptionRowChangeEventHandler(object sender, descriptionRowChangeEvent e);
        
        public delegate void versesRowChangeEventHandler(object sender, versesRowChangeEvent e);
        
        public delegate void verseRowChangeEventHandler(object sender, verseRowChangeEvent e);
        
        public delegate void VernacularRowChangeEventHandler(object sender, VernacularRowChangeEvent e);
        
        public delegate void NationalBTRowChangeEventHandler(object sender, NationalBTRowChangeEvent e);
        
        public delegate void InternationalBTRowChangeEventHandler(object sender, InternationalBTRowChangeEvent e);
        
        public delegate void anchorsRowChangeEventHandler(object sender, anchorsRowChangeEvent e);
        
        public delegate void anchorRowChangeEventHandler(object sender, anchorRowChangeEvent e);
        
        public delegate void exegeticalHelpsRowChangeEventHandler(object sender, exegeticalHelpsRowChangeEvent e);
        
        public delegate void exegeticalHelpRowChangeEventHandler(object sender, exegeticalHelpRowChangeEvent e);
        
        public delegate void TestQuestionsRowChangeEventHandler(object sender, TestQuestionsRowChangeEvent e);
        
        public delegate void TestQuestionRowChangeEventHandler(object sender, TestQuestionRowChangeEvent e);
        
        public delegate void TQVernacularRowChangeEventHandler(object sender, TQVernacularRowChangeEvent e);
        
        public delegate void TQInternationalBTRowChangeEventHandler(object sender, TQInternationalBTRowChangeEvent e);
        
        public delegate void AnswersRowChangeEventHandler(object sender, AnswersRowChangeEvent e);
        
        public delegate void answerRowChangeEventHandler(object sender, answerRowChangeEvent e);
        
        public delegate void RetellingsRowChangeEventHandler(object sender, RetellingsRowChangeEvent e);
        
        public delegate void RetellingRowChangeEventHandler(object sender, RetellingRowChangeEvent e);
        
        public delegate void ConsultantNotesRowChangeEventHandler(object sender, ConsultantNotesRowChangeEvent e);
        
        public delegate void ConsultantNoteRowChangeEventHandler(object sender, ConsultantNoteRowChangeEvent e);
        
        public delegate void ConsultantCommentRowChangeEventHandler(object sender, ConsultantCommentRowChangeEvent e);
        
        public delegate void CrafterResponseRowChangeEventHandler(object sender, CrafterResponseRowChangeEvent e);
        
        public delegate void CoachNotesRowChangeEventHandler(object sender, CoachNotesRowChangeEvent e);
        
        public delegate void CoachNoteRowChangeEventHandler(object sender, CoachNoteRowChangeEvent e);
        
        public delegate void CoachCommentRowChangeEventHandler(object sender, CoachCommentRowChangeEvent e);
        
        public delegate void ConsultantResponseRowChangeEventHandler(object sender, ConsultantResponseRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class storiesDataTable : global::System.Data.TypedTableBase<storiesRow> {
            
            private global::System.Data.DataColumn columnProjectLanguage;
            
            private global::System.Data.DataColumn columnstories_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesDataTable() {
                this.TableName = "stories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected storiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectLanguageColumn {
                get {
                    return this.columnProjectLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stories_IdColumn {
                get {
                    return this.columnstories_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow this[int index] {
                get {
                    return ((storiesRow)(this.Rows[index]));
                }
            }
            
            public event storiesRowChangeEventHandler storiesRowChanging;
            
            public event storiesRowChangeEventHandler storiesRowChanged;
            
            public event storiesRowChangeEventHandler storiesRowDeleting;
            
            public event storiesRowChangeEventHandler storiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstoriesRow(storiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow AddstoriesRow(string ProjectLanguage) {
                storiesRow rowstoriesRow = ((storiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectLanguage,
                        null};
                rowstoriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowstoriesRow);
                return rowstoriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                storiesDataTable cln = ((storiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new storiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectLanguage = base.Columns["ProjectLanguage"];
                this.columnstories_Id = base.Columns["stories_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectLanguage = new global::System.Data.DataColumn("ProjectLanguage", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProjectLanguage);
                this.columnstories_Id = new global::System.Data.DataColumn("stories_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstories_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstories_Id}, true));
                this.columnProjectLanguage.AllowDBNull = false;
                this.columnProjectLanguage.Namespace = "";
                this.columnstories_Id.AutoIncrement = true;
                this.columnstories_Id.AllowDBNull = false;
                this.columnstories_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow NewstoriesRow() {
                return ((storiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new storiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(storiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.storiesRowChanged != null)) {
                    this.storiesRowChanged(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.storiesRowChanging != null)) {
                    this.storiesRowChanging(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.storiesRowDeleted != null)) {
                    this.storiesRowDeleted(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.storiesRowDeleting != null)) {
                    this.storiesRowDeleting(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestoriesRow(storiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "storiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MembersDataTable : global::System.Data.TypedTableBase<MembersRow> {
            
            private global::System.Data.DataColumn columnMembers_Id;
            
            private global::System.Data.DataColumn columnstories_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersDataTable() {
                this.TableName = "Members";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MembersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Members_IdColumn {
                get {
                    return this.columnMembers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stories_IdColumn {
                get {
                    return this.columnstories_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow this[int index] {
                get {
                    return ((MembersRow)(this.Rows[index]));
                }
            }
            
            public event MembersRowChangeEventHandler MembersRowChanging;
            
            public event MembersRowChangeEventHandler MembersRowChanged;
            
            public event MembersRowChangeEventHandler MembersRowDeleting;
            
            public event MembersRowChangeEventHandler MembersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMembersRow(MembersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow AddMembersRow(storiesRow parentstoriesRowBystories_Members) {
                MembersRow rowMembersRow = ((MembersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentstoriesRowBystories_Members != null)) {
                    columnValuesArray[1] = parentstoriesRowBystories_Members[1];
                }
                rowMembersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMembersRow);
                return rowMembersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MembersDataTable cln = ((MembersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MembersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMembers_Id = base.Columns["Members_Id"];
                this.columnstories_Id = base.Columns["stories_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMembers_Id = new global::System.Data.DataColumn("Members_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMembers_Id);
                this.columnstories_Id = new global::System.Data.DataColumn("stories_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstories_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMembers_Id}, true));
                this.columnMembers_Id.AutoIncrement = true;
                this.columnMembers_Id.AllowDBNull = false;
                this.columnMembers_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow NewMembersRow() {
                return ((MembersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MembersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MembersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MembersRowChanged != null)) {
                    this.MembersRowChanged(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MembersRowChanging != null)) {
                    this.MembersRowChanging(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MembersRowDeleted != null)) {
                    this.MembersRowDeleted(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MembersRowDeleting != null)) {
                    this.MembersRowDeleting(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMembersRow(MembersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MembersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MemberDataTable : global::System.Data.TypedTableBase<MemberRow> {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmemberType;
            
            private global::System.Data.DataColumn columnemail;
            
            private global::System.Data.DataColumn columnaltPhone;
            
            private global::System.Data.DataColumn columnphone;
            
            private global::System.Data.DataColumn columnaddress;
            
            private global::System.Data.DataColumn columnmemberKey;
            
            private global::System.Data.DataColumn columnMembers_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberDataTable() {
                this.TableName = "Member";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MemberDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MemberDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberTypeColumn {
                get {
                    return this.columnmemberType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn altPhoneColumn {
                get {
                    return this.columnaltPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phoneColumn {
                get {
                    return this.columnphone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn addressColumn {
                get {
                    return this.columnaddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberKeyColumn {
                get {
                    return this.columnmemberKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Members_IdColumn {
                get {
                    return this.columnMembers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow this[int index] {
                get {
                    return ((MemberRow)(this.Rows[index]));
                }
            }
            
            public event MemberRowChangeEventHandler MemberRowChanging;
            
            public event MemberRowChangeEventHandler MemberRowChanged;
            
            public event MemberRowChangeEventHandler MemberRowDeleting;
            
            public event MemberRowChangeEventHandler MemberRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMemberRow(MemberRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow AddMemberRow(string name, string memberType, string email, string altPhone, string phone, string address, string memberKey, MembersRow parentMembersRowByMembers_Member) {
                MemberRow rowMemberRow = ((MemberRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        memberType,
                        email,
                        altPhone,
                        phone,
                        address,
                        memberKey,
                        null};
                if ((parentMembersRowByMembers_Member != null)) {
                    columnValuesArray[7] = parentMembersRowByMembers_Member[0];
                }
                rowMemberRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMemberRow);
                return rowMemberRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow FindBymemberKey(string memberKey) {
                return ((MemberRow)(this.Rows.Find(new object[] {
                            memberKey})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MemberDataTable cln = ((MemberDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MemberDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnmemberType = base.Columns["memberType"];
                this.columnemail = base.Columns["email"];
                this.columnaltPhone = base.Columns["altPhone"];
                this.columnphone = base.Columns["phone"];
                this.columnaddress = base.Columns["address"];
                this.columnmemberKey = base.Columns["memberKey"];
                this.columnMembers_Id = base.Columns["Members_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnmemberType = new global::System.Data.DataColumn("memberType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberType);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnemail);
                this.columnaltPhone = new global::System.Data.DataColumn("altPhone", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnaltPhone);
                this.columnphone = new global::System.Data.DataColumn("phone", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnphone);
                this.columnaddress = new global::System.Data.DataColumn("address", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnaddress);
                this.columnmemberKey = new global::System.Data.DataColumn("memberKey", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberKey);
                this.columnMembers_Id = new global::System.Data.DataColumn("Members_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMembers_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MemberKey", new global::System.Data.DataColumn[] {
                                this.columnmemberKey}, true));
                this.columnname.Namespace = "";
                this.columnmemberType.AllowDBNull = false;
                this.columnmemberType.Namespace = "";
                this.columnemail.Namespace = "";
                this.columnaltPhone.Namespace = "";
                this.columnphone.Namespace = "";
                this.columnaddress.Namespace = "";
                this.columnmemberKey.AllowDBNull = false;
                this.columnmemberKey.Unique = true;
                this.columnmemberKey.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow NewMemberRow() {
                return ((MemberRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MemberRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MemberRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MemberRowChanged != null)) {
                    this.MemberRowChanged(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MemberRowChanging != null)) {
                    this.MemberRowChanging(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MemberRowDeleted != null)) {
                    this.MemberRowDeleted(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MemberRowDeleting != null)) {
                    this.MemberRowDeleting(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMemberRow(MemberRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MemberDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FontsDataTable : global::System.Data.TypedTableBase<FontsRow> {
            
            private global::System.Data.DataColumn columnFonts_Id;
            
            private global::System.Data.DataColumn columnstories_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontsDataTable() {
                this.TableName = "Fonts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FontsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FontsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Fonts_IdColumn {
                get {
                    return this.columnFonts_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stories_IdColumn {
                get {
                    return this.columnstories_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontsRow this[int index] {
                get {
                    return ((FontsRow)(this.Rows[index]));
                }
            }
            
            public event FontsRowChangeEventHandler FontsRowChanging;
            
            public event FontsRowChangeEventHandler FontsRowChanged;
            
            public event FontsRowChangeEventHandler FontsRowDeleting;
            
            public event FontsRowChangeEventHandler FontsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFontsRow(FontsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontsRow AddFontsRow(storiesRow parentstoriesRowBystories_Fonts) {
                FontsRow rowFontsRow = ((FontsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentstoriesRowBystories_Fonts != null)) {
                    columnValuesArray[1] = parentstoriesRowBystories_Fonts[1];
                }
                rowFontsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFontsRow);
                return rowFontsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FontsDataTable cln = ((FontsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FontsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFonts_Id = base.Columns["Fonts_Id"];
                this.columnstories_Id = base.Columns["stories_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFonts_Id = new global::System.Data.DataColumn("Fonts_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFonts_Id);
                this.columnstories_Id = new global::System.Data.DataColumn("stories_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstories_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFonts_Id}, true));
                this.columnFonts_Id.AutoIncrement = true;
                this.columnFonts_Id.AllowDBNull = false;
                this.columnFonts_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontsRow NewFontsRow() {
                return ((FontsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FontsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FontsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FontsRowChanged != null)) {
                    this.FontsRowChanged(this, new FontsRowChangeEvent(((FontsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FontsRowChanging != null)) {
                    this.FontsRowChanging(this, new FontsRowChangeEvent(((FontsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FontsRowDeleted != null)) {
                    this.FontsRowDeleted(this, new FontsRowChangeEvent(((FontsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FontsRowDeleting != null)) {
                    this.FontsRowDeleting(this, new FontsRowChangeEvent(((FontsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFontsRow(FontsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FontsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VernacularFontDataTable : global::System.Data.TypedTableBase<VernacularFontRow> {
            
            private global::System.Data.DataColumn columnFontName;
            
            private global::System.Data.DataColumn columnFontSize;
            
            private global::System.Data.DataColumn columnFontColor;
            
            private global::System.Data.DataColumn columnFonts_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularFontDataTable() {
                this.TableName = "VernacularFont";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VernacularFontDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VernacularFontDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontNameColumn {
                get {
                    return this.columnFontName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontSizeColumn {
                get {
                    return this.columnFontSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontColorColumn {
                get {
                    return this.columnFontColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Fonts_IdColumn {
                get {
                    return this.columnFonts_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularFontRow this[int index] {
                get {
                    return ((VernacularFontRow)(this.Rows[index]));
                }
            }
            
            public event VernacularFontRowChangeEventHandler VernacularFontRowChanging;
            
            public event VernacularFontRowChangeEventHandler VernacularFontRowChanged;
            
            public event VernacularFontRowChangeEventHandler VernacularFontRowDeleting;
            
            public event VernacularFontRowChangeEventHandler VernacularFontRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVernacularFontRow(VernacularFontRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularFontRow AddVernacularFontRow(string FontName, float FontSize, string FontColor, FontsRow parentFontsRowByFonts_VernacularFont) {
                VernacularFontRow rowVernacularFontRow = ((VernacularFontRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FontName,
                        FontSize,
                        FontColor,
                        null};
                if ((parentFontsRowByFonts_VernacularFont != null)) {
                    columnValuesArray[3] = parentFontsRowByFonts_VernacularFont[0];
                }
                rowVernacularFontRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVernacularFontRow);
                return rowVernacularFontRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VernacularFontDataTable cln = ((VernacularFontDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VernacularFontDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFontName = base.Columns["FontName"];
                this.columnFontSize = base.Columns["FontSize"];
                this.columnFontColor = base.Columns["FontColor"];
                this.columnFonts_Id = base.Columns["Fonts_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFontName = new global::System.Data.DataColumn("FontName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontName);
                this.columnFontSize = new global::System.Data.DataColumn("FontSize", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontSize);
                this.columnFontColor = new global::System.Data.DataColumn("FontColor", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontColor);
                this.columnFonts_Id = new global::System.Data.DataColumn("Fonts_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFonts_Id);
                this.columnFontName.Namespace = "";
                this.columnFontSize.Namespace = "";
                this.columnFontColor.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularFontRow NewVernacularFontRow() {
                return ((VernacularFontRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VernacularFontRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VernacularFontRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VernacularFontRowChanged != null)) {
                    this.VernacularFontRowChanged(this, new VernacularFontRowChangeEvent(((VernacularFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VernacularFontRowChanging != null)) {
                    this.VernacularFontRowChanging(this, new VernacularFontRowChangeEvent(((VernacularFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VernacularFontRowDeleted != null)) {
                    this.VernacularFontRowDeleted(this, new VernacularFontRowChangeEvent(((VernacularFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VernacularFontRowDeleting != null)) {
                    this.VernacularFontRowDeleting(this, new VernacularFontRowChangeEvent(((VernacularFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVernacularFontRow(VernacularFontRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VernacularFontDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NationalBTFontDataTable : global::System.Data.TypedTableBase<NationalBTFontRow> {
            
            private global::System.Data.DataColumn columnFontName;
            
            private global::System.Data.DataColumn columnFontSize;
            
            private global::System.Data.DataColumn columnFontColor;
            
            private global::System.Data.DataColumn columnFonts_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTFontDataTable() {
                this.TableName = "NationalBTFont";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NationalBTFontDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NationalBTFontDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontNameColumn {
                get {
                    return this.columnFontName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontSizeColumn {
                get {
                    return this.columnFontSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontColorColumn {
                get {
                    return this.columnFontColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Fonts_IdColumn {
                get {
                    return this.columnFonts_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTFontRow this[int index] {
                get {
                    return ((NationalBTFontRow)(this.Rows[index]));
                }
            }
            
            public event NationalBTFontRowChangeEventHandler NationalBTFontRowChanging;
            
            public event NationalBTFontRowChangeEventHandler NationalBTFontRowChanged;
            
            public event NationalBTFontRowChangeEventHandler NationalBTFontRowDeleting;
            
            public event NationalBTFontRowChangeEventHandler NationalBTFontRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNationalBTFontRow(NationalBTFontRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTFontRow AddNationalBTFontRow(string FontName, float FontSize, string FontColor, FontsRow parentFontsRowByFonts_NationalBTFont) {
                NationalBTFontRow rowNationalBTFontRow = ((NationalBTFontRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FontName,
                        FontSize,
                        FontColor,
                        null};
                if ((parentFontsRowByFonts_NationalBTFont != null)) {
                    columnValuesArray[3] = parentFontsRowByFonts_NationalBTFont[0];
                }
                rowNationalBTFontRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNationalBTFontRow);
                return rowNationalBTFontRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NationalBTFontDataTable cln = ((NationalBTFontDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NationalBTFontDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFontName = base.Columns["FontName"];
                this.columnFontSize = base.Columns["FontSize"];
                this.columnFontColor = base.Columns["FontColor"];
                this.columnFonts_Id = base.Columns["Fonts_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFontName = new global::System.Data.DataColumn("FontName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontName);
                this.columnFontSize = new global::System.Data.DataColumn("FontSize", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontSize);
                this.columnFontColor = new global::System.Data.DataColumn("FontColor", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontColor);
                this.columnFonts_Id = new global::System.Data.DataColumn("Fonts_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFonts_Id);
                this.columnFontName.Namespace = "";
                this.columnFontSize.Namespace = "";
                this.columnFontColor.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTFontRow NewNationalBTFontRow() {
                return ((NationalBTFontRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NationalBTFontRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NationalBTFontRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NationalBTFontRowChanged != null)) {
                    this.NationalBTFontRowChanged(this, new NationalBTFontRowChangeEvent(((NationalBTFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NationalBTFontRowChanging != null)) {
                    this.NationalBTFontRowChanging(this, new NationalBTFontRowChangeEvent(((NationalBTFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NationalBTFontRowDeleted != null)) {
                    this.NationalBTFontRowDeleted(this, new NationalBTFontRowChangeEvent(((NationalBTFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NationalBTFontRowDeleting != null)) {
                    this.NationalBTFontRowDeleting(this, new NationalBTFontRowChangeEvent(((NationalBTFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNationalBTFontRow(NationalBTFontRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NationalBTFontDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InternationalBTFontDataTable : global::System.Data.TypedTableBase<InternationalBTFontRow> {
            
            private global::System.Data.DataColumn columnFontName;
            
            private global::System.Data.DataColumn columnFontSize;
            
            private global::System.Data.DataColumn columnFontColor;
            
            private global::System.Data.DataColumn columnFonts_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTFontDataTable() {
                this.TableName = "InternationalBTFont";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InternationalBTFontDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InternationalBTFontDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontNameColumn {
                get {
                    return this.columnFontName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontSizeColumn {
                get {
                    return this.columnFontSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontColorColumn {
                get {
                    return this.columnFontColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Fonts_IdColumn {
                get {
                    return this.columnFonts_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTFontRow this[int index] {
                get {
                    return ((InternationalBTFontRow)(this.Rows[index]));
                }
            }
            
            public event InternationalBTFontRowChangeEventHandler InternationalBTFontRowChanging;
            
            public event InternationalBTFontRowChangeEventHandler InternationalBTFontRowChanged;
            
            public event InternationalBTFontRowChangeEventHandler InternationalBTFontRowDeleting;
            
            public event InternationalBTFontRowChangeEventHandler InternationalBTFontRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInternationalBTFontRow(InternationalBTFontRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTFontRow AddInternationalBTFontRow(string FontName, float FontSize, string FontColor, FontsRow parentFontsRowByFonts_InternationalBTFont) {
                InternationalBTFontRow rowInternationalBTFontRow = ((InternationalBTFontRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FontName,
                        FontSize,
                        FontColor,
                        null};
                if ((parentFontsRowByFonts_InternationalBTFont != null)) {
                    columnValuesArray[3] = parentFontsRowByFonts_InternationalBTFont[0];
                }
                rowInternationalBTFontRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInternationalBTFontRow);
                return rowInternationalBTFontRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InternationalBTFontDataTable cln = ((InternationalBTFontDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InternationalBTFontDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFontName = base.Columns["FontName"];
                this.columnFontSize = base.Columns["FontSize"];
                this.columnFontColor = base.Columns["FontColor"];
                this.columnFonts_Id = base.Columns["Fonts_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFontName = new global::System.Data.DataColumn("FontName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontName);
                this.columnFontSize = new global::System.Data.DataColumn("FontSize", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontSize);
                this.columnFontColor = new global::System.Data.DataColumn("FontColor", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontColor);
                this.columnFonts_Id = new global::System.Data.DataColumn("Fonts_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFonts_Id);
                this.columnFontName.Namespace = "";
                this.columnFontSize.Namespace = "";
                this.columnFontColor.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTFontRow NewInternationalBTFontRow() {
                return ((InternationalBTFontRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InternationalBTFontRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InternationalBTFontRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InternationalBTFontRowChanged != null)) {
                    this.InternationalBTFontRowChanged(this, new InternationalBTFontRowChangeEvent(((InternationalBTFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InternationalBTFontRowChanging != null)) {
                    this.InternationalBTFontRowChanging(this, new InternationalBTFontRowChangeEvent(((InternationalBTFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InternationalBTFontRowDeleted != null)) {
                    this.InternationalBTFontRowDeleted(this, new InternationalBTFontRowChangeEvent(((InternationalBTFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InternationalBTFontRowDeleting != null)) {
                    this.InternationalBTFontRowDeleting(this, new InternationalBTFontRowChangeEvent(((InternationalBTFontRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInternationalBTFontRow(InternationalBTFontRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InternationalBTFontDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class storyDataTable : global::System.Data.TypedTableBase<storyRow> {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnstory_Id;
            
            private global::System.Data.DataColumn columnstories_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyDataTable() {
                this.TableName = "story";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected storyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn story_IdColumn {
                get {
                    return this.columnstory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stories_IdColumn {
                get {
                    return this.columnstories_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow this[int index] {
                get {
                    return ((storyRow)(this.Rows[index]));
                }
            }
            
            public event storyRowChangeEventHandler storyRowChanging;
            
            public event storyRowChangeEventHandler storyRowChanged;
            
            public event storyRowChangeEventHandler storyRowDeleting;
            
            public event storyRowChangeEventHandler storyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstoryRow(storyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow AddstoryRow(string name, string guid, storiesRow parentstoriesRowBystories_story) {
                storyRow rowstoryRow = ((storyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        guid,
                        null,
                        null};
                if ((parentstoriesRowBystories_story != null)) {
                    columnValuesArray[3] = parentstoriesRowBystories_story[1];
                }
                rowstoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowstoryRow);
                return rowstoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                storyDataTable cln = ((storyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new storyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnguid = base.Columns["guid"];
                this.columnstory_Id = base.Columns["story_Id"];
                this.columnstories_Id = base.Columns["stories_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnstory_Id = new global::System.Data.DataColumn("story_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstory_Id);
                this.columnstories_Id = new global::System.Data.DataColumn("stories_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstories_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstory_Id}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnstory_Id.AutoIncrement = true;
                this.columnstory_Id.AllowDBNull = false;
                this.columnstory_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow NewstoryRow() {
                return ((storyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new storyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(storyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.storyRowChanged != null)) {
                    this.storyRowChanged(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.storyRowChanging != null)) {
                    this.storyRowChanging(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.storyRowDeleted != null)) {
                    this.storyRowDeleted(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.storyRowDeleting != null)) {
                    this.storyRowDeleting(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestoryRow(storyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "storyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CraftingInfoDataTable : global::System.Data.TypedTableBase<CraftingInfoRow> {
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            private global::System.Data.DataColumn columnstory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoDataTable() {
                this.TableName = "CraftingInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CraftingInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CraftingInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn story_IdColumn {
                get {
                    return this.columnstory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow this[int index] {
                get {
                    return ((CraftingInfoRow)(this.Rows[index]));
                }
            }
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowChanging;
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowChanged;
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowDeleting;
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCraftingInfoRow(CraftingInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow AddCraftingInfoRow(storyRow parentstoryRowBystory_CraftingInfo) {
                CraftingInfoRow rowCraftingInfoRow = ((CraftingInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentstoryRowBystory_CraftingInfo != null)) {
                    columnValuesArray[1] = parentstoryRowBystory_CraftingInfo[2];
                }
                rowCraftingInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCraftingInfoRow);
                return rowCraftingInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CraftingInfoDataTable cln = ((CraftingInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CraftingInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
                this.columnstory_Id = base.Columns["story_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnstory_Id = new global::System.Data.DataColumn("story_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstory_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCraftingInfo_Id}, true));
                this.columnCraftingInfo_Id.AutoIncrement = true;
                this.columnCraftingInfo_Id.AllowDBNull = false;
                this.columnCraftingInfo_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow NewCraftingInfoRow() {
                return ((CraftingInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CraftingInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CraftingInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CraftingInfoRowChanged != null)) {
                    this.CraftingInfoRowChanged(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CraftingInfoRowChanging != null)) {
                    this.CraftingInfoRowChanging(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CraftingInfoRowDeleted != null)) {
                    this.CraftingInfoRowDeleted(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CraftingInfoRowDeleting != null)) {
                    this.CraftingInfoRowDeleting(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCraftingInfoRow(CraftingInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CraftingInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StoryCrafterDataTable : global::System.Data.TypedTableBase<StoryCrafterRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterDataTable() {
                this.TableName = "StoryCrafter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryCrafterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StoryCrafterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow this[int index] {
                get {
                    return ((StoryCrafterRow)(this.Rows[index]));
                }
            }
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowChanging;
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowChanged;
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowDeleting;
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStoryCrafterRow(StoryCrafterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow AddStoryCrafterRow(string memberID, CraftingInfoRow parentCraftingInfoRowByCraftingInfo_StoryCrafter) {
                StoryCrafterRow rowStoryCrafterRow = ((StoryCrafterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_StoryCrafter != null)) {
                    columnValuesArray[1] = parentCraftingInfoRowByCraftingInfo_StoryCrafter[0];
                }
                rowStoryCrafterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStoryCrafterRow);
                return rowStoryCrafterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StoryCrafterDataTable cln = ((StoryCrafterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StoryCrafterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow NewStoryCrafterRow() {
                return ((StoryCrafterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StoryCrafterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StoryCrafterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoryCrafterRowChanged != null)) {
                    this.StoryCrafterRowChanged(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoryCrafterRowChanging != null)) {
                    this.StoryCrafterRowChanging(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoryCrafterRowDeleted != null)) {
                    this.StoryCrafterRowDeleted(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoryCrafterRowDeleting != null)) {
                    this.StoryCrafterRowDeleting(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStoryCrafterRow(StoryCrafterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StoryCrafterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StoryPurposeDataTable : global::System.Data.TypedTableBase<StoryPurposeRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnStoryPurpose_text;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryPurposeDataTable() {
                this.TableName = "StoryPurpose";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryPurposeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StoryPurposeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryPurpose_textColumn {
                get {
                    return this.columnStoryPurpose_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryPurposeRow this[int index] {
                get {
                    return ((StoryPurposeRow)(this.Rows[index]));
                }
            }
            
            public event StoryPurposeRowChangeEventHandler StoryPurposeRowChanging;
            
            public event StoryPurposeRowChangeEventHandler StoryPurposeRowChanged;
            
            public event StoryPurposeRowChangeEventHandler StoryPurposeRowDeleting;
            
            public event StoryPurposeRowChangeEventHandler StoryPurposeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStoryPurposeRow(StoryPurposeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryPurposeRow AddStoryPurposeRow(string lang, string StoryPurpose_text, CraftingInfoRow parentCraftingInfoRowByCraftingInfo_StoryPurpose) {
                StoryPurposeRow rowStoryPurposeRow = ((StoryPurposeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        StoryPurpose_text,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_StoryPurpose != null)) {
                    columnValuesArray[2] = parentCraftingInfoRowByCraftingInfo_StoryPurpose[0];
                }
                rowStoryPurposeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStoryPurposeRow);
                return rowStoryPurposeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StoryPurposeDataTable cln = ((StoryPurposeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StoryPurposeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnStoryPurpose_text = base.Columns["StoryPurpose_text"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnStoryPurpose_text = new global::System.Data.DataColumn("StoryPurpose_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnStoryPurpose_text);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
                this.columnStoryPurpose_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryPurposeRow NewStoryPurposeRow() {
                return ((StoryPurposeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StoryPurposeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StoryPurposeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoryPurposeRowChanged != null)) {
                    this.StoryPurposeRowChanged(this, new StoryPurposeRowChangeEvent(((StoryPurposeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoryPurposeRowChanging != null)) {
                    this.StoryPurposeRowChanging(this, new StoryPurposeRowChangeEvent(((StoryPurposeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoryPurposeRowDeleted != null)) {
                    this.StoryPurposeRowDeleted(this, new StoryPurposeRowChangeEvent(((StoryPurposeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoryPurposeRowDeleting != null)) {
                    this.StoryPurposeRowDeleting(this, new StoryPurposeRowChangeEvent(((StoryPurposeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStoryPurposeRow(StoryPurposeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StoryPurposeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BackTranslatorDataTable : global::System.Data.TypedTableBase<BackTranslatorRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorDataTable() {
                this.TableName = "BackTranslator";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BackTranslatorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BackTranslatorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow this[int index] {
                get {
                    return ((BackTranslatorRow)(this.Rows[index]));
                }
            }
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowChanging;
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowChanged;
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowDeleting;
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBackTranslatorRow(BackTranslatorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow AddBackTranslatorRow(string memberID, CraftingInfoRow parentCraftingInfoRowByCraftingInfo_BackTranslator) {
                BackTranslatorRow rowBackTranslatorRow = ((BackTranslatorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_BackTranslator != null)) {
                    columnValuesArray[1] = parentCraftingInfoRowByCraftingInfo_BackTranslator[0];
                }
                rowBackTranslatorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBackTranslatorRow);
                return rowBackTranslatorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BackTranslatorDataTable cln = ((BackTranslatorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BackTranslatorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow NewBackTranslatorRow() {
                return ((BackTranslatorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BackTranslatorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BackTranslatorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BackTranslatorRowChanged != null)) {
                    this.BackTranslatorRowChanged(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BackTranslatorRowChanging != null)) {
                    this.BackTranslatorRowChanging(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BackTranslatorRowDeleted != null)) {
                    this.BackTranslatorRowDeleted(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BackTranslatorRowDeleting != null)) {
                    this.BackTranslatorRowDeleting(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBackTranslatorRow(BackTranslatorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BackTranslatorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestsDataTable : global::System.Data.TypedTableBase<TestsRow> {
            
            private global::System.Data.DataColumn columnTests_Id;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsDataTable() {
                this.TableName = "Tests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Tests_IdColumn {
                get {
                    return this.columnTests_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow this[int index] {
                get {
                    return ((TestsRow)(this.Rows[index]));
                }
            }
            
            public event TestsRowChangeEventHandler TestsRowChanging;
            
            public event TestsRowChangeEventHandler TestsRowChanged;
            
            public event TestsRowChangeEventHandler TestsRowDeleting;
            
            public event TestsRowChangeEventHandler TestsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestsRow(TestsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow AddTestsRow(CraftingInfoRow parentCraftingInfoRowByCraftingInfo_Tests) {
                TestsRow rowTestsRow = ((TestsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_Tests != null)) {
                    columnValuesArray[1] = parentCraftingInfoRowByCraftingInfo_Tests[0];
                }
                rowTestsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestsRow);
                return rowTestsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestsDataTable cln = ((TestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTests_Id = base.Columns["Tests_Id"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTests_Id = new global::System.Data.DataColumn("Tests_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTests_Id);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTests_Id}, true));
                this.columnTests_Id.AutoIncrement = true;
                this.columnTests_Id.AllowDBNull = false;
                this.columnTests_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow NewTestsRow() {
                return ((TestsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestsRowChanged != null)) {
                    this.TestsRowChanged(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestsRowChanging != null)) {
                    this.TestsRowChanging(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestsRowDeleted != null)) {
                    this.TestsRowDeleted(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestsRowDeleting != null)) {
                    this.TestsRowDeleting(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestsRow(TestsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestDataTable : global::System.Data.TypedTableBase<TestRow> {
            
            private global::System.Data.DataColumn columnnumber;
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnTests_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestDataTable() {
                this.TableName = "Test";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numberColumn {
                get {
                    return this.columnnumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Tests_IdColumn {
                get {
                    return this.columnTests_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRow this[int index] {
                get {
                    return ((TestRow)(this.Rows[index]));
                }
            }
            
            public event TestRowChangeEventHandler TestRowChanging;
            
            public event TestRowChangeEventHandler TestRowChanged;
            
            public event TestRowChangeEventHandler TestRowDeleting;
            
            public event TestRowChangeEventHandler TestRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestRow(TestRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRow AddTestRow(byte number, string memberID, TestsRow parentTestsRowByTests_Test) {
                TestRow rowTestRow = ((TestRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        number,
                        memberID,
                        null};
                if ((parentTestsRowByTests_Test != null)) {
                    columnValuesArray[2] = parentTestsRowByTests_Test[0];
                }
                rowTestRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestRow);
                return rowTestRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestDataTable cln = ((TestDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnumber = base.Columns["number"];
                this.columnmemberID = base.Columns["memberID"];
                this.columnTests_Id = base.Columns["Tests_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnumber = new global::System.Data.DataColumn("number", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnnumber);
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnTests_Id = new global::System.Data.DataColumn("Tests_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTests_Id);
                this.columnnumber.AllowDBNull = false;
                this.columnnumber.Namespace = "";
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRow NewTestRow() {
                return ((TestRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestRowChanged != null)) {
                    this.TestRowChanged(this, new TestRowChangeEvent(((TestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestRowChanging != null)) {
                    this.TestRowChanging(this, new TestRowChangeEvent(((TestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestRowDeleted != null)) {
                    this.TestRowDeleted(this, new TestRowChangeEvent(((TestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestRowDeleting != null)) {
                    this.TestRowDeleting(this, new TestRowChangeEvent(((TestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestRow(TestRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class editsDataTable : global::System.Data.TypedTableBase<editsRow> {
            
            private global::System.Data.DataColumn columnedits_Id;
            
            private global::System.Data.DataColumn columnstory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editsDataTable() {
                this.TableName = "edits";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal editsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected editsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edits_IdColumn {
                get {
                    return this.columnedits_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn story_IdColumn {
                get {
                    return this.columnstory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editsRow this[int index] {
                get {
                    return ((editsRow)(this.Rows[index]));
                }
            }
            
            public event editsRowChangeEventHandler editsRowChanging;
            
            public event editsRowChangeEventHandler editsRowChanged;
            
            public event editsRowChangeEventHandler editsRowDeleting;
            
            public event editsRowChangeEventHandler editsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddeditsRow(editsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editsRow AddeditsRow(storyRow parentstoryRowBystory_edits) {
                editsRow roweditsRow = ((editsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentstoryRowBystory_edits != null)) {
                    columnValuesArray[1] = parentstoryRowBystory_edits[2];
                }
                roweditsRow.ItemArray = columnValuesArray;
                this.Rows.Add(roweditsRow);
                return roweditsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                editsDataTable cln = ((editsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new editsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnedits_Id = base.Columns["edits_Id"];
                this.columnstory_Id = base.Columns["story_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnedits_Id = new global::System.Data.DataColumn("edits_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnedits_Id);
                this.columnstory_Id = new global::System.Data.DataColumn("story_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstory_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnedits_Id}, true));
                this.columnedits_Id.AutoIncrement = true;
                this.columnedits_Id.AllowDBNull = false;
                this.columnedits_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editsRow NeweditsRow() {
                return ((editsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new editsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(editsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.editsRowChanged != null)) {
                    this.editsRowChanged(this, new editsRowChangeEvent(((editsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.editsRowChanging != null)) {
                    this.editsRowChanging(this, new editsRowChangeEvent(((editsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.editsRowDeleted != null)) {
                    this.editsRowDeleted(this, new editsRowChangeEvent(((editsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.editsRowDeleting != null)) {
                    this.editsRowDeleting(this, new editsRowChangeEvent(((editsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveeditsRow(editsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "editsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class editDataTable : global::System.Data.TypedTableBase<editRow> {
            
            private global::System.Data.DataColumn columneditor;
            
            private global::System.Data.DataColumn columndateModified;
            
            private global::System.Data.DataColumn columneditKey;
            
            private global::System.Data.DataColumn columnedits_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editDataTable() {
                this.TableName = "edit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal editDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected editDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn editorColumn {
                get {
                    return this.columneditor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateModifiedColumn {
                get {
                    return this.columndateModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn editKeyColumn {
                get {
                    return this.columneditKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edits_IdColumn {
                get {
                    return this.columnedits_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow this[int index] {
                get {
                    return ((editRow)(this.Rows[index]));
                }
            }
            
            public event editRowChangeEventHandler editRowChanging;
            
            public event editRowChangeEventHandler editRowChanged;
            
            public event editRowChangeEventHandler editRowDeleting;
            
            public event editRowChangeEventHandler editRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddeditRow(editRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow AddeditRow(string editor, System.DateTime dateModified, string editKey, editsRow parenteditsRowByedits_edit) {
                editRow roweditRow = ((editRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        editor,
                        dateModified,
                        editKey,
                        null};
                if ((parenteditsRowByedits_edit != null)) {
                    columnValuesArray[3] = parenteditsRowByedits_edit[0];
                }
                roweditRow.ItemArray = columnValuesArray;
                this.Rows.Add(roweditRow);
                return roweditRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow FindByeditKey(string editKey) {
                return ((editRow)(this.Rows.Find(new object[] {
                            editKey})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                editDataTable cln = ((editDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new editDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columneditor = base.Columns["editor"];
                this.columndateModified = base.Columns["dateModified"];
                this.columneditKey = base.Columns["editKey"];
                this.columnedits_Id = base.Columns["edits_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columneditor = new global::System.Data.DataColumn("editor", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columneditor);
                this.columndateModified = new global::System.Data.DataColumn("dateModified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndateModified);
                this.columneditKey = new global::System.Data.DataColumn("editKey", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columneditKey);
                this.columnedits_Id = new global::System.Data.DataColumn("edits_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnedits_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("EditEventKey", new global::System.Data.DataColumn[] {
                                this.columneditKey}, true));
                this.columneditor.Namespace = "";
                this.columndateModified.Namespace = "";
                this.columneditKey.AllowDBNull = false;
                this.columneditKey.Unique = true;
                this.columneditKey.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow NeweditRow() {
                return ((editRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new editRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(editRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.editRowChanged != null)) {
                    this.editRowChanged(this, new editRowChangeEvent(((editRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.editRowChanging != null)) {
                    this.editRowChanging(this, new editRowChangeEvent(((editRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.editRowDeleted != null)) {
                    this.editRowDeleted(this, new editRowChangeEvent(((editRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.editRowDeleting != null)) {
                    this.editRowDeleting(this, new editRowChangeEvent(((editRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveeditRow(editRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "editDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class descriptionDataTable : global::System.Data.TypedTableBase<descriptionRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columndescription_text;
            
            private global::System.Data.DataColumn columneditKey;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionDataTable() {
                this.TableName = "description";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal descriptionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected descriptionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn description_textColumn {
                get {
                    return this.columndescription_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn editKeyColumn {
                get {
                    return this.columneditKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRow this[int index] {
                get {
                    return ((descriptionRow)(this.Rows[index]));
                }
            }
            
            public event descriptionRowChangeEventHandler descriptionRowChanging;
            
            public event descriptionRowChangeEventHandler descriptionRowChanged;
            
            public event descriptionRowChangeEventHandler descriptionRowDeleting;
            
            public event descriptionRowChangeEventHandler descriptionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddescriptionRow(descriptionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRow AdddescriptionRow(string lang, string description_text, editRow parenteditRowByedit_description) {
                descriptionRow rowdescriptionRow = ((descriptionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        description_text,
                        null};
                if ((parenteditRowByedit_description != null)) {
                    columnValuesArray[2] = parenteditRowByedit_description[2];
                }
                rowdescriptionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdescriptionRow);
                return rowdescriptionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                descriptionDataTable cln = ((descriptionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new descriptionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columndescription_text = base.Columns["description_text"];
                this.columneditKey = base.Columns["editKey"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columndescription_text = new global::System.Data.DataColumn("description_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columndescription_text);
                this.columneditKey = new global::System.Data.DataColumn("editKey", typeof(string), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columneditKey);
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
                this.columndescription_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRow NewdescriptionRow() {
                return ((descriptionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new descriptionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(descriptionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.descriptionRowChanged != null)) {
                    this.descriptionRowChanged(this, new descriptionRowChangeEvent(((descriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.descriptionRowChanging != null)) {
                    this.descriptionRowChanging(this, new descriptionRowChangeEvent(((descriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.descriptionRowDeleted != null)) {
                    this.descriptionRowDeleted(this, new descriptionRowChangeEvent(((descriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.descriptionRowDeleting != null)) {
                    this.descriptionRowDeleting(this, new descriptionRowChangeEvent(((descriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedescriptionRow(descriptionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "descriptionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class versesDataTable : global::System.Data.TypedTableBase<versesRow> {
            
            private global::System.Data.DataColumn columnverses_Id;
            
            private global::System.Data.DataColumn columnstory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesDataTable() {
                this.TableName = "verses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal versesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected versesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verses_IdColumn {
                get {
                    return this.columnverses_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn story_IdColumn {
                get {
                    return this.columnstory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow this[int index] {
                get {
                    return ((versesRow)(this.Rows[index]));
                }
            }
            
            public event versesRowChangeEventHandler versesRowChanging;
            
            public event versesRowChangeEventHandler versesRowChanged;
            
            public event versesRowChangeEventHandler versesRowDeleting;
            
            public event versesRowChangeEventHandler versesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddversesRow(versesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow AddversesRow(storyRow parentstoryRowBystory_verses) {
                versesRow rowversesRow = ((versesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentstoryRowBystory_verses != null)) {
                    columnValuesArray[1] = parentstoryRowBystory_verses[2];
                }
                rowversesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowversesRow);
                return rowversesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                versesDataTable cln = ((versesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new versesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnverses_Id = base.Columns["verses_Id"];
                this.columnstory_Id = base.Columns["story_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnverses_Id = new global::System.Data.DataColumn("verses_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverses_Id);
                this.columnstory_Id = new global::System.Data.DataColumn("story_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstory_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnverses_Id}, true));
                this.columnverses_Id.AutoIncrement = true;
                this.columnverses_Id.AllowDBNull = false;
                this.columnverses_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow NewversesRow() {
                return ((versesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new versesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(versesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.versesRowChanged != null)) {
                    this.versesRowChanged(this, new versesRowChangeEvent(((versesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.versesRowChanging != null)) {
                    this.versesRowChanging(this, new versesRowChangeEvent(((versesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.versesRowDeleted != null)) {
                    this.versesRowDeleted(this, new versesRowChangeEvent(((versesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.versesRowDeleting != null)) {
                    this.versesRowDeleting(this, new versesRowChangeEvent(((versesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveversesRow(versesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "versesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class verseDataTable : global::System.Data.TypedTableBase<verseRow> {
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            private global::System.Data.DataColumn columnverses_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseDataTable() {
                this.TableName = "verse";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal verseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected verseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verses_IdColumn {
                get {
                    return this.columnverses_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow this[int index] {
                get {
                    return ((verseRow)(this.Rows[index]));
                }
            }
            
            public event verseRowChangeEventHandler verseRowChanging;
            
            public event verseRowChangeEventHandler verseRowChanged;
            
            public event verseRowChangeEventHandler verseRowDeleting;
            
            public event verseRowChangeEventHandler verseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddverseRow(verseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow AddverseRow(string guid, versesRow parentversesRowByverses_verse) {
                verseRow rowverseRow = ((verseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        guid,
                        null,
                        null};
                if ((parentversesRowByverses_verse != null)) {
                    columnValuesArray[2] = parentversesRowByverses_verse[0];
                }
                rowverseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowverseRow);
                return rowverseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                verseDataTable cln = ((verseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new verseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnguid = base.Columns["guid"];
                this.columnverse_Id = base.Columns["verse_Id"];
                this.columnverses_Id = base.Columns["verses_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.columnverses_Id = new global::System.Data.DataColumn("verses_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverses_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnverse_Id}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnverse_Id.AutoIncrement = true;
                this.columnverse_Id.AllowDBNull = false;
                this.columnverse_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow NewverseRow() {
                return ((verseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new verseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(verseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.verseRowChanged != null)) {
                    this.verseRowChanged(this, new verseRowChangeEvent(((verseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.verseRowChanging != null)) {
                    this.verseRowChanging(this, new verseRowChangeEvent(((verseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.verseRowDeleted != null)) {
                    this.verseRowDeleted(this, new verseRowChangeEvent(((verseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.verseRowDeleting != null)) {
                    this.verseRowDeleting(this, new verseRowChangeEvent(((verseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveverseRow(verseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "verseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VernacularDataTable : global::System.Data.TypedTableBase<VernacularRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnVernacular_text;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularDataTable() {
                this.TableName = "Vernacular";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VernacularDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VernacularDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Vernacular_textColumn {
                get {
                    return this.columnVernacular_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularRow this[int index] {
                get {
                    return ((VernacularRow)(this.Rows[index]));
                }
            }
            
            public event VernacularRowChangeEventHandler VernacularRowChanging;
            
            public event VernacularRowChangeEventHandler VernacularRowChanged;
            
            public event VernacularRowChangeEventHandler VernacularRowDeleting;
            
            public event VernacularRowChangeEventHandler VernacularRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVernacularRow(VernacularRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularRow AddVernacularRow(string lang, string Vernacular_text, verseRow parentverseRowByverse_Vernacular) {
                VernacularRow rowVernacularRow = ((VernacularRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        Vernacular_text,
                        null};
                if ((parentverseRowByverse_Vernacular != null)) {
                    columnValuesArray[2] = parentverseRowByverse_Vernacular[1];
                }
                rowVernacularRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVernacularRow);
                return rowVernacularRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VernacularDataTable cln = ((VernacularDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VernacularDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnVernacular_text = base.Columns["Vernacular_text"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnVernacular_text = new global::System.Data.DataColumn("Vernacular_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnVernacular_text);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
                this.columnVernacular_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularRow NewVernacularRow() {
                return ((VernacularRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VernacularRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VernacularRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VernacularRowChanged != null)) {
                    this.VernacularRowChanged(this, new VernacularRowChangeEvent(((VernacularRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VernacularRowChanging != null)) {
                    this.VernacularRowChanging(this, new VernacularRowChangeEvent(((VernacularRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VernacularRowDeleted != null)) {
                    this.VernacularRowDeleted(this, new VernacularRowChangeEvent(((VernacularRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VernacularRowDeleting != null)) {
                    this.VernacularRowDeleting(this, new VernacularRowChangeEvent(((VernacularRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVernacularRow(VernacularRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VernacularDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NationalBTDataTable : global::System.Data.TypedTableBase<NationalBTRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnNationalBT_text;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTDataTable() {
                this.TableName = "NationalBT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NationalBTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NationalBTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NationalBT_textColumn {
                get {
                    return this.columnNationalBT_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTRow this[int index] {
                get {
                    return ((NationalBTRow)(this.Rows[index]));
                }
            }
            
            public event NationalBTRowChangeEventHandler NationalBTRowChanging;
            
            public event NationalBTRowChangeEventHandler NationalBTRowChanged;
            
            public event NationalBTRowChangeEventHandler NationalBTRowDeleting;
            
            public event NationalBTRowChangeEventHandler NationalBTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNationalBTRow(NationalBTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTRow AddNationalBTRow(string lang, string NationalBT_text, verseRow parentverseRowByverse_NationalBT) {
                NationalBTRow rowNationalBTRow = ((NationalBTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        NationalBT_text,
                        null};
                if ((parentverseRowByverse_NationalBT != null)) {
                    columnValuesArray[2] = parentverseRowByverse_NationalBT[1];
                }
                rowNationalBTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNationalBTRow);
                return rowNationalBTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NationalBTDataTable cln = ((NationalBTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NationalBTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnNationalBT_text = base.Columns["NationalBT_text"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnNationalBT_text = new global::System.Data.DataColumn("NationalBT_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnNationalBT_text);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
                this.columnNationalBT_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTRow NewNationalBTRow() {
                return ((NationalBTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NationalBTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NationalBTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NationalBTRowChanged != null)) {
                    this.NationalBTRowChanged(this, new NationalBTRowChangeEvent(((NationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NationalBTRowChanging != null)) {
                    this.NationalBTRowChanging(this, new NationalBTRowChangeEvent(((NationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NationalBTRowDeleted != null)) {
                    this.NationalBTRowDeleted(this, new NationalBTRowChangeEvent(((NationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NationalBTRowDeleting != null)) {
                    this.NationalBTRowDeleting(this, new NationalBTRowChangeEvent(((NationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNationalBTRow(NationalBTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NationalBTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InternationalBTDataTable : global::System.Data.TypedTableBase<InternationalBTRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnInternationalBT_text;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTDataTable() {
                this.TableName = "InternationalBT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InternationalBTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InternationalBTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InternationalBT_textColumn {
                get {
                    return this.columnInternationalBT_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTRow this[int index] {
                get {
                    return ((InternationalBTRow)(this.Rows[index]));
                }
            }
            
            public event InternationalBTRowChangeEventHandler InternationalBTRowChanging;
            
            public event InternationalBTRowChangeEventHandler InternationalBTRowChanged;
            
            public event InternationalBTRowChangeEventHandler InternationalBTRowDeleting;
            
            public event InternationalBTRowChangeEventHandler InternationalBTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInternationalBTRow(InternationalBTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTRow AddInternationalBTRow(string lang, string InternationalBT_text, verseRow parentverseRowByverse_InternationalBT) {
                InternationalBTRow rowInternationalBTRow = ((InternationalBTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        InternationalBT_text,
                        null};
                if ((parentverseRowByverse_InternationalBT != null)) {
                    columnValuesArray[2] = parentverseRowByverse_InternationalBT[1];
                }
                rowInternationalBTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInternationalBTRow);
                return rowInternationalBTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InternationalBTDataTable cln = ((InternationalBTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InternationalBTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnInternationalBT_text = base.Columns["InternationalBT_text"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnInternationalBT_text = new global::System.Data.DataColumn("InternationalBT_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnInternationalBT_text);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
                this.columnInternationalBT_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTRow NewInternationalBTRow() {
                return ((InternationalBTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InternationalBTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InternationalBTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InternationalBTRowChanged != null)) {
                    this.InternationalBTRowChanged(this, new InternationalBTRowChangeEvent(((InternationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InternationalBTRowChanging != null)) {
                    this.InternationalBTRowChanging(this, new InternationalBTRowChangeEvent(((InternationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InternationalBTRowDeleted != null)) {
                    this.InternationalBTRowDeleted(this, new InternationalBTRowChangeEvent(((InternationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InternationalBTRowDeleting != null)) {
                    this.InternationalBTRowDeleting(this, new InternationalBTRowChangeEvent(((InternationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInternationalBTRow(InternationalBTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InternationalBTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class anchorsDataTable : global::System.Data.TypedTableBase<anchorsRow> {
            
            private global::System.Data.DataColumn columnanchors_Id;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsDataTable() {
                this.TableName = "anchors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal anchorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected anchorsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn anchors_IdColumn {
                get {
                    return this.columnanchors_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow this[int index] {
                get {
                    return ((anchorsRow)(this.Rows[index]));
                }
            }
            
            public event anchorsRowChangeEventHandler anchorsRowChanging;
            
            public event anchorsRowChangeEventHandler anchorsRowChanged;
            
            public event anchorsRowChangeEventHandler anchorsRowDeleting;
            
            public event anchorsRowChangeEventHandler anchorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddanchorsRow(anchorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow AddanchorsRow(verseRow parentverseRowByverse_anchors) {
                anchorsRow rowanchorsRow = ((anchorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentverseRowByverse_anchors != null)) {
                    columnValuesArray[1] = parentverseRowByverse_anchors[1];
                }
                rowanchorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowanchorsRow);
                return rowanchorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                anchorsDataTable cln = ((anchorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new anchorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnanchors_Id = base.Columns["anchors_Id"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnanchors_Id = new global::System.Data.DataColumn("anchors_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanchors_Id);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnanchors_Id}, true));
                this.columnanchors_Id.AutoIncrement = true;
                this.columnanchors_Id.AllowDBNull = false;
                this.columnanchors_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow NewanchorsRow() {
                return ((anchorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new anchorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(anchorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.anchorsRowChanged != null)) {
                    this.anchorsRowChanged(this, new anchorsRowChangeEvent(((anchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.anchorsRowChanging != null)) {
                    this.anchorsRowChanging(this, new anchorsRowChangeEvent(((anchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.anchorsRowDeleted != null)) {
                    this.anchorsRowDeleted(this, new anchorsRowChangeEvent(((anchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.anchorsRowDeleting != null)) {
                    this.anchorsRowDeleting(this, new anchorsRowChangeEvent(((anchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveanchorsRow(anchorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "anchorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class anchorDataTable : global::System.Data.TypedTableBase<anchorRow> {
            
            private global::System.Data.DataColumn columnjumpTarget;
            
            private global::System.Data.DataColumn columntext;
            
            private global::System.Data.DataColumn columnanchor_Id;
            
            private global::System.Data.DataColumn columnanchors_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorDataTable() {
                this.TableName = "anchor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal anchorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected anchorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jumpTargetColumn {
                get {
                    return this.columnjumpTarget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn textColumn {
                get {
                    return this.columntext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn anchor_IdColumn {
                get {
                    return this.columnanchor_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn anchors_IdColumn {
                get {
                    return this.columnanchors_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow this[int index] {
                get {
                    return ((anchorRow)(this.Rows[index]));
                }
            }
            
            public event anchorRowChangeEventHandler anchorRowChanging;
            
            public event anchorRowChangeEventHandler anchorRowChanged;
            
            public event anchorRowChangeEventHandler anchorRowDeleting;
            
            public event anchorRowChangeEventHandler anchorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddanchorRow(anchorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow AddanchorRow(string jumpTarget, string text, anchorsRow parentanchorsRowByanchors_anchor) {
                anchorRow rowanchorRow = ((anchorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        jumpTarget,
                        text,
                        null,
                        null};
                if ((parentanchorsRowByanchors_anchor != null)) {
                    columnValuesArray[3] = parentanchorsRowByanchors_anchor[0];
                }
                rowanchorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowanchorRow);
                return rowanchorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                anchorDataTable cln = ((anchorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new anchorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnjumpTarget = base.Columns["jumpTarget"];
                this.columntext = base.Columns["text"];
                this.columnanchor_Id = base.Columns["anchor_Id"];
                this.columnanchors_Id = base.Columns["anchors_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnjumpTarget = new global::System.Data.DataColumn("jumpTarget", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnjumpTarget);
                this.columntext = new global::System.Data.DataColumn("text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntext);
                this.columnanchor_Id = new global::System.Data.DataColumn("anchor_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanchor_Id);
                this.columnanchors_Id = new global::System.Data.DataColumn("anchors_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanchors_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnanchor_Id}, true));
                this.columnjumpTarget.AllowDBNull = false;
                this.columnjumpTarget.Namespace = "";
                this.columnanchor_Id.AutoIncrement = true;
                this.columnanchor_Id.AllowDBNull = false;
                this.columnanchor_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow NewanchorRow() {
                return ((anchorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new anchorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(anchorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.anchorRowChanged != null)) {
                    this.anchorRowChanged(this, new anchorRowChangeEvent(((anchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.anchorRowChanging != null)) {
                    this.anchorRowChanging(this, new anchorRowChangeEvent(((anchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.anchorRowDeleted != null)) {
                    this.anchorRowDeleted(this, new anchorRowChangeEvent(((anchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.anchorRowDeleting != null)) {
                    this.anchorRowDeleting(this, new anchorRowChangeEvent(((anchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveanchorRow(anchorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "anchorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class exegeticalHelpsDataTable : global::System.Data.TypedTableBase<exegeticalHelpsRow> {
            
            private global::System.Data.DataColumn columnexegeticalHelps_Id;
            
            private global::System.Data.DataColumn columnanchor_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsDataTable() {
                this.TableName = "exegeticalHelps";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal exegeticalHelpsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected exegeticalHelpsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exegeticalHelps_IdColumn {
                get {
                    return this.columnexegeticalHelps_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn anchor_IdColumn {
                get {
                    return this.columnanchor_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow this[int index] {
                get {
                    return ((exegeticalHelpsRow)(this.Rows[index]));
                }
            }
            
            public event exegeticalHelpsRowChangeEventHandler exegeticalHelpsRowChanging;
            
            public event exegeticalHelpsRowChangeEventHandler exegeticalHelpsRowChanged;
            
            public event exegeticalHelpsRowChangeEventHandler exegeticalHelpsRowDeleting;
            
            public event exegeticalHelpsRowChangeEventHandler exegeticalHelpsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddexegeticalHelpsRow(exegeticalHelpsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow AddexegeticalHelpsRow(anchorRow parentanchorRowByanchor_exegeticalHelps) {
                exegeticalHelpsRow rowexegeticalHelpsRow = ((exegeticalHelpsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentanchorRowByanchor_exegeticalHelps != null)) {
                    columnValuesArray[1] = parentanchorRowByanchor_exegeticalHelps[2];
                }
                rowexegeticalHelpsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowexegeticalHelpsRow);
                return rowexegeticalHelpsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                exegeticalHelpsDataTable cln = ((exegeticalHelpsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new exegeticalHelpsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnexegeticalHelps_Id = base.Columns["exegeticalHelps_Id"];
                this.columnanchor_Id = base.Columns["anchor_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnexegeticalHelps_Id = new global::System.Data.DataColumn("exegeticalHelps_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnexegeticalHelps_Id);
                this.columnanchor_Id = new global::System.Data.DataColumn("anchor_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanchor_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnexegeticalHelps_Id}, true));
                this.columnexegeticalHelps_Id.AutoIncrement = true;
                this.columnexegeticalHelps_Id.AllowDBNull = false;
                this.columnexegeticalHelps_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow NewexegeticalHelpsRow() {
                return ((exegeticalHelpsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new exegeticalHelpsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(exegeticalHelpsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.exegeticalHelpsRowChanged != null)) {
                    this.exegeticalHelpsRowChanged(this, new exegeticalHelpsRowChangeEvent(((exegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.exegeticalHelpsRowChanging != null)) {
                    this.exegeticalHelpsRowChanging(this, new exegeticalHelpsRowChangeEvent(((exegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.exegeticalHelpsRowDeleted != null)) {
                    this.exegeticalHelpsRowDeleted(this, new exegeticalHelpsRowChangeEvent(((exegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.exegeticalHelpsRowDeleting != null)) {
                    this.exegeticalHelpsRowDeleting(this, new exegeticalHelpsRowChangeEvent(((exegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveexegeticalHelpsRow(exegeticalHelpsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "exegeticalHelpsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class exegeticalHelpDataTable : global::System.Data.TypedTableBase<exegeticalHelpRow> {
            
            private global::System.Data.DataColumn columnsource;
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnquote;
            
            private global::System.Data.DataColumn columnexegeticalHelps_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpDataTable() {
                this.TableName = "exegeticalHelp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal exegeticalHelpDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected exegeticalHelpDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceColumn {
                get {
                    return this.columnsource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn quoteColumn {
                get {
                    return this.columnquote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exegeticalHelps_IdColumn {
                get {
                    return this.columnexegeticalHelps_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRow this[int index] {
                get {
                    return ((exegeticalHelpRow)(this.Rows[index]));
                }
            }
            
            public event exegeticalHelpRowChangeEventHandler exegeticalHelpRowChanging;
            
            public event exegeticalHelpRowChangeEventHandler exegeticalHelpRowChanged;
            
            public event exegeticalHelpRowChangeEventHandler exegeticalHelpRowDeleting;
            
            public event exegeticalHelpRowChangeEventHandler exegeticalHelpRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddexegeticalHelpRow(exegeticalHelpRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRow AddexegeticalHelpRow(string source, string memberID, string quote, exegeticalHelpsRow parentexegeticalHelpsRowByexegeticalHelps_exegeticalHelp) {
                exegeticalHelpRow rowexegeticalHelpRow = ((exegeticalHelpRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        source,
                        memberID,
                        quote,
                        null};
                if ((parentexegeticalHelpsRowByexegeticalHelps_exegeticalHelp != null)) {
                    columnValuesArray[3] = parentexegeticalHelpsRowByexegeticalHelps_exegeticalHelp[0];
                }
                rowexegeticalHelpRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowexegeticalHelpRow);
                return rowexegeticalHelpRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                exegeticalHelpDataTable cln = ((exegeticalHelpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new exegeticalHelpDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsource = base.Columns["source"];
                this.columnmemberID = base.Columns["memberID"];
                this.columnquote = base.Columns["quote"];
                this.columnexegeticalHelps_Id = base.Columns["exegeticalHelps_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsource = new global::System.Data.DataColumn("source", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsource);
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnquote = new global::System.Data.DataColumn("quote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquote);
                this.columnexegeticalHelps_Id = new global::System.Data.DataColumn("exegeticalHelps_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnexegeticalHelps_Id);
                this.columnsource.AllowDBNull = false;
                this.columnsource.Namespace = "";
                this.columnmemberID.Namespace = "";
                this.columnquote.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRow NewexegeticalHelpRow() {
                return ((exegeticalHelpRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new exegeticalHelpRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(exegeticalHelpRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.exegeticalHelpRowChanged != null)) {
                    this.exegeticalHelpRowChanged(this, new exegeticalHelpRowChangeEvent(((exegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.exegeticalHelpRowChanging != null)) {
                    this.exegeticalHelpRowChanging(this, new exegeticalHelpRowChangeEvent(((exegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.exegeticalHelpRowDeleted != null)) {
                    this.exegeticalHelpRowDeleted(this, new exegeticalHelpRowChangeEvent(((exegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.exegeticalHelpRowDeleting != null)) {
                    this.exegeticalHelpRowDeleting(this, new exegeticalHelpRowChangeEvent(((exegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveexegeticalHelpRow(exegeticalHelpRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "exegeticalHelpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestQuestionsDataTable : global::System.Data.TypedTableBase<TestQuestionsRow> {
            
            private global::System.Data.DataColumn columnTestQuestions_Id;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsDataTable() {
                this.TableName = "TestQuestions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestQuestionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestions_IdColumn {
                get {
                    return this.columnTestQuestions_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow this[int index] {
                get {
                    return ((TestQuestionsRow)(this.Rows[index]));
                }
            }
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowChanging;
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowChanged;
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowDeleting;
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestQuestionsRow(TestQuestionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow AddTestQuestionsRow(verseRow parentverseRowByverse_TestQuestions) {
                TestQuestionsRow rowTestQuestionsRow = ((TestQuestionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentverseRowByverse_TestQuestions != null)) {
                    columnValuesArray[1] = parentverseRowByverse_TestQuestions[1];
                }
                rowTestQuestionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestQuestionsRow);
                return rowTestQuestionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestQuestionsDataTable cln = ((TestQuestionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestQuestionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestQuestions_Id = base.Columns["TestQuestions_Id"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestQuestions_Id = new global::System.Data.DataColumn("TestQuestions_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestions_Id);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestQuestions_Id}, true));
                this.columnTestQuestions_Id.AutoIncrement = true;
                this.columnTestQuestions_Id.AllowDBNull = false;
                this.columnTestQuestions_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow NewTestQuestionsRow() {
                return ((TestQuestionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestQuestionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestQuestionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestQuestionsRowChanged != null)) {
                    this.TestQuestionsRowChanged(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestQuestionsRowChanging != null)) {
                    this.TestQuestionsRowChanging(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestQuestionsRowDeleted != null)) {
                    this.TestQuestionsRowDeleted(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestQuestionsRowDeleting != null)) {
                    this.TestQuestionsRowDeleting(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestQuestionsRow(TestQuestionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestQuestionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestQuestionDataTable : global::System.Data.TypedTableBase<TestQuestionRow> {
            
            private global::System.Data.DataColumn columnvisible;
            
            private global::System.Data.DataColumn columnTestQuestion_Id;
            
            private global::System.Data.DataColumn columnTestQuestions_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionDataTable() {
                this.TableName = "TestQuestion";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestQuestionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestion_IdColumn {
                get {
                    return this.columnTestQuestion_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestions_IdColumn {
                get {
                    return this.columnTestQuestions_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow this[int index] {
                get {
                    return ((TestQuestionRow)(this.Rows[index]));
                }
            }
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowChanging;
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowChanged;
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowDeleting;
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestQuestionRow(TestQuestionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow AddTestQuestionRow(bool visible, TestQuestionsRow parentTestQuestionsRowByTestQuestions_TestQuestion) {
                TestQuestionRow rowTestQuestionRow = ((TestQuestionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        visible,
                        null,
                        null};
                if ((parentTestQuestionsRowByTestQuestions_TestQuestion != null)) {
                    columnValuesArray[2] = parentTestQuestionsRowByTestQuestions_TestQuestion[0];
                }
                rowTestQuestionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestQuestionRow);
                return rowTestQuestionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestQuestionDataTable cln = ((TestQuestionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestQuestionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvisible = base.Columns["visible"];
                this.columnTestQuestion_Id = base.Columns["TestQuestion_Id"];
                this.columnTestQuestions_Id = base.Columns["TestQuestions_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvisible = new global::System.Data.DataColumn("visible", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvisible);
                this.columnTestQuestion_Id = new global::System.Data.DataColumn("TestQuestion_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestion_Id);
                this.columnTestQuestions_Id = new global::System.Data.DataColumn("TestQuestions_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestions_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestQuestion_Id}, true));
                this.columnvisible.AllowDBNull = false;
                this.columnvisible.Namespace = "";
                this.columnTestQuestion_Id.AutoIncrement = true;
                this.columnTestQuestion_Id.AllowDBNull = false;
                this.columnTestQuestion_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow NewTestQuestionRow() {
                return ((TestQuestionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestQuestionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestQuestionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestQuestionRowChanged != null)) {
                    this.TestQuestionRowChanged(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestQuestionRowChanging != null)) {
                    this.TestQuestionRowChanging(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestQuestionRowDeleted != null)) {
                    this.TestQuestionRowDeleted(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestQuestionRowDeleting != null)) {
                    this.TestQuestionRowDeleting(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestQuestionRow(TestQuestionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestQuestionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TQVernacularDataTable : global::System.Data.TypedTableBase<TQVernacularRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnTQVernacular_text;
            
            private global::System.Data.DataColumn columnTestQuestion_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQVernacularDataTable() {
                this.TableName = "TQVernacular";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TQVernacularDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TQVernacularDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TQVernacular_textColumn {
                get {
                    return this.columnTQVernacular_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestion_IdColumn {
                get {
                    return this.columnTestQuestion_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQVernacularRow this[int index] {
                get {
                    return ((TQVernacularRow)(this.Rows[index]));
                }
            }
            
            public event TQVernacularRowChangeEventHandler TQVernacularRowChanging;
            
            public event TQVernacularRowChangeEventHandler TQVernacularRowChanged;
            
            public event TQVernacularRowChangeEventHandler TQVernacularRowDeleting;
            
            public event TQVernacularRowChangeEventHandler TQVernacularRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTQVernacularRow(TQVernacularRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQVernacularRow AddTQVernacularRow(string lang, string TQVernacular_text, TestQuestionRow parentTestQuestionRowByTestQuestion_TQVernacular) {
                TQVernacularRow rowTQVernacularRow = ((TQVernacularRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        TQVernacular_text,
                        null};
                if ((parentTestQuestionRowByTestQuestion_TQVernacular != null)) {
                    columnValuesArray[2] = parentTestQuestionRowByTestQuestion_TQVernacular[1];
                }
                rowTQVernacularRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTQVernacularRow);
                return rowTQVernacularRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TQVernacularDataTable cln = ((TQVernacularDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TQVernacularDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnTQVernacular_text = base.Columns["TQVernacular_text"];
                this.columnTestQuestion_Id = base.Columns["TestQuestion_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnTQVernacular_text = new global::System.Data.DataColumn("TQVernacular_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnTQVernacular_text);
                this.columnTestQuestion_Id = new global::System.Data.DataColumn("TestQuestion_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestion_Id);
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
                this.columnTQVernacular_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQVernacularRow NewTQVernacularRow() {
                return ((TQVernacularRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TQVernacularRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TQVernacularRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TQVernacularRowChanged != null)) {
                    this.TQVernacularRowChanged(this, new TQVernacularRowChangeEvent(((TQVernacularRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TQVernacularRowChanging != null)) {
                    this.TQVernacularRowChanging(this, new TQVernacularRowChangeEvent(((TQVernacularRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TQVernacularRowDeleted != null)) {
                    this.TQVernacularRowDeleted(this, new TQVernacularRowChangeEvent(((TQVernacularRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TQVernacularRowDeleting != null)) {
                    this.TQVernacularRowDeleting(this, new TQVernacularRowChangeEvent(((TQVernacularRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTQVernacularRow(TQVernacularRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TQVernacularDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TQInternationalBTDataTable : global::System.Data.TypedTableBase<TQInternationalBTRow> {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnTQInternationalBT_text;
            
            private global::System.Data.DataColumn columnTestQuestion_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQInternationalBTDataTable() {
                this.TableName = "TQInternationalBT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TQInternationalBTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TQInternationalBTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TQInternationalBT_textColumn {
                get {
                    return this.columnTQInternationalBT_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestion_IdColumn {
                get {
                    return this.columnTestQuestion_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQInternationalBTRow this[int index] {
                get {
                    return ((TQInternationalBTRow)(this.Rows[index]));
                }
            }
            
            public event TQInternationalBTRowChangeEventHandler TQInternationalBTRowChanging;
            
            public event TQInternationalBTRowChangeEventHandler TQInternationalBTRowChanged;
            
            public event TQInternationalBTRowChangeEventHandler TQInternationalBTRowDeleting;
            
            public event TQInternationalBTRowChangeEventHandler TQInternationalBTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTQInternationalBTRow(TQInternationalBTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQInternationalBTRow AddTQInternationalBTRow(string lang, string TQInternationalBT_text, TestQuestionRow parentTestQuestionRowByTestQuestion_TQInternationalBT) {
                TQInternationalBTRow rowTQInternationalBTRow = ((TQInternationalBTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        TQInternationalBT_text,
                        null};
                if ((parentTestQuestionRowByTestQuestion_TQInternationalBT != null)) {
                    columnValuesArray[2] = parentTestQuestionRowByTestQuestion_TQInternationalBT[1];
                }
                rowTQInternationalBTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTQInternationalBTRow);
                return rowTQInternationalBTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TQInternationalBTDataTable cln = ((TQInternationalBTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TQInternationalBTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnTQInternationalBT_text = base.Columns["TQInternationalBT_text"];
                this.columnTestQuestion_Id = base.Columns["TestQuestion_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnTQInternationalBT_text = new global::System.Data.DataColumn("TQInternationalBT_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnTQInternationalBT_text);
                this.columnTestQuestion_Id = new global::System.Data.DataColumn("TestQuestion_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestion_Id);
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
                this.columnTQInternationalBT_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQInternationalBTRow NewTQInternationalBTRow() {
                return ((TQInternationalBTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TQInternationalBTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TQInternationalBTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TQInternationalBTRowChanged != null)) {
                    this.TQInternationalBTRowChanged(this, new TQInternationalBTRowChangeEvent(((TQInternationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TQInternationalBTRowChanging != null)) {
                    this.TQInternationalBTRowChanging(this, new TQInternationalBTRowChangeEvent(((TQInternationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TQInternationalBTRowDeleted != null)) {
                    this.TQInternationalBTRowDeleted(this, new TQInternationalBTRowChangeEvent(((TQInternationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TQInternationalBTRowDeleting != null)) {
                    this.TQInternationalBTRowDeleting(this, new TQInternationalBTRowChangeEvent(((TQInternationalBTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTQInternationalBTRow(TQInternationalBTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TQInternationalBTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnswersDataTable : global::System.Data.TypedTableBase<AnswersRow> {
            
            private global::System.Data.DataColumn columnAnswers_Id;
            
            private global::System.Data.DataColumn columnTestQuestion_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersDataTable() {
                this.TableName = "Answers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnswersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnswersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Answers_IdColumn {
                get {
                    return this.columnAnswers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestion_IdColumn {
                get {
                    return this.columnTestQuestion_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow this[int index] {
                get {
                    return ((AnswersRow)(this.Rows[index]));
                }
            }
            
            public event AnswersRowChangeEventHandler AnswersRowChanging;
            
            public event AnswersRowChangeEventHandler AnswersRowChanged;
            
            public event AnswersRowChangeEventHandler AnswersRowDeleting;
            
            public event AnswersRowChangeEventHandler AnswersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnswersRow(AnswersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow AddAnswersRow(TestQuestionRow parentTestQuestionRowByTestQuestion_Answers) {
                AnswersRow rowAnswersRow = ((AnswersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentTestQuestionRowByTestQuestion_Answers != null)) {
                    columnValuesArray[1] = parentTestQuestionRowByTestQuestion_Answers[1];
                }
                rowAnswersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnswersRow);
                return rowAnswersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AnswersDataTable cln = ((AnswersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnswersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAnswers_Id = base.Columns["Answers_Id"];
                this.columnTestQuestion_Id = base.Columns["TestQuestion_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAnswers_Id = new global::System.Data.DataColumn("Answers_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAnswers_Id);
                this.columnTestQuestion_Id = new global::System.Data.DataColumn("TestQuestion_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestion_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAnswers_Id}, true));
                this.columnAnswers_Id.AutoIncrement = true;
                this.columnAnswers_Id.AllowDBNull = false;
                this.columnAnswers_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow NewAnswersRow() {
                return ((AnswersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnswersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AnswersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnswersRowChanged != null)) {
                    this.AnswersRowChanged(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnswersRowChanging != null)) {
                    this.AnswersRowChanging(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnswersRowDeleted != null)) {
                    this.AnswersRowDeleted(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnswersRowDeleting != null)) {
                    this.AnswersRowDeleting(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnswersRow(AnswersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnswersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class answerDataTable : global::System.Data.TypedTableBase<answerRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnanswer_text;
            
            private global::System.Data.DataColumn columnAnswers_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerDataTable() {
                this.TableName = "answer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal answerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected answerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn answer_textColumn {
                get {
                    return this.columnanswer_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Answers_IdColumn {
                get {
                    return this.columnAnswers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRow this[int index] {
                get {
                    return ((answerRow)(this.Rows[index]));
                }
            }
            
            public event answerRowChangeEventHandler answerRowChanging;
            
            public event answerRowChangeEventHandler answerRowChanged;
            
            public event answerRowChangeEventHandler answerRowDeleting;
            
            public event answerRowChangeEventHandler answerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddanswerRow(answerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRow AddanswerRow(string memberID, string lang, string answer_text, AnswersRow parentAnswersRowByAnswers_answer) {
                answerRow rowanswerRow = ((answerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        lang,
                        answer_text,
                        null};
                if ((parentAnswersRowByAnswers_answer != null)) {
                    columnValuesArray[3] = parentAnswersRowByAnswers_answer[0];
                }
                rowanswerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowanswerRow);
                return rowanswerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                answerDataTable cln = ((answerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new answerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnlang = base.Columns["lang"];
                this.columnanswer_text = base.Columns["answer_text"];
                this.columnAnswers_Id = base.Columns["Answers_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnanswer_text = new global::System.Data.DataColumn("answer_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnanswer_text);
                this.columnAnswers_Id = new global::System.Data.DataColumn("Answers_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAnswers_Id);
                this.columnmemberID.Namespace = "";
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
                this.columnanswer_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRow NewanswerRow() {
                return ((answerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new answerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(answerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.answerRowChanged != null)) {
                    this.answerRowChanged(this, new answerRowChangeEvent(((answerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.answerRowChanging != null)) {
                    this.answerRowChanging(this, new answerRowChangeEvent(((answerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.answerRowDeleted != null)) {
                    this.answerRowDeleted(this, new answerRowChangeEvent(((answerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.answerRowDeleting != null)) {
                    this.answerRowDeleting(this, new answerRowChangeEvent(((answerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveanswerRow(answerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "answerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RetellingsDataTable : global::System.Data.TypedTableBase<RetellingsRow> {
            
            private global::System.Data.DataColumn columnRetellings_Id;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsDataTable() {
                this.TableName = "Retellings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RetellingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Retellings_IdColumn {
                get {
                    return this.columnRetellings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow this[int index] {
                get {
                    return ((RetellingsRow)(this.Rows[index]));
                }
            }
            
            public event RetellingsRowChangeEventHandler RetellingsRowChanging;
            
            public event RetellingsRowChangeEventHandler RetellingsRowChanged;
            
            public event RetellingsRowChangeEventHandler RetellingsRowDeleting;
            
            public event RetellingsRowChangeEventHandler RetellingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRetellingsRow(RetellingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow AddRetellingsRow(verseRow parentverseRowByverse_Retellings) {
                RetellingsRow rowRetellingsRow = ((RetellingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentverseRowByverse_Retellings != null)) {
                    columnValuesArray[1] = parentverseRowByverse_Retellings[1];
                }
                rowRetellingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRetellingsRow);
                return rowRetellingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RetellingsDataTable cln = ((RetellingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RetellingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRetellings_Id = base.Columns["Retellings_Id"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRetellings_Id = new global::System.Data.DataColumn("Retellings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRetellings_Id);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRetellings_Id}, true));
                this.columnRetellings_Id.AutoIncrement = true;
                this.columnRetellings_Id.AllowDBNull = false;
                this.columnRetellings_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow NewRetellingsRow() {
                return ((RetellingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RetellingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RetellingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RetellingsRowChanged != null)) {
                    this.RetellingsRowChanged(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RetellingsRowChanging != null)) {
                    this.RetellingsRowChanging(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RetellingsRowDeleted != null)) {
                    this.RetellingsRowDeleted(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RetellingsRowDeleting != null)) {
                    this.RetellingsRowDeleting(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRetellingsRow(RetellingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RetellingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RetellingDataTable : global::System.Data.TypedTableBase<RetellingRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnRetelling_text;
            
            private global::System.Data.DataColumn columnRetellings_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingDataTable() {
                this.TableName = "Retelling";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RetellingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Retelling_textColumn {
                get {
                    return this.columnRetelling_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Retellings_IdColumn {
                get {
                    return this.columnRetellings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow this[int index] {
                get {
                    return ((RetellingRow)(this.Rows[index]));
                }
            }
            
            public event RetellingRowChangeEventHandler RetellingRowChanging;
            
            public event RetellingRowChangeEventHandler RetellingRowChanged;
            
            public event RetellingRowChangeEventHandler RetellingRowDeleting;
            
            public event RetellingRowChangeEventHandler RetellingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRetellingRow(RetellingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow AddRetellingRow(string memberID, string lang, string Retelling_text, RetellingsRow parentRetellingsRowByRetellings_Retelling) {
                RetellingRow rowRetellingRow = ((RetellingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        lang,
                        Retelling_text,
                        null};
                if ((parentRetellingsRowByRetellings_Retelling != null)) {
                    columnValuesArray[3] = parentRetellingsRowByRetellings_Retelling[0];
                }
                rowRetellingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRetellingRow);
                return rowRetellingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RetellingDataTable cln = ((RetellingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RetellingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnlang = base.Columns["lang"];
                this.columnRetelling_text = base.Columns["Retelling_text"];
                this.columnRetellings_Id = base.Columns["Retellings_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnRetelling_text = new global::System.Data.DataColumn("Retelling_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnRetelling_text);
                this.columnRetellings_Id = new global::System.Data.DataColumn("Retellings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRetellings_Id);
                this.columnmemberID.Namespace = "";
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
                this.columnRetelling_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow NewRetellingRow() {
                return ((RetellingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RetellingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RetellingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RetellingRowChanged != null)) {
                    this.RetellingRowChanged(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RetellingRowChanging != null)) {
                    this.RetellingRowChanging(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RetellingRowDeleted != null)) {
                    this.RetellingRowDeleted(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RetellingRowDeleting != null)) {
                    this.RetellingRowDeleting(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRetellingRow(RetellingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RetellingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantNotesDataTable : global::System.Data.TypedTableBase<ConsultantNotesRow> {
            
            private global::System.Data.DataColumn columnConsultantNotes_Id;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesDataTable() {
                this.TableName = "ConsultantNotes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNotesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsultantNotesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNotes_IdColumn {
                get {
                    return this.columnConsultantNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow this[int index] {
                get {
                    return ((ConsultantNotesRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowChanging;
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowChanged;
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowDeleting;
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantNotesRow(ConsultantNotesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow AddConsultantNotesRow(verseRow parentverseRowByverse_ConsultantNotes) {
                ConsultantNotesRow rowConsultantNotesRow = ((ConsultantNotesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentverseRowByverse_ConsultantNotes != null)) {
                    columnValuesArray[1] = parentverseRowByverse_ConsultantNotes[1];
                }
                rowConsultantNotesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantNotesRow);
                return rowConsultantNotesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantNotesDataTable cln = ((ConsultantNotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantNotesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConsultantNotes_Id = base.Columns["ConsultantNotes_Id"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConsultantNotes_Id = new global::System.Data.DataColumn("ConsultantNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantNotes_Id);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnConsultantNotes_Id}, true));
                this.columnConsultantNotes_Id.AutoIncrement = true;
                this.columnConsultantNotes_Id.AllowDBNull = false;
                this.columnConsultantNotes_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow NewConsultantNotesRow() {
                return ((ConsultantNotesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantNotesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantNotesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantNotesRowChanged != null)) {
                    this.ConsultantNotesRowChanged(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantNotesRowChanging != null)) {
                    this.ConsultantNotesRowChanging(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantNotesRowDeleted != null)) {
                    this.ConsultantNotesRowDeleted(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantNotesRowDeleting != null)) {
                    this.ConsultantNotesRowDeleting(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantNotesRow(ConsultantNotesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantNotesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantNoteDataTable : global::System.Data.TypedTableBase<ConsultantNoteRow> {
            
            private global::System.Data.DataColumn columnround;
            
            private global::System.Data.DataColumn columnConsultantNote_Id;
            
            private global::System.Data.DataColumn columnConsultantNotes_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteDataTable() {
                this.TableName = "ConsultantNote";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNoteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsultantNoteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn roundColumn {
                get {
                    return this.columnround;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNote_IdColumn {
                get {
                    return this.columnConsultantNote_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNotes_IdColumn {
                get {
                    return this.columnConsultantNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow this[int index] {
                get {
                    return ((ConsultantNoteRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowChanging;
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowChanged;
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowDeleting;
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantNoteRow(ConsultantNoteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow AddConsultantNoteRow(byte round, ConsultantNotesRow parentConsultantNotesRowByConsultantNotes_ConsultantNote) {
                ConsultantNoteRow rowConsultantNoteRow = ((ConsultantNoteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        round,
                        null,
                        null};
                if ((parentConsultantNotesRowByConsultantNotes_ConsultantNote != null)) {
                    columnValuesArray[2] = parentConsultantNotesRowByConsultantNotes_ConsultantNote[0];
                }
                rowConsultantNoteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantNoteRow);
                return rowConsultantNoteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantNoteDataTable cln = ((ConsultantNoteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantNoteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnround = base.Columns["round"];
                this.columnConsultantNote_Id = base.Columns["ConsultantNote_Id"];
                this.columnConsultantNotes_Id = base.Columns["ConsultantNotes_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnround = new global::System.Data.DataColumn("round", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnround);
                this.columnConsultantNote_Id = new global::System.Data.DataColumn("ConsultantNote_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantNote_Id);
                this.columnConsultantNotes_Id = new global::System.Data.DataColumn("ConsultantNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantNotes_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnConsultantNote_Id}, true));
                this.columnround.AllowDBNull = false;
                this.columnround.Namespace = "";
                this.columnConsultantNote_Id.AutoIncrement = true;
                this.columnConsultantNote_Id.AllowDBNull = false;
                this.columnConsultantNote_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow NewConsultantNoteRow() {
                return ((ConsultantNoteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantNoteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantNoteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantNoteRowChanged != null)) {
                    this.ConsultantNoteRowChanged(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantNoteRowChanging != null)) {
                    this.ConsultantNoteRowChanging(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantNoteRowDeleted != null)) {
                    this.ConsultantNoteRowDeleted(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantNoteRowDeleting != null)) {
                    this.ConsultantNoteRowDeleting(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantNoteRow(ConsultantNoteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantNoteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantCommentDataTable : global::System.Data.TypedTableBase<ConsultantCommentRow> {
            
            private global::System.Data.DataColumn columneditRef;
            
            private global::System.Data.DataColumn columnConsultantComment_text;
            
            private global::System.Data.DataColumn columnConsultantNote_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantCommentDataTable() {
                this.TableName = "ConsultantComment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantCommentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsultantCommentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn editRefColumn {
                get {
                    return this.columneditRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantComment_textColumn {
                get {
                    return this.columnConsultantComment_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNote_IdColumn {
                get {
                    return this.columnConsultantNote_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantCommentRow this[int index] {
                get {
                    return ((ConsultantCommentRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantCommentRowChangeEventHandler ConsultantCommentRowChanging;
            
            public event ConsultantCommentRowChangeEventHandler ConsultantCommentRowChanged;
            
            public event ConsultantCommentRowChangeEventHandler ConsultantCommentRowDeleting;
            
            public event ConsultantCommentRowChangeEventHandler ConsultantCommentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantCommentRow(ConsultantCommentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantCommentRow AddConsultantCommentRow(string editRef, string ConsultantComment_text, ConsultantNoteRow parentConsultantNoteRowByConsultantNote_ConsultantComment) {
                ConsultantCommentRow rowConsultantCommentRow = ((ConsultantCommentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        editRef,
                        ConsultantComment_text,
                        null};
                if ((parentConsultantNoteRowByConsultantNote_ConsultantComment != null)) {
                    columnValuesArray[2] = parentConsultantNoteRowByConsultantNote_ConsultantComment[1];
                }
                rowConsultantCommentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantCommentRow);
                return rowConsultantCommentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantCommentDataTable cln = ((ConsultantCommentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantCommentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columneditRef = base.Columns["editRef"];
                this.columnConsultantComment_text = base.Columns["ConsultantComment_text"];
                this.columnConsultantNote_Id = base.Columns["ConsultantNote_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columneditRef = new global::System.Data.DataColumn("editRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columneditRef);
                this.columnConsultantComment_text = new global::System.Data.DataColumn("ConsultantComment_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnConsultantComment_text);
                this.columnConsultantNote_Id = new global::System.Data.DataColumn("ConsultantNote_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantNote_Id);
                this.columneditRef.Namespace = "";
                this.columnConsultantComment_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantCommentRow NewConsultantCommentRow() {
                return ((ConsultantCommentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantCommentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantCommentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantCommentRowChanged != null)) {
                    this.ConsultantCommentRowChanged(this, new ConsultantCommentRowChangeEvent(((ConsultantCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantCommentRowChanging != null)) {
                    this.ConsultantCommentRowChanging(this, new ConsultantCommentRowChangeEvent(((ConsultantCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantCommentRowDeleted != null)) {
                    this.ConsultantCommentRowDeleted(this, new ConsultantCommentRowChangeEvent(((ConsultantCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantCommentRowDeleting != null)) {
                    this.ConsultantCommentRowDeleting(this, new ConsultantCommentRowChangeEvent(((ConsultantCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantCommentRow(ConsultantCommentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantCommentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CrafterResponseDataTable : global::System.Data.TypedTableBase<CrafterResponseRow> {
            
            private global::System.Data.DataColumn columneditRef;
            
            private global::System.Data.DataColumn columnCrafterResponse_text;
            
            private global::System.Data.DataColumn columnConsultantNote_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrafterResponseDataTable() {
                this.TableName = "CrafterResponse";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CrafterResponseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CrafterResponseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn editRefColumn {
                get {
                    return this.columneditRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CrafterResponse_textColumn {
                get {
                    return this.columnCrafterResponse_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNote_IdColumn {
                get {
                    return this.columnConsultantNote_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrafterResponseRow this[int index] {
                get {
                    return ((CrafterResponseRow)(this.Rows[index]));
                }
            }
            
            public event CrafterResponseRowChangeEventHandler CrafterResponseRowChanging;
            
            public event CrafterResponseRowChangeEventHandler CrafterResponseRowChanged;
            
            public event CrafterResponseRowChangeEventHandler CrafterResponseRowDeleting;
            
            public event CrafterResponseRowChangeEventHandler CrafterResponseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCrafterResponseRow(CrafterResponseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrafterResponseRow AddCrafterResponseRow(string editRef, string CrafterResponse_text, ConsultantNoteRow parentConsultantNoteRowByConsultantNote_CrafterResponse) {
                CrafterResponseRow rowCrafterResponseRow = ((CrafterResponseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        editRef,
                        CrafterResponse_text,
                        null};
                if ((parentConsultantNoteRowByConsultantNote_CrafterResponse != null)) {
                    columnValuesArray[2] = parentConsultantNoteRowByConsultantNote_CrafterResponse[1];
                }
                rowCrafterResponseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCrafterResponseRow);
                return rowCrafterResponseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CrafterResponseDataTable cln = ((CrafterResponseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CrafterResponseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columneditRef = base.Columns["editRef"];
                this.columnCrafterResponse_text = base.Columns["CrafterResponse_text"];
                this.columnConsultantNote_Id = base.Columns["ConsultantNote_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columneditRef = new global::System.Data.DataColumn("editRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columneditRef);
                this.columnCrafterResponse_text = new global::System.Data.DataColumn("CrafterResponse_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnCrafterResponse_text);
                this.columnConsultantNote_Id = new global::System.Data.DataColumn("ConsultantNote_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantNote_Id);
                this.columneditRef.Namespace = "";
                this.columnCrafterResponse_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrafterResponseRow NewCrafterResponseRow() {
                return ((CrafterResponseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CrafterResponseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CrafterResponseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CrafterResponseRowChanged != null)) {
                    this.CrafterResponseRowChanged(this, new CrafterResponseRowChangeEvent(((CrafterResponseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CrafterResponseRowChanging != null)) {
                    this.CrafterResponseRowChanging(this, new CrafterResponseRowChangeEvent(((CrafterResponseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CrafterResponseRowDeleted != null)) {
                    this.CrafterResponseRowDeleted(this, new CrafterResponseRowChangeEvent(((CrafterResponseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CrafterResponseRowDeleting != null)) {
                    this.CrafterResponseRowDeleting(this, new CrafterResponseRowChangeEvent(((CrafterResponseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCrafterResponseRow(CrafterResponseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CrafterResponseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoachNotesDataTable : global::System.Data.TypedTableBase<CoachNotesRow> {
            
            private global::System.Data.DataColumn columnCoachNotes_Id;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesDataTable() {
                this.TableName = "CoachNotes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNotesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoachNotesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachNotes_IdColumn {
                get {
                    return this.columnCoachNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow this[int index] {
                get {
                    return ((CoachNotesRow)(this.Rows[index]));
                }
            }
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowChanging;
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowChanged;
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowDeleting;
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoachNotesRow(CoachNotesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow AddCoachNotesRow(verseRow parentverseRowByverse_CoachNotes) {
                CoachNotesRow rowCoachNotesRow = ((CoachNotesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentverseRowByverse_CoachNotes != null)) {
                    columnValuesArray[1] = parentverseRowByverse_CoachNotes[1];
                }
                rowCoachNotesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoachNotesRow);
                return rowCoachNotesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoachNotesDataTable cln = ((CoachNotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoachNotesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCoachNotes_Id = base.Columns["CoachNotes_Id"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCoachNotes_Id = new global::System.Data.DataColumn("CoachNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachNotes_Id);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCoachNotes_Id}, true));
                this.columnCoachNotes_Id.AutoIncrement = true;
                this.columnCoachNotes_Id.AllowDBNull = false;
                this.columnCoachNotes_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow NewCoachNotesRow() {
                return ((CoachNotesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoachNotesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoachNotesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoachNotesRowChanged != null)) {
                    this.CoachNotesRowChanged(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoachNotesRowChanging != null)) {
                    this.CoachNotesRowChanging(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoachNotesRowDeleted != null)) {
                    this.CoachNotesRowDeleted(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoachNotesRowDeleting != null)) {
                    this.CoachNotesRowDeleting(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoachNotesRow(CoachNotesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoachNotesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoachNoteDataTable : global::System.Data.TypedTableBase<CoachNoteRow> {
            
            private global::System.Data.DataColumn columnround;
            
            private global::System.Data.DataColumn columnCoachNote_Id;
            
            private global::System.Data.DataColumn columnCoachNotes_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteDataTable() {
                this.TableName = "CoachNote";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNoteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoachNoteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn roundColumn {
                get {
                    return this.columnround;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachNote_IdColumn {
                get {
                    return this.columnCoachNote_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachNotes_IdColumn {
                get {
                    return this.columnCoachNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow this[int index] {
                get {
                    return ((CoachNoteRow)(this.Rows[index]));
                }
            }
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowChanging;
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowChanged;
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowDeleting;
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoachNoteRow(CoachNoteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow AddCoachNoteRow(byte round, CoachNotesRow parentCoachNotesRowByCoachNotes_CoachNote) {
                CoachNoteRow rowCoachNoteRow = ((CoachNoteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        round,
                        null,
                        null};
                if ((parentCoachNotesRowByCoachNotes_CoachNote != null)) {
                    columnValuesArray[2] = parentCoachNotesRowByCoachNotes_CoachNote[0];
                }
                rowCoachNoteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoachNoteRow);
                return rowCoachNoteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoachNoteDataTable cln = ((CoachNoteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoachNoteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnround = base.Columns["round"];
                this.columnCoachNote_Id = base.Columns["CoachNote_Id"];
                this.columnCoachNotes_Id = base.Columns["CoachNotes_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnround = new global::System.Data.DataColumn("round", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnround);
                this.columnCoachNote_Id = new global::System.Data.DataColumn("CoachNote_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachNote_Id);
                this.columnCoachNotes_Id = new global::System.Data.DataColumn("CoachNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachNotes_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCoachNote_Id}, true));
                this.columnround.AllowDBNull = false;
                this.columnround.Namespace = "";
                this.columnCoachNote_Id.AutoIncrement = true;
                this.columnCoachNote_Id.AllowDBNull = false;
                this.columnCoachNote_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow NewCoachNoteRow() {
                return ((CoachNoteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoachNoteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoachNoteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoachNoteRowChanged != null)) {
                    this.CoachNoteRowChanged(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoachNoteRowChanging != null)) {
                    this.CoachNoteRowChanging(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoachNoteRowDeleted != null)) {
                    this.CoachNoteRowDeleted(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoachNoteRowDeleting != null)) {
                    this.CoachNoteRowDeleting(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoachNoteRow(CoachNoteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoachNoteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoachCommentDataTable : global::System.Data.TypedTableBase<CoachCommentRow> {
            
            private global::System.Data.DataColumn columneditRef;
            
            private global::System.Data.DataColumn columnCoachComment_text;
            
            private global::System.Data.DataColumn columnCoachNote_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachCommentDataTable() {
                this.TableName = "CoachComment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachCommentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoachCommentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn editRefColumn {
                get {
                    return this.columneditRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachComment_textColumn {
                get {
                    return this.columnCoachComment_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachNote_IdColumn {
                get {
                    return this.columnCoachNote_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachCommentRow this[int index] {
                get {
                    return ((CoachCommentRow)(this.Rows[index]));
                }
            }
            
            public event CoachCommentRowChangeEventHandler CoachCommentRowChanging;
            
            public event CoachCommentRowChangeEventHandler CoachCommentRowChanged;
            
            public event CoachCommentRowChangeEventHandler CoachCommentRowDeleting;
            
            public event CoachCommentRowChangeEventHandler CoachCommentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoachCommentRow(CoachCommentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachCommentRow AddCoachCommentRow(string editRef, string CoachComment_text, CoachNoteRow parentCoachNoteRowByCoachNote_CoachComment) {
                CoachCommentRow rowCoachCommentRow = ((CoachCommentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        editRef,
                        CoachComment_text,
                        null};
                if ((parentCoachNoteRowByCoachNote_CoachComment != null)) {
                    columnValuesArray[2] = parentCoachNoteRowByCoachNote_CoachComment[1];
                }
                rowCoachCommentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoachCommentRow);
                return rowCoachCommentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoachCommentDataTable cln = ((CoachCommentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoachCommentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columneditRef = base.Columns["editRef"];
                this.columnCoachComment_text = base.Columns["CoachComment_text"];
                this.columnCoachNote_Id = base.Columns["CoachNote_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columneditRef = new global::System.Data.DataColumn("editRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columneditRef);
                this.columnCoachComment_text = new global::System.Data.DataColumn("CoachComment_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnCoachComment_text);
                this.columnCoachNote_Id = new global::System.Data.DataColumn("CoachNote_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachNote_Id);
                this.columneditRef.Namespace = "";
                this.columnCoachComment_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachCommentRow NewCoachCommentRow() {
                return ((CoachCommentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoachCommentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoachCommentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoachCommentRowChanged != null)) {
                    this.CoachCommentRowChanged(this, new CoachCommentRowChangeEvent(((CoachCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoachCommentRowChanging != null)) {
                    this.CoachCommentRowChanging(this, new CoachCommentRowChangeEvent(((CoachCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoachCommentRowDeleted != null)) {
                    this.CoachCommentRowDeleted(this, new CoachCommentRowChangeEvent(((CoachCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoachCommentRowDeleting != null)) {
                    this.CoachCommentRowDeleting(this, new CoachCommentRowChangeEvent(((CoachCommentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoachCommentRow(CoachCommentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoachCommentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantResponseDataTable : global::System.Data.TypedTableBase<ConsultantResponseRow> {
            
            private global::System.Data.DataColumn columneditRef;
            
            private global::System.Data.DataColumn columnConsultantResponse_text;
            
            private global::System.Data.DataColumn columnCoachNote_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantResponseDataTable() {
                this.TableName = "ConsultantResponse";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantResponseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsultantResponseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn editRefColumn {
                get {
                    return this.columneditRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantResponse_textColumn {
                get {
                    return this.columnConsultantResponse_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachNote_IdColumn {
                get {
                    return this.columnCoachNote_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantResponseRow this[int index] {
                get {
                    return ((ConsultantResponseRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantResponseRowChangeEventHandler ConsultantResponseRowChanging;
            
            public event ConsultantResponseRowChangeEventHandler ConsultantResponseRowChanged;
            
            public event ConsultantResponseRowChangeEventHandler ConsultantResponseRowDeleting;
            
            public event ConsultantResponseRowChangeEventHandler ConsultantResponseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantResponseRow(ConsultantResponseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantResponseRow AddConsultantResponseRow(string editRef, string ConsultantResponse_text, CoachNoteRow parentCoachNoteRowByCoachNote_ConsultantResponse) {
                ConsultantResponseRow rowConsultantResponseRow = ((ConsultantResponseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        editRef,
                        ConsultantResponse_text,
                        null};
                if ((parentCoachNoteRowByCoachNote_ConsultantResponse != null)) {
                    columnValuesArray[2] = parentCoachNoteRowByCoachNote_ConsultantResponse[1];
                }
                rowConsultantResponseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantResponseRow);
                return rowConsultantResponseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantResponseDataTable cln = ((ConsultantResponseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantResponseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columneditRef = base.Columns["editRef"];
                this.columnConsultantResponse_text = base.Columns["ConsultantResponse_text"];
                this.columnCoachNote_Id = base.Columns["CoachNote_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columneditRef = new global::System.Data.DataColumn("editRef", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columneditRef);
                this.columnConsultantResponse_text = new global::System.Data.DataColumn("ConsultantResponse_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnConsultantResponse_text);
                this.columnCoachNote_Id = new global::System.Data.DataColumn("CoachNote_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachNote_Id);
                this.columneditRef.Namespace = "";
                this.columnConsultantResponse_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantResponseRow NewConsultantResponseRow() {
                return ((ConsultantResponseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantResponseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantResponseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantResponseRowChanged != null)) {
                    this.ConsultantResponseRowChanged(this, new ConsultantResponseRowChangeEvent(((ConsultantResponseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantResponseRowChanging != null)) {
                    this.ConsultantResponseRowChanging(this, new ConsultantResponseRowChangeEvent(((ConsultantResponseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantResponseRowDeleted != null)) {
                    this.ConsultantResponseRowDeleted(this, new ConsultantResponseRowChangeEvent(((ConsultantResponseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantResponseRowDeleting != null)) {
                    this.ConsultantResponseRowDeleting(this, new ConsultantResponseRowChangeEvent(((ConsultantResponseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantResponseRow(ConsultantResponseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StoryProject ds = new StoryProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantResponseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class storiesRow : global::System.Data.DataRow {
            
            private storiesDataTable tablestories;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestories = ((storiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectLanguage {
                get {
                    return ((string)(this[this.tablestories.ProjectLanguageColumn]));
                }
                set {
                    this[this.tablestories.ProjectLanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stories_Id {
                get {
                    return ((int)(this[this.tablestories.stories_IdColumn]));
                }
                set {
                    this[this.tablestories.stories_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow[] GetMembersRows() {
                if ((this.Table.ChildRelations["stories_Members"] == null)) {
                    return new MembersRow[0];
                }
                else {
                    return ((MembersRow[])(base.GetChildRows(this.Table.ChildRelations["stories_Members"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontsRow[] GetFontsRows() {
                if ((this.Table.ChildRelations["stories_Fonts"] == null)) {
                    return new FontsRow[0];
                }
                else {
                    return ((FontsRow[])(base.GetChildRows(this.Table.ChildRelations["stories_Fonts"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow[] GetstoryRows() {
                if ((this.Table.ChildRelations["stories_story"] == null)) {
                    return new storyRow[0];
                }
                else {
                    return ((storyRow[])(base.GetChildRows(this.Table.ChildRelations["stories_story"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MembersRow : global::System.Data.DataRow {
            
            private MembersDataTable tableMembers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMembers = ((MembersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Members_Id {
                get {
                    return ((int)(this[this.tableMembers.Members_IdColumn]));
                }
                set {
                    this[this.tableMembers.Members_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stories_Id {
                get {
                    try {
                        return ((int)(this[this.tableMembers.stories_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stories_Id\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.stories_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow storiesRow {
                get {
                    return ((storiesRow)(this.GetParentRow(this.Table.ParentRelations["stories_Members"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["stories_Members"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstories_IdNull() {
                return this.IsNull(this.tableMembers.stories_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstories_IdNull() {
                this[this.tableMembers.stories_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow[] GetMemberRows() {
                if ((this.Table.ChildRelations["Members_Member"] == null)) {
                    return new MemberRow[0];
                }
                else {
                    return ((MemberRow[])(base.GetChildRows(this.Table.ChildRelations["Members_Member"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MemberRow : global::System.Data.DataRow {
            
            private MemberDataTable tableMember;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MemberRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMember = ((MemberDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableMember.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberType {
                get {
                    return ((string)(this[this.tableMember.memberTypeColumn]));
                }
                set {
                    this[this.tableMember.memberTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableMember.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'email\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string altPhone {
                get {
                    try {
                        return ((string)(this[this.tableMember.altPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'altPhone\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.altPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string phone {
                get {
                    try {
                        return ((string)(this[this.tableMember.phoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phone\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.phoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string address {
                get {
                    try {
                        return ((string)(this[this.tableMember.addressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'address\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.addressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberKey {
                get {
                    return ((string)(this[this.tableMember.memberKeyColumn]));
                }
                set {
                    this[this.tableMember.memberKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Members_Id {
                get {
                    try {
                        return ((int)(this[this.tableMember.Members_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Members_Id\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.Members_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow MembersRow {
                get {
                    return ((MembersRow)(this.GetParentRow(this.Table.ParentRelations["Members_Member"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Members_Member"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableMember.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableMember.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.tableMember.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.tableMember.emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaltPhoneNull() {
                return this.IsNull(this.tableMember.altPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaltPhoneNull() {
                this[this.tableMember.altPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphoneNull() {
                return this.IsNull(this.tableMember.phoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphoneNull() {
                this[this.tableMember.phoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaddressNull() {
                return this.IsNull(this.tableMember.addressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaddressNull() {
                this[this.tableMember.addressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMembers_IdNull() {
                return this.IsNull(this.tableMember.Members_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMembers_IdNull() {
                this[this.tableMember.Members_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FontsRow : global::System.Data.DataRow {
            
            private FontsDataTable tableFonts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FontsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFonts = ((FontsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Fonts_Id {
                get {
                    return ((int)(this[this.tableFonts.Fonts_IdColumn]));
                }
                set {
                    this[this.tableFonts.Fonts_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stories_Id {
                get {
                    try {
                        return ((int)(this[this.tableFonts.stories_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stories_Id\' in table \'Fonts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFonts.stories_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow storiesRow {
                get {
                    return ((storiesRow)(this.GetParentRow(this.Table.ParentRelations["stories_Fonts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["stories_Fonts"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstories_IdNull() {
                return this.IsNull(this.tableFonts.stories_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstories_IdNull() {
                this[this.tableFonts.stories_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularFontRow[] GetVernacularFontRows() {
                if ((this.Table.ChildRelations["Fonts_VernacularFont"] == null)) {
                    return new VernacularFontRow[0];
                }
                else {
                    return ((VernacularFontRow[])(base.GetChildRows(this.Table.ChildRelations["Fonts_VernacularFont"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTFontRow[] GetNationalBTFontRows() {
                if ((this.Table.ChildRelations["Fonts_NationalBTFont"] == null)) {
                    return new NationalBTFontRow[0];
                }
                else {
                    return ((NationalBTFontRow[])(base.GetChildRows(this.Table.ChildRelations["Fonts_NationalBTFont"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTFontRow[] GetInternationalBTFontRows() {
                if ((this.Table.ChildRelations["Fonts_InternationalBTFont"] == null)) {
                    return new InternationalBTFontRow[0];
                }
                else {
                    return ((InternationalBTFontRow[])(base.GetChildRows(this.Table.ChildRelations["Fonts_InternationalBTFont"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VernacularFontRow : global::System.Data.DataRow {
            
            private VernacularFontDataTable tableVernacularFont;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VernacularFontRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVernacularFont = ((VernacularFontDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontName {
                get {
                    try {
                        return ((string)(this[this.tableVernacularFont.FontNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FontName\' in table \'VernacularFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacularFont.FontNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FontSize {
                get {
                    try {
                        return ((float)(this[this.tableVernacularFont.FontSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FontSize\' in table \'VernacularFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacularFont.FontSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontColor {
                get {
                    try {
                        return ((string)(this[this.tableVernacularFont.FontColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FontColor\' in table \'VernacularFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacularFont.FontColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Fonts_Id {
                get {
                    try {
                        return ((int)(this[this.tableVernacularFont.Fonts_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fonts_Id\' in table \'VernacularFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacularFont.Fonts_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontsRow FontsRow {
                get {
                    return ((FontsRow)(this.GetParentRow(this.Table.ParentRelations["Fonts_VernacularFont"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Fonts_VernacularFont"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFontNameNull() {
                return this.IsNull(this.tableVernacularFont.FontNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFontNameNull() {
                this[this.tableVernacularFont.FontNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFontSizeNull() {
                return this.IsNull(this.tableVernacularFont.FontSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFontSizeNull() {
                this[this.tableVernacularFont.FontSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFontColorNull() {
                return this.IsNull(this.tableVernacularFont.FontColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFontColorNull() {
                this[this.tableVernacularFont.FontColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFonts_IdNull() {
                return this.IsNull(this.tableVernacularFont.Fonts_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFonts_IdNull() {
                this[this.tableVernacularFont.Fonts_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NationalBTFontRow : global::System.Data.DataRow {
            
            private NationalBTFontDataTable tableNationalBTFont;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NationalBTFontRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNationalBTFont = ((NationalBTFontDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontName {
                get {
                    try {
                        return ((string)(this[this.tableNationalBTFont.FontNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FontName\' in table \'NationalBTFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNationalBTFont.FontNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FontSize {
                get {
                    try {
                        return ((float)(this[this.tableNationalBTFont.FontSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FontSize\' in table \'NationalBTFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNationalBTFont.FontSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontColor {
                get {
                    try {
                        return ((string)(this[this.tableNationalBTFont.FontColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FontColor\' in table \'NationalBTFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNationalBTFont.FontColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Fonts_Id {
                get {
                    try {
                        return ((int)(this[this.tableNationalBTFont.Fonts_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fonts_Id\' in table \'NationalBTFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNationalBTFont.Fonts_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontsRow FontsRow {
                get {
                    return ((FontsRow)(this.GetParentRow(this.Table.ParentRelations["Fonts_NationalBTFont"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Fonts_NationalBTFont"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFontNameNull() {
                return this.IsNull(this.tableNationalBTFont.FontNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFontNameNull() {
                this[this.tableNationalBTFont.FontNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFontSizeNull() {
                return this.IsNull(this.tableNationalBTFont.FontSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFontSizeNull() {
                this[this.tableNationalBTFont.FontSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFontColorNull() {
                return this.IsNull(this.tableNationalBTFont.FontColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFontColorNull() {
                this[this.tableNationalBTFont.FontColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFonts_IdNull() {
                return this.IsNull(this.tableNationalBTFont.Fonts_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFonts_IdNull() {
                this[this.tableNationalBTFont.Fonts_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InternationalBTFontRow : global::System.Data.DataRow {
            
            private InternationalBTFontDataTable tableInternationalBTFont;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InternationalBTFontRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInternationalBTFont = ((InternationalBTFontDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontName {
                get {
                    try {
                        return ((string)(this[this.tableInternationalBTFont.FontNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FontName\' in table \'InternationalBTFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInternationalBTFont.FontNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FontSize {
                get {
                    try {
                        return ((float)(this[this.tableInternationalBTFont.FontSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FontSize\' in table \'InternationalBTFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInternationalBTFont.FontSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontColor {
                get {
                    try {
                        return ((string)(this[this.tableInternationalBTFont.FontColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FontColor\' in table \'InternationalBTFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInternationalBTFont.FontColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Fonts_Id {
                get {
                    try {
                        return ((int)(this[this.tableInternationalBTFont.Fonts_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fonts_Id\' in table \'InternationalBTFont\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInternationalBTFont.Fonts_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontsRow FontsRow {
                get {
                    return ((FontsRow)(this.GetParentRow(this.Table.ParentRelations["Fonts_InternationalBTFont"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Fonts_InternationalBTFont"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFontNameNull() {
                return this.IsNull(this.tableInternationalBTFont.FontNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFontNameNull() {
                this[this.tableInternationalBTFont.FontNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFontSizeNull() {
                return this.IsNull(this.tableInternationalBTFont.FontSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFontSizeNull() {
                this[this.tableInternationalBTFont.FontSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFontColorNull() {
                return this.IsNull(this.tableInternationalBTFont.FontColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFontColorNull() {
                this[this.tableInternationalBTFont.FontColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFonts_IdNull() {
                return this.IsNull(this.tableInternationalBTFont.Fonts_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFonts_IdNull() {
                this[this.tableInternationalBTFont.Fonts_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class storyRow : global::System.Data.DataRow {
            
            private storyDataTable tablestory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestory = ((storyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tablestory.nameColumn]));
                }
                set {
                    this[this.tablestory.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tablestory.guidColumn]));
                }
                set {
                    this[this.tablestory.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int story_Id {
                get {
                    return ((int)(this[this.tablestory.story_IdColumn]));
                }
                set {
                    this[this.tablestory.story_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stories_Id {
                get {
                    try {
                        return ((int)(this[this.tablestory.stories_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stories_Id\' in table \'story\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestory.stories_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow storiesRow {
                get {
                    return ((storiesRow)(this.GetParentRow(this.Table.ParentRelations["stories_story"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["stories_story"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstories_IdNull() {
                return this.IsNull(this.tablestory.stories_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstories_IdNull() {
                this[this.tablestory.stories_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow[] GetCraftingInfoRows() {
                if ((this.Table.ChildRelations["story_CraftingInfo"] == null)) {
                    return new CraftingInfoRow[0];
                }
                else {
                    return ((CraftingInfoRow[])(base.GetChildRows(this.Table.ChildRelations["story_CraftingInfo"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editsRow[] GeteditsRows() {
                if ((this.Table.ChildRelations["story_edits"] == null)) {
                    return new editsRow[0];
                }
                else {
                    return ((editsRow[])(base.GetChildRows(this.Table.ChildRelations["story_edits"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow[] GetversesRows() {
                if ((this.Table.ChildRelations["story_verses"] == null)) {
                    return new versesRow[0];
                }
                else {
                    return ((versesRow[])(base.GetChildRows(this.Table.ChildRelations["story_verses"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CraftingInfoRow : global::System.Data.DataRow {
            
            private CraftingInfoDataTable tableCraftingInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CraftingInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCraftingInfo = ((CraftingInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    return ((int)(this[this.tableCraftingInfo.CraftingInfo_IdColumn]));
                }
                set {
                    this[this.tableCraftingInfo.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int story_Id {
                get {
                    try {
                        return ((int)(this[this.tableCraftingInfo.story_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'story_Id\' in table \'CraftingInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCraftingInfo.story_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow storyRow {
                get {
                    return ((storyRow)(this.GetParentRow(this.Table.ParentRelations["story_CraftingInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["story_CraftingInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstory_IdNull() {
                return this.IsNull(this.tableCraftingInfo.story_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstory_IdNull() {
                this[this.tableCraftingInfo.story_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow[] GetStoryCrafterRows() {
                if ((this.Table.ChildRelations["CraftingInfo_StoryCrafter"] == null)) {
                    return new StoryCrafterRow[0];
                }
                else {
                    return ((StoryCrafterRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_StoryCrafter"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryPurposeRow[] GetStoryPurposeRows() {
                if ((this.Table.ChildRelations["CraftingInfo_StoryPurpose"] == null)) {
                    return new StoryPurposeRow[0];
                }
                else {
                    return ((StoryPurposeRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_StoryPurpose"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow[] GetBackTranslatorRows() {
                if ((this.Table.ChildRelations["CraftingInfo_BackTranslator"] == null)) {
                    return new BackTranslatorRow[0];
                }
                else {
                    return ((BackTranslatorRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_BackTranslator"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow[] GetTestsRows() {
                if ((this.Table.ChildRelations["CraftingInfo_Tests"] == null)) {
                    return new TestsRow[0];
                }
                else {
                    return ((TestsRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_Tests"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StoryCrafterRow : global::System.Data.DataRow {
            
            private StoryCrafterDataTable tableStoryCrafter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryCrafterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStoryCrafter = ((StoryCrafterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableStoryCrafter.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'StoryCrafter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryCrafter.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableStoryCrafter.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'StoryCrafter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryCrafter.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_StoryCrafter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_StoryCrafter"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableStoryCrafter.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableStoryCrafter.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableStoryCrafter.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableStoryCrafter.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StoryPurposeRow : global::System.Data.DataRow {
            
            private StoryPurposeDataTable tableStoryPurpose;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryPurposeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStoryPurpose = ((StoryPurposeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tableStoryPurpose.langColumn]));
                }
                set {
                    this[this.tableStoryPurpose.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoryPurpose_text {
                get {
                    return ((string)(this[this.tableStoryPurpose.StoryPurpose_textColumn]));
                }
                set {
                    this[this.tableStoryPurpose.StoryPurpose_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableStoryPurpose.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'StoryPurpose\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryPurpose.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_StoryPurpose"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_StoryPurpose"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableStoryPurpose.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableStoryPurpose.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BackTranslatorRow : global::System.Data.DataRow {
            
            private BackTranslatorDataTable tableBackTranslator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BackTranslatorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBackTranslator = ((BackTranslatorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableBackTranslator.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'BackTranslator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBackTranslator.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableBackTranslator.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'BackTranslator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBackTranslator.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_BackTranslator"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_BackTranslator"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableBackTranslator.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableBackTranslator.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableBackTranslator.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableBackTranslator.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestsRow : global::System.Data.DataRow {
            
            private TestsDataTable tableTests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTests = ((TestsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Tests_Id {
                get {
                    return ((int)(this[this.tableTests.Tests_IdColumn]));
                }
                set {
                    this[this.tableTests.Tests_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableTests.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'Tests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTests.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_Tests"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_Tests"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableTests.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableTests.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRow[] GetTestRows() {
                if ((this.Table.ChildRelations["Tests_Test"] == null)) {
                    return new TestRow[0];
                }
                else {
                    return ((TestRow[])(base.GetChildRows(this.Table.ChildRelations["Tests_Test"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestRow : global::System.Data.DataRow {
            
            private TestDataTable tableTest;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTest = ((TestDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte number {
                get {
                    return ((byte)(this[this.tableTest.numberColumn]));
                }
                set {
                    this[this.tableTest.numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableTest.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'Test\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTest.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Tests_Id {
                get {
                    try {
                        return ((int)(this[this.tableTest.Tests_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tests_Id\' in table \'Test\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTest.Tests_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow TestsRow {
                get {
                    return ((TestsRow)(this.GetParentRow(this.Table.ParentRelations["Tests_Test"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Tests_Test"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableTest.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableTest.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTests_IdNull() {
                return this.IsNull(this.tableTest.Tests_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTests_IdNull() {
                this[this.tableTest.Tests_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class editsRow : global::System.Data.DataRow {
            
            private editsDataTable tableedits;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal editsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableedits = ((editsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edits_Id {
                get {
                    return ((int)(this[this.tableedits.edits_IdColumn]));
                }
                set {
                    this[this.tableedits.edits_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int story_Id {
                get {
                    try {
                        return ((int)(this[this.tableedits.story_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'story_Id\' in table \'edits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableedits.story_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow storyRow {
                get {
                    return ((storyRow)(this.GetParentRow(this.Table.ParentRelations["story_edits"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["story_edits"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstory_IdNull() {
                return this.IsNull(this.tableedits.story_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstory_IdNull() {
                this[this.tableedits.story_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow[] GeteditRows() {
                if ((this.Table.ChildRelations["edits_edit"] == null)) {
                    return new editRow[0];
                }
                else {
                    return ((editRow[])(base.GetChildRows(this.Table.ChildRelations["edits_edit"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class editRow : global::System.Data.DataRow {
            
            private editDataTable tableedit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal editRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableedit = ((editDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string editor {
                get {
                    try {
                        return ((string)(this[this.tableedit.editorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'editor\' in table \'edit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableedit.editorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dateModified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableedit.dateModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dateModified\' in table \'edit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableedit.dateModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string editKey {
                get {
                    return ((string)(this[this.tableedit.editKeyColumn]));
                }
                set {
                    this[this.tableedit.editKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edits_Id {
                get {
                    try {
                        return ((int)(this[this.tableedit.edits_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'edits_Id\' in table \'edit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableedit.edits_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editsRow editsRow {
                get {
                    return ((editsRow)(this.GetParentRow(this.Table.ParentRelations["edits_edit"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["edits_edit"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseditorNull() {
                return this.IsNull(this.tableedit.editorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteditorNull() {
                this[this.tableedit.editorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateModifiedNull() {
                return this.IsNull(this.tableedit.dateModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateModifiedNull() {
                this[this.tableedit.dateModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isedits_IdNull() {
                return this.IsNull(this.tableedit.edits_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setedits_IdNull() {
                this[this.tableedit.edits_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRow[] GetdescriptionRows() {
                if ((this.Table.ChildRelations["edit_description"] == null)) {
                    return new descriptionRow[0];
                }
                else {
                    return ((descriptionRow[])(base.GetChildRows(this.Table.ChildRelations["edit_description"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class descriptionRow : global::System.Data.DataRow {
            
            private descriptionDataTable tabledescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal descriptionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledescription = ((descriptionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tabledescription.langColumn]));
                }
                set {
                    this[this.tabledescription.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description_text {
                get {
                    return ((string)(this[this.tabledescription.description_textColumn]));
                }
                set {
                    this[this.tabledescription.description_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string editKey {
                get {
                    try {
                        return ((string)(this[this.tabledescription.editKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'editKey\' in table \'description\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledescription.editKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow editRow {
                get {
                    return ((editRow)(this.GetParentRow(this.Table.ParentRelations["edit_description"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["edit_description"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseditKeyNull() {
                return this.IsNull(this.tabledescription.editKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteditKeyNull() {
                this[this.tabledescription.editKeyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class versesRow : global::System.Data.DataRow {
            
            private versesDataTable tableverses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal versesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableverses = ((versesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verses_Id {
                get {
                    return ((int)(this[this.tableverses.verses_IdColumn]));
                }
                set {
                    this[this.tableverses.verses_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int story_Id {
                get {
                    try {
                        return ((int)(this[this.tableverses.story_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'story_Id\' in table \'verses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableverses.story_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow storyRow {
                get {
                    return ((storyRow)(this.GetParentRow(this.Table.ParentRelations["story_verses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["story_verses"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstory_IdNull() {
                return this.IsNull(this.tableverses.story_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstory_IdNull() {
                this[this.tableverses.story_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow[] GetverseRows() {
                if ((this.Table.ChildRelations["verses_verse"] == null)) {
                    return new verseRow[0];
                }
                else {
                    return ((verseRow[])(base.GetChildRows(this.Table.ChildRelations["verses_verse"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class verseRow : global::System.Data.DataRow {
            
            private verseDataTable tableverse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal verseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableverse = ((verseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableverse.guidColumn]));
                }
                set {
                    this[this.tableverse.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    return ((int)(this[this.tableverse.verse_IdColumn]));
                }
                set {
                    this[this.tableverse.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verses_Id {
                get {
                    try {
                        return ((int)(this[this.tableverse.verses_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verses_Id\' in table \'verse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableverse.verses_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow versesRow {
                get {
                    return ((versesRow)(this.GetParentRow(this.Table.ParentRelations["verses_verse"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verses_verse"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverses_IdNull() {
                return this.IsNull(this.tableverse.verses_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverses_IdNull() {
                this[this.tableverse.verses_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularRow[] GetVernacularRows() {
                if ((this.Table.ChildRelations["verse_Vernacular"] == null)) {
                    return new VernacularRow[0];
                }
                else {
                    return ((VernacularRow[])(base.GetChildRows(this.Table.ChildRelations["verse_Vernacular"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTRow[] GetNationalBTRows() {
                if ((this.Table.ChildRelations["verse_NationalBT"] == null)) {
                    return new NationalBTRow[0];
                }
                else {
                    return ((NationalBTRow[])(base.GetChildRows(this.Table.ChildRelations["verse_NationalBT"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTRow[] GetInternationalBTRows() {
                if ((this.Table.ChildRelations["verse_InternationalBT"] == null)) {
                    return new InternationalBTRow[0];
                }
                else {
                    return ((InternationalBTRow[])(base.GetChildRows(this.Table.ChildRelations["verse_InternationalBT"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow[] GetanchorsRows() {
                if ((this.Table.ChildRelations["verse_anchors"] == null)) {
                    return new anchorsRow[0];
                }
                else {
                    return ((anchorsRow[])(base.GetChildRows(this.Table.ChildRelations["verse_anchors"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow[] GetTestQuestionsRows() {
                if ((this.Table.ChildRelations["verse_TestQuestions"] == null)) {
                    return new TestQuestionsRow[0];
                }
                else {
                    return ((TestQuestionsRow[])(base.GetChildRows(this.Table.ChildRelations["verse_TestQuestions"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow[] GetRetellingsRows() {
                if ((this.Table.ChildRelations["verse_Retellings"] == null)) {
                    return new RetellingsRow[0];
                }
                else {
                    return ((RetellingsRow[])(base.GetChildRows(this.Table.ChildRelations["verse_Retellings"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow[] GetConsultantNotesRows() {
                if ((this.Table.ChildRelations["verse_ConsultantNotes"] == null)) {
                    return new ConsultantNotesRow[0];
                }
                else {
                    return ((ConsultantNotesRow[])(base.GetChildRows(this.Table.ChildRelations["verse_ConsultantNotes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow[] GetCoachNotesRows() {
                if ((this.Table.ChildRelations["verse_CoachNotes"] == null)) {
                    return new CoachNotesRow[0];
                }
                else {
                    return ((CoachNotesRow[])(base.GetChildRows(this.Table.ChildRelations["verse_CoachNotes"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VernacularRow : global::System.Data.DataRow {
            
            private VernacularDataTable tableVernacular;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VernacularRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVernacular = ((VernacularDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tableVernacular.langColumn]));
                }
                set {
                    this[this.tableVernacular.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Vernacular_text {
                get {
                    return ((string)(this[this.tableVernacular.Vernacular_textColumn]));
                }
                set {
                    this[this.tableVernacular.Vernacular_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableVernacular.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'Vernacular\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacular.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_Vernacular"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_Vernacular"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableVernacular.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableVernacular.verse_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NationalBTRow : global::System.Data.DataRow {
            
            private NationalBTDataTable tableNationalBT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NationalBTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNationalBT = ((NationalBTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tableNationalBT.langColumn]));
                }
                set {
                    this[this.tableNationalBT.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NationalBT_text {
                get {
                    return ((string)(this[this.tableNationalBT.NationalBT_textColumn]));
                }
                set {
                    this[this.tableNationalBT.NationalBT_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableNationalBT.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'NationalBT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNationalBT.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_NationalBT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_NationalBT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableNationalBT.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableNationalBT.verse_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InternationalBTRow : global::System.Data.DataRow {
            
            private InternationalBTDataTable tableInternationalBT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InternationalBTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInternationalBT = ((InternationalBTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tableInternationalBT.langColumn]));
                }
                set {
                    this[this.tableInternationalBT.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InternationalBT_text {
                get {
                    return ((string)(this[this.tableInternationalBT.InternationalBT_textColumn]));
                }
                set {
                    this[this.tableInternationalBT.InternationalBT_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableInternationalBT.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'InternationalBT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInternationalBT.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_InternationalBT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_InternationalBT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableInternationalBT.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableInternationalBT.verse_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class anchorsRow : global::System.Data.DataRow {
            
            private anchorsDataTable tableanchors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal anchorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableanchors = ((anchorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int anchors_Id {
                get {
                    return ((int)(this[this.tableanchors.anchors_IdColumn]));
                }
                set {
                    this[this.tableanchors.anchors_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableanchors.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'anchors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanchors.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_anchors"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_anchors"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableanchors.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableanchors.verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow[] GetanchorRows() {
                if ((this.Table.ChildRelations["anchors_anchor"] == null)) {
                    return new anchorRow[0];
                }
                else {
                    return ((anchorRow[])(base.GetChildRows(this.Table.ChildRelations["anchors_anchor"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class anchorRow : global::System.Data.DataRow {
            
            private anchorDataTable tableanchor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal anchorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableanchor = ((anchorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jumpTarget {
                get {
                    return ((string)(this[this.tableanchor.jumpTargetColumn]));
                }
                set {
                    this[this.tableanchor.jumpTargetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string text {
                get {
                    try {
                        return ((string)(this[this.tableanchor.textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'text\' in table \'anchor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanchor.textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int anchor_Id {
                get {
                    return ((int)(this[this.tableanchor.anchor_IdColumn]));
                }
                set {
                    this[this.tableanchor.anchor_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int anchors_Id {
                get {
                    try {
                        return ((int)(this[this.tableanchor.anchors_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'anchors_Id\' in table \'anchor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanchor.anchors_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow anchorsRow {
                get {
                    return ((anchorsRow)(this.GetParentRow(this.Table.ParentRelations["anchors_anchor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["anchors_anchor"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstextNull() {
                return this.IsNull(this.tableanchor.textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettextNull() {
                this[this.tableanchor.textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isanchors_IdNull() {
                return this.IsNull(this.tableanchor.anchors_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setanchors_IdNull() {
                this[this.tableanchor.anchors_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow[] GetexegeticalHelpsRows() {
                if ((this.Table.ChildRelations["anchor_exegeticalHelps"] == null)) {
                    return new exegeticalHelpsRow[0];
                }
                else {
                    return ((exegeticalHelpsRow[])(base.GetChildRows(this.Table.ChildRelations["anchor_exegeticalHelps"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class exegeticalHelpsRow : global::System.Data.DataRow {
            
            private exegeticalHelpsDataTable tableexegeticalHelps;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal exegeticalHelpsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableexegeticalHelps = ((exegeticalHelpsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exegeticalHelps_Id {
                get {
                    return ((int)(this[this.tableexegeticalHelps.exegeticalHelps_IdColumn]));
                }
                set {
                    this[this.tableexegeticalHelps.exegeticalHelps_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int anchor_Id {
                get {
                    try {
                        return ((int)(this[this.tableexegeticalHelps.anchor_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'anchor_Id\' in table \'exegeticalHelps\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableexegeticalHelps.anchor_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow anchorRow {
                get {
                    return ((anchorRow)(this.GetParentRow(this.Table.ParentRelations["anchor_exegeticalHelps"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["anchor_exegeticalHelps"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isanchor_IdNull() {
                return this.IsNull(this.tableexegeticalHelps.anchor_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setanchor_IdNull() {
                this[this.tableexegeticalHelps.anchor_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRow[] GetexegeticalHelpRows() {
                if ((this.Table.ChildRelations["exegeticalHelps_exegeticalHelp"] == null)) {
                    return new exegeticalHelpRow[0];
                }
                else {
                    return ((exegeticalHelpRow[])(base.GetChildRows(this.Table.ChildRelations["exegeticalHelps_exegeticalHelp"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class exegeticalHelpRow : global::System.Data.DataRow {
            
            private exegeticalHelpDataTable tableexegeticalHelp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal exegeticalHelpRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableexegeticalHelp = ((exegeticalHelpDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source {
                get {
                    return ((string)(this[this.tableexegeticalHelp.sourceColumn]));
                }
                set {
                    this[this.tableexegeticalHelp.sourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableexegeticalHelp.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'exegeticalHelp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableexegeticalHelp.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string quote {
                get {
                    return ((string)(this[this.tableexegeticalHelp.quoteColumn]));
                }
                set {
                    this[this.tableexegeticalHelp.quoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exegeticalHelps_Id {
                get {
                    try {
                        return ((int)(this[this.tableexegeticalHelp.exegeticalHelps_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'exegeticalHelps_Id\' in table \'exegeticalHelp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableexegeticalHelp.exegeticalHelps_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow exegeticalHelpsRow {
                get {
                    return ((exegeticalHelpsRow)(this.GetParentRow(this.Table.ParentRelations["exegeticalHelps_exegeticalHelp"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["exegeticalHelps_exegeticalHelp"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableexegeticalHelp.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableexegeticalHelp.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexegeticalHelps_IdNull() {
                return this.IsNull(this.tableexegeticalHelp.exegeticalHelps_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexegeticalHelps_IdNull() {
                this[this.tableexegeticalHelp.exegeticalHelps_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestQuestionsRow : global::System.Data.DataRow {
            
            private TestQuestionsDataTable tableTestQuestions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestQuestions = ((TestQuestionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestions_Id {
                get {
                    return ((int)(this[this.tableTestQuestions.TestQuestions_IdColumn]));
                }
                set {
                    this[this.tableTestQuestions.TestQuestions_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableTestQuestions.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'TestQuestions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestions.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_TestQuestions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_TestQuestions"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableTestQuestions.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableTestQuestions.verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow[] GetTestQuestionRows() {
                if ((this.Table.ChildRelations["TestQuestions_TestQuestion"] == null)) {
                    return new TestQuestionRow[0];
                }
                else {
                    return ((TestQuestionRow[])(base.GetChildRows(this.Table.ChildRelations["TestQuestions_TestQuestion"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestQuestionRow : global::System.Data.DataRow {
            
            private TestQuestionDataTable tableTestQuestion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestQuestion = ((TestQuestionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool visible {
                get {
                    return ((bool)(this[this.tableTestQuestion.visibleColumn]));
                }
                set {
                    this[this.tableTestQuestion.visibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestion_Id {
                get {
                    return ((int)(this[this.tableTestQuestion.TestQuestion_IdColumn]));
                }
                set {
                    this[this.tableTestQuestion.TestQuestion_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestions_Id {
                get {
                    try {
                        return ((int)(this[this.tableTestQuestion.TestQuestions_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestQuestions_Id\' in table \'TestQuestion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestion.TestQuestions_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow TestQuestionsRow {
                get {
                    return ((TestQuestionsRow)(this.GetParentRow(this.Table.ParentRelations["TestQuestions_TestQuestion"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestQuestions_TestQuestion"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestQuestions_IdNull() {
                return this.IsNull(this.tableTestQuestion.TestQuestions_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestQuestions_IdNull() {
                this[this.tableTestQuestion.TestQuestions_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQVernacularRow[] GetTQVernacularRows() {
                if ((this.Table.ChildRelations["TestQuestion_TQVernacular"] == null)) {
                    return new TQVernacularRow[0];
                }
                else {
                    return ((TQVernacularRow[])(base.GetChildRows(this.Table.ChildRelations["TestQuestion_TQVernacular"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQInternationalBTRow[] GetTQInternationalBTRows() {
                if ((this.Table.ChildRelations["TestQuestion_TQInternationalBT"] == null)) {
                    return new TQInternationalBTRow[0];
                }
                else {
                    return ((TQInternationalBTRow[])(base.GetChildRows(this.Table.ChildRelations["TestQuestion_TQInternationalBT"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow[] GetAnswersRows() {
                if ((this.Table.ChildRelations["TestQuestion_Answers"] == null)) {
                    return new AnswersRow[0];
                }
                else {
                    return ((AnswersRow[])(base.GetChildRows(this.Table.ChildRelations["TestQuestion_Answers"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TQVernacularRow : global::System.Data.DataRow {
            
            private TQVernacularDataTable tableTQVernacular;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TQVernacularRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTQVernacular = ((TQVernacularDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tableTQVernacular.langColumn]));
                }
                set {
                    this[this.tableTQVernacular.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TQVernacular_text {
                get {
                    return ((string)(this[this.tableTQVernacular.TQVernacular_textColumn]));
                }
                set {
                    this[this.tableTQVernacular.TQVernacular_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestion_Id {
                get {
                    try {
                        return ((int)(this[this.tableTQVernacular.TestQuestion_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestQuestion_Id\' in table \'TQVernacular\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTQVernacular.TestQuestion_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow TestQuestionRow {
                get {
                    return ((TestQuestionRow)(this.GetParentRow(this.Table.ParentRelations["TestQuestion_TQVernacular"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestQuestion_TQVernacular"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestQuestion_IdNull() {
                return this.IsNull(this.tableTQVernacular.TestQuestion_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestQuestion_IdNull() {
                this[this.tableTQVernacular.TestQuestion_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TQInternationalBTRow : global::System.Data.DataRow {
            
            private TQInternationalBTDataTable tableTQInternationalBT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TQInternationalBTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTQInternationalBT = ((TQInternationalBTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tableTQInternationalBT.langColumn]));
                }
                set {
                    this[this.tableTQInternationalBT.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TQInternationalBT_text {
                get {
                    return ((string)(this[this.tableTQInternationalBT.TQInternationalBT_textColumn]));
                }
                set {
                    this[this.tableTQInternationalBT.TQInternationalBT_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestion_Id {
                get {
                    try {
                        return ((int)(this[this.tableTQInternationalBT.TestQuestion_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestQuestion_Id\' in table \'TQInternationalBT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTQInternationalBT.TestQuestion_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow TestQuestionRow {
                get {
                    return ((TestQuestionRow)(this.GetParentRow(this.Table.ParentRelations["TestQuestion_TQInternationalBT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestQuestion_TQInternationalBT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestQuestion_IdNull() {
                return this.IsNull(this.tableTQInternationalBT.TestQuestion_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestQuestion_IdNull() {
                this[this.tableTQInternationalBT.TestQuestion_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnswersRow : global::System.Data.DataRow {
            
            private AnswersDataTable tableAnswers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnswersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnswers = ((AnswersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Answers_Id {
                get {
                    return ((int)(this[this.tableAnswers.Answers_IdColumn]));
                }
                set {
                    this[this.tableAnswers.Answers_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestion_Id {
                get {
                    try {
                        return ((int)(this[this.tableAnswers.TestQuestion_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestQuestion_Id\' in table \'Answers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnswers.TestQuestion_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow TestQuestionRow {
                get {
                    return ((TestQuestionRow)(this.GetParentRow(this.Table.ParentRelations["TestQuestion_Answers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestQuestion_Answers"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestQuestion_IdNull() {
                return this.IsNull(this.tableAnswers.TestQuestion_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestQuestion_IdNull() {
                this[this.tableAnswers.TestQuestion_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRow[] GetanswerRows() {
                if ((this.Table.ChildRelations["Answers_answer"] == null)) {
                    return new answerRow[0];
                }
                else {
                    return ((answerRow[])(base.GetChildRows(this.Table.ChildRelations["Answers_answer"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class answerRow : global::System.Data.DataRow {
            
            private answerDataTable tableanswer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal answerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableanswer = ((answerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableanswer.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'answer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanswer.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tableanswer.langColumn]));
                }
                set {
                    this[this.tableanswer.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string answer_text {
                get {
                    return ((string)(this[this.tableanswer.answer_textColumn]));
                }
                set {
                    this[this.tableanswer.answer_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Answers_Id {
                get {
                    try {
                        return ((int)(this[this.tableanswer.Answers_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Answers_Id\' in table \'answer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanswer.Answers_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow AnswersRow {
                get {
                    return ((AnswersRow)(this.GetParentRow(this.Table.ParentRelations["Answers_answer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Answers_answer"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableanswer.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableanswer.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnswers_IdNull() {
                return this.IsNull(this.tableanswer.Answers_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnswers_IdNull() {
                this[this.tableanswer.Answers_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RetellingsRow : global::System.Data.DataRow {
            
            private RetellingsDataTable tableRetellings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRetellings = ((RetellingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Retellings_Id {
                get {
                    return ((int)(this[this.tableRetellings.Retellings_IdColumn]));
                }
                set {
                    this[this.tableRetellings.Retellings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableRetellings.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'Retellings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRetellings.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_Retellings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_Retellings"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableRetellings.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableRetellings.verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow[] GetRetellingRows() {
                if ((this.Table.ChildRelations["Retellings_Retelling"] == null)) {
                    return new RetellingRow[0];
                }
                else {
                    return ((RetellingRow[])(base.GetChildRows(this.Table.ChildRelations["Retellings_Retelling"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RetellingRow : global::System.Data.DataRow {
            
            private RetellingDataTable tableRetelling;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRetelling = ((RetellingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableRetelling.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'Retelling\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRetelling.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tableRetelling.langColumn]));
                }
                set {
                    this[this.tableRetelling.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Retelling_text {
                get {
                    return ((string)(this[this.tableRetelling.Retelling_textColumn]));
                }
                set {
                    this[this.tableRetelling.Retelling_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Retellings_Id {
                get {
                    try {
                        return ((int)(this[this.tableRetelling.Retellings_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Retellings_Id\' in table \'Retelling\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRetelling.Retellings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow RetellingsRow {
                get {
                    return ((RetellingsRow)(this.GetParentRow(this.Table.ParentRelations["Retellings_Retelling"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Retellings_Retelling"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableRetelling.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableRetelling.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetellings_IdNull() {
                return this.IsNull(this.tableRetelling.Retellings_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetellings_IdNull() {
                this[this.tableRetelling.Retellings_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsultantNotesRow : global::System.Data.DataRow {
            
            private ConsultantNotesDataTable tableConsultantNotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNotesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantNotes = ((ConsultantNotesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantNotes_Id {
                get {
                    return ((int)(this[this.tableConsultantNotes.ConsultantNotes_IdColumn]));
                }
                set {
                    this[this.tableConsultantNotes.ConsultantNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableConsultantNotes.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'ConsultantNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantNotes.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_ConsultantNotes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_ConsultantNotes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableConsultantNotes.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableConsultantNotes.verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow[] GetConsultantNoteRows() {
                if ((this.Table.ChildRelations["ConsultantNotes_ConsultantNote"] == null)) {
                    return new ConsultantNoteRow[0];
                }
                else {
                    return ((ConsultantNoteRow[])(base.GetChildRows(this.Table.ChildRelations["ConsultantNotes_ConsultantNote"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsultantNoteRow : global::System.Data.DataRow {
            
            private ConsultantNoteDataTable tableConsultantNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNoteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantNote = ((ConsultantNoteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte round {
                get {
                    return ((byte)(this[this.tableConsultantNote.roundColumn]));
                }
                set {
                    this[this.tableConsultantNote.roundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantNote_Id {
                get {
                    return ((int)(this[this.tableConsultantNote.ConsultantNote_IdColumn]));
                }
                set {
                    this[this.tableConsultantNote.ConsultantNote_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantNotes_Id {
                get {
                    try {
                        return ((int)(this[this.tableConsultantNote.ConsultantNotes_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantNotes_Id\' in table \'ConsultantNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantNote.ConsultantNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow ConsultantNotesRow {
                get {
                    return ((ConsultantNotesRow)(this.GetParentRow(this.Table.ParentRelations["ConsultantNotes_ConsultantNote"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ConsultantNotes_ConsultantNote"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantNotes_IdNull() {
                return this.IsNull(this.tableConsultantNote.ConsultantNotes_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantNotes_IdNull() {
                this[this.tableConsultantNote.ConsultantNotes_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantCommentRow[] GetConsultantCommentRows() {
                if ((this.Table.ChildRelations["ConsultantNote_ConsultantComment"] == null)) {
                    return new ConsultantCommentRow[0];
                }
                else {
                    return ((ConsultantCommentRow[])(base.GetChildRows(this.Table.ChildRelations["ConsultantNote_ConsultantComment"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrafterResponseRow[] GetCrafterResponseRows() {
                if ((this.Table.ChildRelations["ConsultantNote_CrafterResponse"] == null)) {
                    return new CrafterResponseRow[0];
                }
                else {
                    return ((CrafterResponseRow[])(base.GetChildRows(this.Table.ChildRelations["ConsultantNote_CrafterResponse"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsultantCommentRow : global::System.Data.DataRow {
            
            private ConsultantCommentDataTable tableConsultantComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantCommentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantComment = ((ConsultantCommentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string editRef {
                get {
                    try {
                        return ((string)(this[this.tableConsultantComment.editRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'editRef\' in table \'ConsultantComment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantComment.editRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsultantComment_text {
                get {
                    return ((string)(this[this.tableConsultantComment.ConsultantComment_textColumn]));
                }
                set {
                    this[this.tableConsultantComment.ConsultantComment_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantNote_Id {
                get {
                    try {
                        return ((int)(this[this.tableConsultantComment.ConsultantNote_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantNote_Id\' in table \'ConsultantComment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantComment.ConsultantNote_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow ConsultantNoteRow {
                get {
                    return ((ConsultantNoteRow)(this.GetParentRow(this.Table.ParentRelations["ConsultantNote_ConsultantComment"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ConsultantNote_ConsultantComment"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseditRefNull() {
                return this.IsNull(this.tableConsultantComment.editRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteditRefNull() {
                this[this.tableConsultantComment.editRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantNote_IdNull() {
                return this.IsNull(this.tableConsultantComment.ConsultantNote_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantNote_IdNull() {
                this[this.tableConsultantComment.ConsultantNote_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CrafterResponseRow : global::System.Data.DataRow {
            
            private CrafterResponseDataTable tableCrafterResponse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CrafterResponseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCrafterResponse = ((CrafterResponseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string editRef {
                get {
                    try {
                        return ((string)(this[this.tableCrafterResponse.editRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'editRef\' in table \'CrafterResponse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrafterResponse.editRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CrafterResponse_text {
                get {
                    return ((string)(this[this.tableCrafterResponse.CrafterResponse_textColumn]));
                }
                set {
                    this[this.tableCrafterResponse.CrafterResponse_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantNote_Id {
                get {
                    try {
                        return ((int)(this[this.tableCrafterResponse.ConsultantNote_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantNote_Id\' in table \'CrafterResponse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrafterResponse.ConsultantNote_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow ConsultantNoteRow {
                get {
                    return ((ConsultantNoteRow)(this.GetParentRow(this.Table.ParentRelations["ConsultantNote_CrafterResponse"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ConsultantNote_CrafterResponse"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseditRefNull() {
                return this.IsNull(this.tableCrafterResponse.editRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteditRefNull() {
                this[this.tableCrafterResponse.editRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantNote_IdNull() {
                return this.IsNull(this.tableCrafterResponse.ConsultantNote_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantNote_IdNull() {
                this[this.tableCrafterResponse.ConsultantNote_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoachNotesRow : global::System.Data.DataRow {
            
            private CoachNotesDataTable tableCoachNotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNotesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoachNotes = ((CoachNotesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachNotes_Id {
                get {
                    return ((int)(this[this.tableCoachNotes.CoachNotes_IdColumn]));
                }
                set {
                    this[this.tableCoachNotes.CoachNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableCoachNotes.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'CoachNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachNotes.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_CoachNotes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_CoachNotes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableCoachNotes.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableCoachNotes.verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow[] GetCoachNoteRows() {
                if ((this.Table.ChildRelations["CoachNotes_CoachNote"] == null)) {
                    return new CoachNoteRow[0];
                }
                else {
                    return ((CoachNoteRow[])(base.GetChildRows(this.Table.ChildRelations["CoachNotes_CoachNote"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoachNoteRow : global::System.Data.DataRow {
            
            private CoachNoteDataTable tableCoachNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNoteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoachNote = ((CoachNoteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte round {
                get {
                    return ((byte)(this[this.tableCoachNote.roundColumn]));
                }
                set {
                    this[this.tableCoachNote.roundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachNote_Id {
                get {
                    return ((int)(this[this.tableCoachNote.CoachNote_IdColumn]));
                }
                set {
                    this[this.tableCoachNote.CoachNote_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachNotes_Id {
                get {
                    try {
                        return ((int)(this[this.tableCoachNote.CoachNotes_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoachNotes_Id\' in table \'CoachNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachNote.CoachNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow CoachNotesRow {
                get {
                    return ((CoachNotesRow)(this.GetParentRow(this.Table.ParentRelations["CoachNotes_CoachNote"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CoachNotes_CoachNote"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoachNotes_IdNull() {
                return this.IsNull(this.tableCoachNote.CoachNotes_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoachNotes_IdNull() {
                this[this.tableCoachNote.CoachNotes_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachCommentRow[] GetCoachCommentRows() {
                if ((this.Table.ChildRelations["CoachNote_CoachComment"] == null)) {
                    return new CoachCommentRow[0];
                }
                else {
                    return ((CoachCommentRow[])(base.GetChildRows(this.Table.ChildRelations["CoachNote_CoachComment"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantResponseRow[] GetConsultantResponseRows() {
                if ((this.Table.ChildRelations["CoachNote_ConsultantResponse"] == null)) {
                    return new ConsultantResponseRow[0];
                }
                else {
                    return ((ConsultantResponseRow[])(base.GetChildRows(this.Table.ChildRelations["CoachNote_ConsultantResponse"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoachCommentRow : global::System.Data.DataRow {
            
            private CoachCommentDataTable tableCoachComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachCommentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoachComment = ((CoachCommentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string editRef {
                get {
                    try {
                        return ((string)(this[this.tableCoachComment.editRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'editRef\' in table \'CoachComment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachComment.editRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CoachComment_text {
                get {
                    return ((string)(this[this.tableCoachComment.CoachComment_textColumn]));
                }
                set {
                    this[this.tableCoachComment.CoachComment_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachNote_Id {
                get {
                    try {
                        return ((int)(this[this.tableCoachComment.CoachNote_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoachNote_Id\' in table \'CoachComment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachComment.CoachNote_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow CoachNoteRow {
                get {
                    return ((CoachNoteRow)(this.GetParentRow(this.Table.ParentRelations["CoachNote_CoachComment"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CoachNote_CoachComment"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseditRefNull() {
                return this.IsNull(this.tableCoachComment.editRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteditRefNull() {
                this[this.tableCoachComment.editRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoachNote_IdNull() {
                return this.IsNull(this.tableCoachComment.CoachNote_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoachNote_IdNull() {
                this[this.tableCoachComment.CoachNote_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsultantResponseRow : global::System.Data.DataRow {
            
            private ConsultantResponseDataTable tableConsultantResponse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantResponseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantResponse = ((ConsultantResponseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string editRef {
                get {
                    try {
                        return ((string)(this[this.tableConsultantResponse.editRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'editRef\' in table \'ConsultantResponse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantResponse.editRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsultantResponse_text {
                get {
                    return ((string)(this[this.tableConsultantResponse.ConsultantResponse_textColumn]));
                }
                set {
                    this[this.tableConsultantResponse.ConsultantResponse_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachNote_Id {
                get {
                    try {
                        return ((int)(this[this.tableConsultantResponse.CoachNote_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoachNote_Id\' in table \'ConsultantResponse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantResponse.CoachNote_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow CoachNoteRow {
                get {
                    return ((CoachNoteRow)(this.GetParentRow(this.Table.ParentRelations["CoachNote_ConsultantResponse"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CoachNote_ConsultantResponse"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseditRefNull() {
                return this.IsNull(this.tableConsultantResponse.editRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteditRefNull() {
                this[this.tableConsultantResponse.editRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoachNote_IdNull() {
                return this.IsNull(this.tableConsultantResponse.CoachNote_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoachNote_IdNull() {
                this[this.tableConsultantResponse.CoachNote_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class storiesRowChangeEvent : global::System.EventArgs {
            
            private storiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRowChangeEvent(storiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MembersRowChangeEvent : global::System.EventArgs {
            
            private MembersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRowChangeEvent(MembersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MemberRowChangeEvent : global::System.EventArgs {
            
            private MemberRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRowChangeEvent(MemberRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FontsRowChangeEvent : global::System.EventArgs {
            
            private FontsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontsRowChangeEvent(FontsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VernacularFontRowChangeEvent : global::System.EventArgs {
            
            private VernacularFontRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularFontRowChangeEvent(VernacularFontRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularFontRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NationalBTFontRowChangeEvent : global::System.EventArgs {
            
            private NationalBTFontRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTFontRowChangeEvent(NationalBTFontRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTFontRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InternationalBTFontRowChangeEvent : global::System.EventArgs {
            
            private InternationalBTFontRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTFontRowChangeEvent(InternationalBTFontRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTFontRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class storyRowChangeEvent : global::System.EventArgs {
            
            private storyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRowChangeEvent(storyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CraftingInfoRowChangeEvent : global::System.EventArgs {
            
            private CraftingInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRowChangeEvent(CraftingInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StoryCrafterRowChangeEvent : global::System.EventArgs {
            
            private StoryCrafterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRowChangeEvent(StoryCrafterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StoryPurposeRowChangeEvent : global::System.EventArgs {
            
            private StoryPurposeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryPurposeRowChangeEvent(StoryPurposeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryPurposeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BackTranslatorRowChangeEvent : global::System.EventArgs {
            
            private BackTranslatorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRowChangeEvent(BackTranslatorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestsRowChangeEvent : global::System.EventArgs {
            
            private TestsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRowChangeEvent(TestsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestRowChangeEvent : global::System.EventArgs {
            
            private TestRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRowChangeEvent(TestRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class editsRowChangeEvent : global::System.EventArgs {
            
            private editsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editsRowChangeEvent(editsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class editRowChangeEvent : global::System.EventArgs {
            
            private editRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRowChangeEvent(editRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class descriptionRowChangeEvent : global::System.EventArgs {
            
            private descriptionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRowChangeEvent(descriptionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class versesRowChangeEvent : global::System.EventArgs {
            
            private versesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRowChangeEvent(versesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class verseRowChangeEvent : global::System.EventArgs {
            
            private verseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRowChangeEvent(verseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VernacularRowChangeEvent : global::System.EventArgs {
            
            private VernacularRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularRowChangeEvent(VernacularRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NationalBTRowChangeEvent : global::System.EventArgs {
            
            private NationalBTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTRowChangeEvent(NationalBTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InternationalBTRowChangeEvent : global::System.EventArgs {
            
            private InternationalBTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTRowChangeEvent(InternationalBTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class anchorsRowChangeEvent : global::System.EventArgs {
            
            private anchorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRowChangeEvent(anchorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class anchorRowChangeEvent : global::System.EventArgs {
            
            private anchorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRowChangeEvent(anchorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class exegeticalHelpsRowChangeEvent : global::System.EventArgs {
            
            private exegeticalHelpsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRowChangeEvent(exegeticalHelpsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class exegeticalHelpRowChangeEvent : global::System.EventArgs {
            
            private exegeticalHelpRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRowChangeEvent(exegeticalHelpRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestQuestionsRowChangeEvent : global::System.EventArgs {
            
            private TestQuestionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRowChangeEvent(TestQuestionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestQuestionRowChangeEvent : global::System.EventArgs {
            
            private TestQuestionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRowChangeEvent(TestQuestionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TQVernacularRowChangeEvent : global::System.EventArgs {
            
            private TQVernacularRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQVernacularRowChangeEvent(TQVernacularRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQVernacularRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TQInternationalBTRowChangeEvent : global::System.EventArgs {
            
            private TQInternationalBTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQInternationalBTRowChangeEvent(TQInternationalBTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TQInternationalBTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnswersRowChangeEvent : global::System.EventArgs {
            
            private AnswersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRowChangeEvent(AnswersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class answerRowChangeEvent : global::System.EventArgs {
            
            private answerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRowChangeEvent(answerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RetellingsRowChangeEvent : global::System.EventArgs {
            
            private RetellingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRowChangeEvent(RetellingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RetellingRowChangeEvent : global::System.EventArgs {
            
            private RetellingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRowChangeEvent(RetellingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsultantNotesRowChangeEvent : global::System.EventArgs {
            
            private ConsultantNotesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRowChangeEvent(ConsultantNotesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsultantNoteRowChangeEvent : global::System.EventArgs {
            
            private ConsultantNoteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRowChangeEvent(ConsultantNoteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsultantCommentRowChangeEvent : global::System.EventArgs {
            
            private ConsultantCommentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantCommentRowChangeEvent(ConsultantCommentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantCommentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CrafterResponseRowChangeEvent : global::System.EventArgs {
            
            private CrafterResponseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrafterResponseRowChangeEvent(CrafterResponseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrafterResponseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoachNotesRowChangeEvent : global::System.EventArgs {
            
            private CoachNotesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRowChangeEvent(CoachNotesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoachNoteRowChangeEvent : global::System.EventArgs {
            
            private CoachNoteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRowChangeEvent(CoachNoteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoachCommentRowChangeEvent : global::System.EventArgs {
            
            private CoachCommentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachCommentRowChangeEvent(CoachCommentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachCommentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsultantResponseRowChangeEvent : global::System.EventArgs {
            
            private ConsultantResponseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantResponseRowChangeEvent(ConsultantResponseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantResponseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591