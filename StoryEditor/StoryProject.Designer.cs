//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace OneStoryProjectEditor {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private StoryProjectDataTable tableStoryProject;
        
        private MembersDataTable tableMembers;
        
        private MemberDataTable tableMember;
        
        private LanguagesDataTable tableLanguages;
        
        private VernacularLangDataTable tableVernacularLang;
        
        private NationalBTLangDataTable tableNationalBTLang;
        
        private InternationalBTLangDataTable tableInternationalBTLang;
        
        private storiesDataTable tablestories;
        
        private storyDataTable tablestory;
        
        private CraftingInfoDataTable tableCraftingInfo;
        
        private StoryCrafterDataTable tableStoryCrafter;
        
        private BackTranslatorDataTable tableBackTranslator;
        
        private TestsDataTable tableTests;
        
        private TestDataTable tableTest;
        
        private versesDataTable tableverses;
        
        private verseDataTable tableverse;
        
        private anchorsDataTable tableanchors;
        
        private anchorDataTable tableanchor;
        
        private exegeticalHelpsDataTable tableexegeticalHelps;
        
        private exegeticalHelpDataTable tableexegeticalHelp;
        
        private TestQuestionsDataTable tableTestQuestions;
        
        private TestQuestionDataTable tableTestQuestion;
        
        private AnswersDataTable tableAnswers;
        
        private answerDataTable tableanswer;
        
        private RetellingsDataTable tableRetellings;
        
        private RetellingDataTable tableRetelling;
        
        private ConsultantNotesDataTable tableConsultantNotes;
        
        private ConsultantConversationDataTable tableConsultantConversation;
        
        private ConsultantNoteDataTable tableConsultantNote;
        
        private CoachNotesDataTable tableCoachNotes;
        
        private CoachConversationDataTable tableCoachConversation;
        
        private CoachNoteDataTable tableCoachNote;
        
        private global::System.Data.DataRelation relationStoryProject_Members;
        
        private global::System.Data.DataRelation relationMembers_Member;
        
        private global::System.Data.DataRelation relationStoryProject_Languages;
        
        private global::System.Data.DataRelation relationLanguages_VernacularLang;
        
        private global::System.Data.DataRelation relationLanguages_NationalBTLang;
        
        private global::System.Data.DataRelation relationLanguages_InternationalBTLang;
        
        private global::System.Data.DataRelation relationStoryProject_stories;
        
        private global::System.Data.DataRelation relationstories_story;
        
        private global::System.Data.DataRelation relationstory_CraftingInfo;
        
        private global::System.Data.DataRelation relationCraftingInfo_StoryCrafter;
        
        private global::System.Data.DataRelation relationCraftingInfo_BackTranslator;
        
        private global::System.Data.DataRelation relationCraftingInfo_Tests;
        
        private global::System.Data.DataRelation relationTests_Test;
        
        private global::System.Data.DataRelation relationstory_verses;
        
        private global::System.Data.DataRelation relationverses_verse;
        
        private global::System.Data.DataRelation relationverse_anchors;
        
        private global::System.Data.DataRelation relationanchors_anchor;
        
        private global::System.Data.DataRelation relationanchor_exegeticalHelps;
        
        private global::System.Data.DataRelation relationexegeticalHelps_exegeticalHelp;
        
        private global::System.Data.DataRelation relationverse_TestQuestions;
        
        private global::System.Data.DataRelation relationTestQuestions_TestQuestion;
        
        private global::System.Data.DataRelation relationTestQuestion_Answers;
        
        private global::System.Data.DataRelation relationAnswers_answer;
        
        private global::System.Data.DataRelation relationverse_Retellings;
        
        private global::System.Data.DataRelation relationRetellings_Retelling;
        
        private global::System.Data.DataRelation relationverse_ConsultantNotes;
        
        private global::System.Data.DataRelation relationConsultantNotes_ConsultantConversation;
        
        private global::System.Data.DataRelation relationConsultantConversation_ConsultantNote;
        
        private global::System.Data.DataRelation relationverse_CoachNotes;
        
        private global::System.Data.DataRelation relationCoachNotes_CoachConversation;
        
        private global::System.Data.DataRelation relationCoachConversation_CoachNote;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["StoryProject"] != null)) {
                    base.Tables.Add(new StoryProjectDataTable(ds.Tables["StoryProject"]));
                }
                if ((ds.Tables["Members"] != null)) {
                    base.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
                }
                if ((ds.Tables["Member"] != null)) {
                    base.Tables.Add(new MemberDataTable(ds.Tables["Member"]));
                }
                if ((ds.Tables["Languages"] != null)) {
                    base.Tables.Add(new LanguagesDataTable(ds.Tables["Languages"]));
                }
                if ((ds.Tables["VernacularLang"] != null)) {
                    base.Tables.Add(new VernacularLangDataTable(ds.Tables["VernacularLang"]));
                }
                if ((ds.Tables["NationalBTLang"] != null)) {
                    base.Tables.Add(new NationalBTLangDataTable(ds.Tables["NationalBTLang"]));
                }
                if ((ds.Tables["InternationalBTLang"] != null)) {
                    base.Tables.Add(new InternationalBTLangDataTable(ds.Tables["InternationalBTLang"]));
                }
                if ((ds.Tables["stories"] != null)) {
                    base.Tables.Add(new storiesDataTable(ds.Tables["stories"]));
                }
                if ((ds.Tables["story"] != null)) {
                    base.Tables.Add(new storyDataTable(ds.Tables["story"]));
                }
                if ((ds.Tables["CraftingInfo"] != null)) {
                    base.Tables.Add(new CraftingInfoDataTable(ds.Tables["CraftingInfo"]));
                }
                if ((ds.Tables["StoryCrafter"] != null)) {
                    base.Tables.Add(new StoryCrafterDataTable(ds.Tables["StoryCrafter"]));
                }
                if ((ds.Tables["BackTranslator"] != null)) {
                    base.Tables.Add(new BackTranslatorDataTable(ds.Tables["BackTranslator"]));
                }
                if ((ds.Tables["Tests"] != null)) {
                    base.Tables.Add(new TestsDataTable(ds.Tables["Tests"]));
                }
                if ((ds.Tables["Test"] != null)) {
                    base.Tables.Add(new TestDataTable(ds.Tables["Test"]));
                }
                if ((ds.Tables["verses"] != null)) {
                    base.Tables.Add(new versesDataTable(ds.Tables["verses"]));
                }
                if ((ds.Tables["verse"] != null)) {
                    base.Tables.Add(new verseDataTable(ds.Tables["verse"]));
                }
                if ((ds.Tables["anchors"] != null)) {
                    base.Tables.Add(new anchorsDataTable(ds.Tables["anchors"]));
                }
                if ((ds.Tables["anchor"] != null)) {
                    base.Tables.Add(new anchorDataTable(ds.Tables["anchor"]));
                }
                if ((ds.Tables["exegeticalHelps"] != null)) {
                    base.Tables.Add(new exegeticalHelpsDataTable(ds.Tables["exegeticalHelps"]));
                }
                if ((ds.Tables["exegeticalHelp"] != null)) {
                    base.Tables.Add(new exegeticalHelpDataTable(ds.Tables["exegeticalHelp"]));
                }
                if ((ds.Tables["TestQuestions"] != null)) {
                    base.Tables.Add(new TestQuestionsDataTable(ds.Tables["TestQuestions"]));
                }
                if ((ds.Tables["TestQuestion"] != null)) {
                    base.Tables.Add(new TestQuestionDataTable(ds.Tables["TestQuestion"]));
                }
                if ((ds.Tables["Answers"] != null)) {
                    base.Tables.Add(new AnswersDataTable(ds.Tables["Answers"]));
                }
                if ((ds.Tables["answer"] != null)) {
                    base.Tables.Add(new answerDataTable(ds.Tables["answer"]));
                }
                if ((ds.Tables["Retellings"] != null)) {
                    base.Tables.Add(new RetellingsDataTable(ds.Tables["Retellings"]));
                }
                if ((ds.Tables["Retelling"] != null)) {
                    base.Tables.Add(new RetellingDataTable(ds.Tables["Retelling"]));
                }
                if ((ds.Tables["ConsultantNotes"] != null)) {
                    base.Tables.Add(new ConsultantNotesDataTable(ds.Tables["ConsultantNotes"]));
                }
                if ((ds.Tables["ConsultantConversation"] != null)) {
                    base.Tables.Add(new ConsultantConversationDataTable(ds.Tables["ConsultantConversation"]));
                }
                if ((ds.Tables["ConsultantNote"] != null)) {
                    base.Tables.Add(new ConsultantNoteDataTable(ds.Tables["ConsultantNote"]));
                }
                if ((ds.Tables["CoachNotes"] != null)) {
                    base.Tables.Add(new CoachNotesDataTable(ds.Tables["CoachNotes"]));
                }
                if ((ds.Tables["CoachConversation"] != null)) {
                    base.Tables.Add(new CoachConversationDataTable(ds.Tables["CoachConversation"]));
                }
                if ((ds.Tables["CoachNote"] != null)) {
                    base.Tables.Add(new CoachNoteDataTable(ds.Tables["CoachNote"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StoryProjectDataTable StoryProject {
            get {
                return this.tableStoryProject;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MembersDataTable Members {
            get {
                return this.tableMembers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MemberDataTable Member {
            get {
                return this.tableMember;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LanguagesDataTable Languages {
            get {
                return this.tableLanguages;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VernacularLangDataTable VernacularLang {
            get {
                return this.tableVernacularLang;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NationalBTLangDataTable NationalBTLang {
            get {
                return this.tableNationalBTLang;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InternationalBTLangDataTable InternationalBTLang {
            get {
                return this.tableInternationalBTLang;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public storiesDataTable stories {
            get {
                return this.tablestories;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public storyDataTable story {
            get {
                return this.tablestory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CraftingInfoDataTable CraftingInfo {
            get {
                return this.tableCraftingInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StoryCrafterDataTable StoryCrafter {
            get {
                return this.tableStoryCrafter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BackTranslatorDataTable BackTranslator {
            get {
                return this.tableBackTranslator;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestsDataTable Tests {
            get {
                return this.tableTests;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestDataTable Test {
            get {
                return this.tableTest;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public versesDataTable verses {
            get {
                return this.tableverses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public verseDataTable verse {
            get {
                return this.tableverse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public anchorsDataTable anchors {
            get {
                return this.tableanchors;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public anchorDataTable anchor {
            get {
                return this.tableanchor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public exegeticalHelpsDataTable exegeticalHelps {
            get {
                return this.tableexegeticalHelps;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public exegeticalHelpDataTable exegeticalHelp {
            get {
                return this.tableexegeticalHelp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestQuestionsDataTable TestQuestions {
            get {
                return this.tableTestQuestions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestQuestionDataTable TestQuestion {
            get {
                return this.tableTestQuestion;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnswersDataTable Answers {
            get {
                return this.tableAnswers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public answerDataTable answer {
            get {
                return this.tableanswer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RetellingsDataTable Retellings {
            get {
                return this.tableRetellings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RetellingDataTable Retelling {
            get {
                return this.tableRetelling;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsultantNotesDataTable ConsultantNotes {
            get {
                return this.tableConsultantNotes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsultantConversationDataTable ConsultantConversation {
            get {
                return this.tableConsultantConversation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsultantNoteDataTable ConsultantNote {
            get {
                return this.tableConsultantNote;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoachNotesDataTable CoachNotes {
            get {
                return this.tableCoachNotes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoachConversationDataTable CoachConversation {
            get {
                return this.tableCoachConversation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoachNoteDataTable CoachNote {
            get {
                return this.tableCoachNote;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["StoryProject"] != null)) {
                    base.Tables.Add(new StoryProjectDataTable(ds.Tables["StoryProject"]));
                }
                if ((ds.Tables["Members"] != null)) {
                    base.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
                }
                if ((ds.Tables["Member"] != null)) {
                    base.Tables.Add(new MemberDataTable(ds.Tables["Member"]));
                }
                if ((ds.Tables["Languages"] != null)) {
                    base.Tables.Add(new LanguagesDataTable(ds.Tables["Languages"]));
                }
                if ((ds.Tables["VernacularLang"] != null)) {
                    base.Tables.Add(new VernacularLangDataTable(ds.Tables["VernacularLang"]));
                }
                if ((ds.Tables["NationalBTLang"] != null)) {
                    base.Tables.Add(new NationalBTLangDataTable(ds.Tables["NationalBTLang"]));
                }
                if ((ds.Tables["InternationalBTLang"] != null)) {
                    base.Tables.Add(new InternationalBTLangDataTable(ds.Tables["InternationalBTLang"]));
                }
                if ((ds.Tables["stories"] != null)) {
                    base.Tables.Add(new storiesDataTable(ds.Tables["stories"]));
                }
                if ((ds.Tables["story"] != null)) {
                    base.Tables.Add(new storyDataTable(ds.Tables["story"]));
                }
                if ((ds.Tables["CraftingInfo"] != null)) {
                    base.Tables.Add(new CraftingInfoDataTable(ds.Tables["CraftingInfo"]));
                }
                if ((ds.Tables["StoryCrafter"] != null)) {
                    base.Tables.Add(new StoryCrafterDataTable(ds.Tables["StoryCrafter"]));
                }
                if ((ds.Tables["BackTranslator"] != null)) {
                    base.Tables.Add(new BackTranslatorDataTable(ds.Tables["BackTranslator"]));
                }
                if ((ds.Tables["Tests"] != null)) {
                    base.Tables.Add(new TestsDataTable(ds.Tables["Tests"]));
                }
                if ((ds.Tables["Test"] != null)) {
                    base.Tables.Add(new TestDataTable(ds.Tables["Test"]));
                }
                if ((ds.Tables["verses"] != null)) {
                    base.Tables.Add(new versesDataTable(ds.Tables["verses"]));
                }
                if ((ds.Tables["verse"] != null)) {
                    base.Tables.Add(new verseDataTable(ds.Tables["verse"]));
                }
                if ((ds.Tables["anchors"] != null)) {
                    base.Tables.Add(new anchorsDataTable(ds.Tables["anchors"]));
                }
                if ((ds.Tables["anchor"] != null)) {
                    base.Tables.Add(new anchorDataTable(ds.Tables["anchor"]));
                }
                if ((ds.Tables["exegeticalHelps"] != null)) {
                    base.Tables.Add(new exegeticalHelpsDataTable(ds.Tables["exegeticalHelps"]));
                }
                if ((ds.Tables["exegeticalHelp"] != null)) {
                    base.Tables.Add(new exegeticalHelpDataTable(ds.Tables["exegeticalHelp"]));
                }
                if ((ds.Tables["TestQuestions"] != null)) {
                    base.Tables.Add(new TestQuestionsDataTable(ds.Tables["TestQuestions"]));
                }
                if ((ds.Tables["TestQuestion"] != null)) {
                    base.Tables.Add(new TestQuestionDataTable(ds.Tables["TestQuestion"]));
                }
                if ((ds.Tables["Answers"] != null)) {
                    base.Tables.Add(new AnswersDataTable(ds.Tables["Answers"]));
                }
                if ((ds.Tables["answer"] != null)) {
                    base.Tables.Add(new answerDataTable(ds.Tables["answer"]));
                }
                if ((ds.Tables["Retellings"] != null)) {
                    base.Tables.Add(new RetellingsDataTable(ds.Tables["Retellings"]));
                }
                if ((ds.Tables["Retelling"] != null)) {
                    base.Tables.Add(new RetellingDataTable(ds.Tables["Retelling"]));
                }
                if ((ds.Tables["ConsultantNotes"] != null)) {
                    base.Tables.Add(new ConsultantNotesDataTable(ds.Tables["ConsultantNotes"]));
                }
                if ((ds.Tables["ConsultantConversation"] != null)) {
                    base.Tables.Add(new ConsultantConversationDataTable(ds.Tables["ConsultantConversation"]));
                }
                if ((ds.Tables["ConsultantNote"] != null)) {
                    base.Tables.Add(new ConsultantNoteDataTable(ds.Tables["ConsultantNote"]));
                }
                if ((ds.Tables["CoachNotes"] != null)) {
                    base.Tables.Add(new CoachNotesDataTable(ds.Tables["CoachNotes"]));
                }
                if ((ds.Tables["CoachConversation"] != null)) {
                    base.Tables.Add(new CoachConversationDataTable(ds.Tables["CoachConversation"]));
                }
                if ((ds.Tables["CoachNote"] != null)) {
                    base.Tables.Add(new CoachNoteDataTable(ds.Tables["CoachNote"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStoryProject = ((StoryProjectDataTable)(base.Tables["StoryProject"]));
            if ((initTable == true)) {
                if ((this.tableStoryProject != null)) {
                    this.tableStoryProject.InitVars();
                }
            }
            this.tableMembers = ((MembersDataTable)(base.Tables["Members"]));
            if ((initTable == true)) {
                if ((this.tableMembers != null)) {
                    this.tableMembers.InitVars();
                }
            }
            this.tableMember = ((MemberDataTable)(base.Tables["Member"]));
            if ((initTable == true)) {
                if ((this.tableMember != null)) {
                    this.tableMember.InitVars();
                }
            }
            this.tableLanguages = ((LanguagesDataTable)(base.Tables["Languages"]));
            if ((initTable == true)) {
                if ((this.tableLanguages != null)) {
                    this.tableLanguages.InitVars();
                }
            }
            this.tableVernacularLang = ((VernacularLangDataTable)(base.Tables["VernacularLang"]));
            if ((initTable == true)) {
                if ((this.tableVernacularLang != null)) {
                    this.tableVernacularLang.InitVars();
                }
            }
            this.tableNationalBTLang = ((NationalBTLangDataTable)(base.Tables["NationalBTLang"]));
            if ((initTable == true)) {
                if ((this.tableNationalBTLang != null)) {
                    this.tableNationalBTLang.InitVars();
                }
            }
            this.tableInternationalBTLang = ((InternationalBTLangDataTable)(base.Tables["InternationalBTLang"]));
            if ((initTable == true)) {
                if ((this.tableInternationalBTLang != null)) {
                    this.tableInternationalBTLang.InitVars();
                }
            }
            this.tablestories = ((storiesDataTable)(base.Tables["stories"]));
            if ((initTable == true)) {
                if ((this.tablestories != null)) {
                    this.tablestories.InitVars();
                }
            }
            this.tablestory = ((storyDataTable)(base.Tables["story"]));
            if ((initTable == true)) {
                if ((this.tablestory != null)) {
                    this.tablestory.InitVars();
                }
            }
            this.tableCraftingInfo = ((CraftingInfoDataTable)(base.Tables["CraftingInfo"]));
            if ((initTable == true)) {
                if ((this.tableCraftingInfo != null)) {
                    this.tableCraftingInfo.InitVars();
                }
            }
            this.tableStoryCrafter = ((StoryCrafterDataTable)(base.Tables["StoryCrafter"]));
            if ((initTable == true)) {
                if ((this.tableStoryCrafter != null)) {
                    this.tableStoryCrafter.InitVars();
                }
            }
            this.tableBackTranslator = ((BackTranslatorDataTable)(base.Tables["BackTranslator"]));
            if ((initTable == true)) {
                if ((this.tableBackTranslator != null)) {
                    this.tableBackTranslator.InitVars();
                }
            }
            this.tableTests = ((TestsDataTable)(base.Tables["Tests"]));
            if ((initTable == true)) {
                if ((this.tableTests != null)) {
                    this.tableTests.InitVars();
                }
            }
            this.tableTest = ((TestDataTable)(base.Tables["Test"]));
            if ((initTable == true)) {
                if ((this.tableTest != null)) {
                    this.tableTest.InitVars();
                }
            }
            this.tableverses = ((versesDataTable)(base.Tables["verses"]));
            if ((initTable == true)) {
                if ((this.tableverses != null)) {
                    this.tableverses.InitVars();
                }
            }
            this.tableverse = ((verseDataTable)(base.Tables["verse"]));
            if ((initTable == true)) {
                if ((this.tableverse != null)) {
                    this.tableverse.InitVars();
                }
            }
            this.tableanchors = ((anchorsDataTable)(base.Tables["anchors"]));
            if ((initTable == true)) {
                if ((this.tableanchors != null)) {
                    this.tableanchors.InitVars();
                }
            }
            this.tableanchor = ((anchorDataTable)(base.Tables["anchor"]));
            if ((initTable == true)) {
                if ((this.tableanchor != null)) {
                    this.tableanchor.InitVars();
                }
            }
            this.tableexegeticalHelps = ((exegeticalHelpsDataTable)(base.Tables["exegeticalHelps"]));
            if ((initTable == true)) {
                if ((this.tableexegeticalHelps != null)) {
                    this.tableexegeticalHelps.InitVars();
                }
            }
            this.tableexegeticalHelp = ((exegeticalHelpDataTable)(base.Tables["exegeticalHelp"]));
            if ((initTable == true)) {
                if ((this.tableexegeticalHelp != null)) {
                    this.tableexegeticalHelp.InitVars();
                }
            }
            this.tableTestQuestions = ((TestQuestionsDataTable)(base.Tables["TestQuestions"]));
            if ((initTable == true)) {
                if ((this.tableTestQuestions != null)) {
                    this.tableTestQuestions.InitVars();
                }
            }
            this.tableTestQuestion = ((TestQuestionDataTable)(base.Tables["TestQuestion"]));
            if ((initTable == true)) {
                if ((this.tableTestQuestion != null)) {
                    this.tableTestQuestion.InitVars();
                }
            }
            this.tableAnswers = ((AnswersDataTable)(base.Tables["Answers"]));
            if ((initTable == true)) {
                if ((this.tableAnswers != null)) {
                    this.tableAnswers.InitVars();
                }
            }
            this.tableanswer = ((answerDataTable)(base.Tables["answer"]));
            if ((initTable == true)) {
                if ((this.tableanswer != null)) {
                    this.tableanswer.InitVars();
                }
            }
            this.tableRetellings = ((RetellingsDataTable)(base.Tables["Retellings"]));
            if ((initTable == true)) {
                if ((this.tableRetellings != null)) {
                    this.tableRetellings.InitVars();
                }
            }
            this.tableRetelling = ((RetellingDataTable)(base.Tables["Retelling"]));
            if ((initTable == true)) {
                if ((this.tableRetelling != null)) {
                    this.tableRetelling.InitVars();
                }
            }
            this.tableConsultantNotes = ((ConsultantNotesDataTable)(base.Tables["ConsultantNotes"]));
            if ((initTable == true)) {
                if ((this.tableConsultantNotes != null)) {
                    this.tableConsultantNotes.InitVars();
                }
            }
            this.tableConsultantConversation = ((ConsultantConversationDataTable)(base.Tables["ConsultantConversation"]));
            if ((initTable == true)) {
                if ((this.tableConsultantConversation != null)) {
                    this.tableConsultantConversation.InitVars();
                }
            }
            this.tableConsultantNote = ((ConsultantNoteDataTable)(base.Tables["ConsultantNote"]));
            if ((initTable == true)) {
                if ((this.tableConsultantNote != null)) {
                    this.tableConsultantNote.InitVars();
                }
            }
            this.tableCoachNotes = ((CoachNotesDataTable)(base.Tables["CoachNotes"]));
            if ((initTable == true)) {
                if ((this.tableCoachNotes != null)) {
                    this.tableCoachNotes.InitVars();
                }
            }
            this.tableCoachConversation = ((CoachConversationDataTable)(base.Tables["CoachConversation"]));
            if ((initTable == true)) {
                if ((this.tableCoachConversation != null)) {
                    this.tableCoachConversation.InitVars();
                }
            }
            this.tableCoachNote = ((CoachNoteDataTable)(base.Tables["CoachNote"]));
            if ((initTable == true)) {
                if ((this.tableCoachNote != null)) {
                    this.tableCoachNote.InitVars();
                }
            }
            this.relationStoryProject_Members = this.Relations["StoryProject_Members"];
            this.relationMembers_Member = this.Relations["Members_Member"];
            this.relationStoryProject_Languages = this.Relations["StoryProject_Languages"];
            this.relationLanguages_VernacularLang = this.Relations["Languages_VernacularLang"];
            this.relationLanguages_NationalBTLang = this.Relations["Languages_NationalBTLang"];
            this.relationLanguages_InternationalBTLang = this.Relations["Languages_InternationalBTLang"];
            this.relationStoryProject_stories = this.Relations["StoryProject_stories"];
            this.relationstories_story = this.Relations["stories_story"];
            this.relationstory_CraftingInfo = this.Relations["story_CraftingInfo"];
            this.relationCraftingInfo_StoryCrafter = this.Relations["CraftingInfo_StoryCrafter"];
            this.relationCraftingInfo_BackTranslator = this.Relations["CraftingInfo_BackTranslator"];
            this.relationCraftingInfo_Tests = this.Relations["CraftingInfo_Tests"];
            this.relationTests_Test = this.Relations["Tests_Test"];
            this.relationstory_verses = this.Relations["story_verses"];
            this.relationverses_verse = this.Relations["verses_verse"];
            this.relationverse_anchors = this.Relations["verse_anchors"];
            this.relationanchors_anchor = this.Relations["anchors_anchor"];
            this.relationanchor_exegeticalHelps = this.Relations["anchor_exegeticalHelps"];
            this.relationexegeticalHelps_exegeticalHelp = this.Relations["exegeticalHelps_exegeticalHelp"];
            this.relationverse_TestQuestions = this.Relations["verse_TestQuestions"];
            this.relationTestQuestions_TestQuestion = this.Relations["TestQuestions_TestQuestion"];
            this.relationTestQuestion_Answers = this.Relations["TestQuestion_Answers"];
            this.relationAnswers_answer = this.Relations["Answers_answer"];
            this.relationverse_Retellings = this.Relations["verse_Retellings"];
            this.relationRetellings_Retelling = this.Relations["Retellings_Retelling"];
            this.relationverse_ConsultantNotes = this.Relations["verse_ConsultantNotes"];
            this.relationConsultantNotes_ConsultantConversation = this.Relations["ConsultantNotes_ConsultantConversation"];
            this.relationConsultantConversation_ConsultantNote = this.Relations["ConsultantConversation_ConsultantNote"];
            this.relationverse_CoachNotes = this.Relations["verse_CoachNotes"];
            this.relationCoachNotes_CoachConversation = this.Relations["CoachNotes_CoachConversation"];
            this.relationCoachConversation_CoachNote = this.Relations["CoachConversation_CoachNote"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStoryProject = new StoryProjectDataTable();
            base.Tables.Add(this.tableStoryProject);
            this.tableMembers = new MembersDataTable();
            base.Tables.Add(this.tableMembers);
            this.tableMember = new MemberDataTable();
            base.Tables.Add(this.tableMember);
            this.tableLanguages = new LanguagesDataTable();
            base.Tables.Add(this.tableLanguages);
            this.tableVernacularLang = new VernacularLangDataTable();
            base.Tables.Add(this.tableVernacularLang);
            this.tableNationalBTLang = new NationalBTLangDataTable();
            base.Tables.Add(this.tableNationalBTLang);
            this.tableInternationalBTLang = new InternationalBTLangDataTable();
            base.Tables.Add(this.tableInternationalBTLang);
            this.tablestories = new storiesDataTable();
            base.Tables.Add(this.tablestories);
            this.tablestory = new storyDataTable();
            base.Tables.Add(this.tablestory);
            this.tableCraftingInfo = new CraftingInfoDataTable();
            base.Tables.Add(this.tableCraftingInfo);
            this.tableStoryCrafter = new StoryCrafterDataTable();
            base.Tables.Add(this.tableStoryCrafter);
            this.tableBackTranslator = new BackTranslatorDataTable();
            base.Tables.Add(this.tableBackTranslator);
            this.tableTests = new TestsDataTable();
            base.Tables.Add(this.tableTests);
            this.tableTest = new TestDataTable();
            base.Tables.Add(this.tableTest);
            this.tableverses = new versesDataTable();
            base.Tables.Add(this.tableverses);
            this.tableverse = new verseDataTable();
            base.Tables.Add(this.tableverse);
            this.tableanchors = new anchorsDataTable();
            base.Tables.Add(this.tableanchors);
            this.tableanchor = new anchorDataTable();
            base.Tables.Add(this.tableanchor);
            this.tableexegeticalHelps = new exegeticalHelpsDataTable();
            base.Tables.Add(this.tableexegeticalHelps);
            this.tableexegeticalHelp = new exegeticalHelpDataTable();
            base.Tables.Add(this.tableexegeticalHelp);
            this.tableTestQuestions = new TestQuestionsDataTable();
            base.Tables.Add(this.tableTestQuestions);
            this.tableTestQuestion = new TestQuestionDataTable();
            base.Tables.Add(this.tableTestQuestion);
            this.tableAnswers = new AnswersDataTable();
            base.Tables.Add(this.tableAnswers);
            this.tableanswer = new answerDataTable();
            base.Tables.Add(this.tableanswer);
            this.tableRetellings = new RetellingsDataTable();
            base.Tables.Add(this.tableRetellings);
            this.tableRetelling = new RetellingDataTable();
            base.Tables.Add(this.tableRetelling);
            this.tableConsultantNotes = new ConsultantNotesDataTable();
            base.Tables.Add(this.tableConsultantNotes);
            this.tableConsultantConversation = new ConsultantConversationDataTable();
            base.Tables.Add(this.tableConsultantConversation);
            this.tableConsultantNote = new ConsultantNoteDataTable();
            base.Tables.Add(this.tableConsultantNote);
            this.tableCoachNotes = new CoachNotesDataTable();
            base.Tables.Add(this.tableCoachNotes);
            this.tableCoachConversation = new CoachConversationDataTable();
            base.Tables.Add(this.tableCoachConversation);
            this.tableCoachNote = new CoachNoteDataTable();
            base.Tables.Add(this.tableCoachNote);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("StoryProject_Members", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMembers.StoryProject_IdColumn});
            this.tableMembers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Members_Member", new global::System.Data.DataColumn[] {
                        this.tableMembers.Members_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMember.Members_IdColumn});
            this.tableMember.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("StoryProject_Languages", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLanguages.StoryProject_IdColumn});
            this.tableLanguages.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Languages_VernacularLang", new global::System.Data.DataColumn[] {
                        this.tableLanguages.Languages_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableVernacularLang.Languages_IdColumn});
            this.tableVernacularLang.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Languages_NationalBTLang", new global::System.Data.DataColumn[] {
                        this.tableLanguages.Languages_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableNationalBTLang.Languages_IdColumn});
            this.tableNationalBTLang.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Languages_InternationalBTLang", new global::System.Data.DataColumn[] {
                        this.tableLanguages.Languages_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableInternationalBTLang.Languages_IdColumn});
            this.tableInternationalBTLang.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("StoryProject_stories", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestories.StoryProject_IdColumn});
            this.tablestories.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("stories_story", new global::System.Data.DataColumn[] {
                        this.tablestories.stories_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestory.stories_IdColumn});
            this.tablestory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("story_CraftingInfo", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.story_IdColumn});
            this.tableCraftingInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_StoryCrafter", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStoryCrafter.CraftingInfo_IdColumn});
            this.tableStoryCrafter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_BackTranslator", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableBackTranslator.CraftingInfo_IdColumn});
            this.tableBackTranslator.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CraftingInfo_Tests", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTests.CraftingInfo_IdColumn});
            this.tableTests.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Tests_Test", new global::System.Data.DataColumn[] {
                        this.tableTests.Tests_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTest.Tests_IdColumn});
            this.tableTest.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("story_verses", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableverses.story_IdColumn});
            this.tableverses.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verses_verse", new global::System.Data.DataColumn[] {
                        this.tableverses.verses_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableverse.verses_IdColumn});
            this.tableverse.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_anchors", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanchors.verse_IdColumn});
            this.tableanchors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("anchors_anchor", new global::System.Data.DataColumn[] {
                        this.tableanchors.anchors_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanchor.anchors_IdColumn});
            this.tableanchor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("anchor_exegeticalHelps", new global::System.Data.DataColumn[] {
                        this.tableanchor.anchor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelps.anchor_IdColumn});
            this.tableexegeticalHelps.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("exegeticalHelps_exegeticalHelp", new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelps.exegeticalHelps_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelp.exegeticalHelps_IdColumn});
            this.tableexegeticalHelp.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_TestQuestions", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.verse_IdColumn});
            this.tableTestQuestions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TestQuestions_TestQuestion", new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.TestQuestions_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestions_IdColumn});
            this.tableTestQuestion.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TestQuestion_Answers", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnswers.TestQuestion_IdColumn});
            this.tableAnswers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Answers_answer", new global::System.Data.DataColumn[] {
                        this.tableAnswers.Answers_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanswer.Answers_IdColumn});
            this.tableanswer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_Retellings", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetellings.verse_IdColumn});
            this.tableRetellings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Retellings_Retelling", new global::System.Data.DataColumn[] {
                        this.tableRetellings.Retellings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetelling.Retellings_IdColumn});
            this.tableRetelling.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_ConsultantNotes", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.verse_IdColumn});
            this.tableConsultantNotes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ConsultantNotes_ConsultantConversation", new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.ConsultantNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantConversation.ConsultantNotes_IdColumn});
            this.tableConsultantConversation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ConsultantConversation_ConsultantNote", new global::System.Data.DataColumn[] {
                        this.tableConsultantConversation.ConsultantConversation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNote.ConsultantConversation_IdColumn});
            this.tableConsultantNote.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("verse_CoachNotes", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.verse_IdColumn});
            this.tableCoachNotes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CoachNotes_CoachConversation", new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.CoachNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachConversation.CoachNotes_IdColumn});
            this.tableCoachConversation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CoachConversation_CoachNote", new global::System.Data.DataColumn[] {
                        this.tableCoachConversation.CoachConversation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNote.CoachConversation_IdColumn});
            this.tableCoachNote.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationStoryProject_Members = new global::System.Data.DataRelation("StoryProject_Members", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMembers.StoryProject_IdColumn}, false);
            this.relationStoryProject_Members.Nested = true;
            this.Relations.Add(this.relationStoryProject_Members);
            this.relationMembers_Member = new global::System.Data.DataRelation("Members_Member", new global::System.Data.DataColumn[] {
                        this.tableMembers.Members_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMember.Members_IdColumn}, false);
            this.relationMembers_Member.Nested = true;
            this.Relations.Add(this.relationMembers_Member);
            this.relationStoryProject_Languages = new global::System.Data.DataRelation("StoryProject_Languages", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLanguages.StoryProject_IdColumn}, false);
            this.relationStoryProject_Languages.Nested = true;
            this.Relations.Add(this.relationStoryProject_Languages);
            this.relationLanguages_VernacularLang = new global::System.Data.DataRelation("Languages_VernacularLang", new global::System.Data.DataColumn[] {
                        this.tableLanguages.Languages_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableVernacularLang.Languages_IdColumn}, false);
            this.relationLanguages_VernacularLang.Nested = true;
            this.Relations.Add(this.relationLanguages_VernacularLang);
            this.relationLanguages_NationalBTLang = new global::System.Data.DataRelation("Languages_NationalBTLang", new global::System.Data.DataColumn[] {
                        this.tableLanguages.Languages_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableNationalBTLang.Languages_IdColumn}, false);
            this.relationLanguages_NationalBTLang.Nested = true;
            this.Relations.Add(this.relationLanguages_NationalBTLang);
            this.relationLanguages_InternationalBTLang = new global::System.Data.DataRelation("Languages_InternationalBTLang", new global::System.Data.DataColumn[] {
                        this.tableLanguages.Languages_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableInternationalBTLang.Languages_IdColumn}, false);
            this.relationLanguages_InternationalBTLang.Nested = true;
            this.Relations.Add(this.relationLanguages_InternationalBTLang);
            this.relationStoryProject_stories = new global::System.Data.DataRelation("StoryProject_stories", new global::System.Data.DataColumn[] {
                        this.tableStoryProject.StoryProject_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestories.StoryProject_IdColumn}, false);
            this.relationStoryProject_stories.Nested = true;
            this.Relations.Add(this.relationStoryProject_stories);
            this.relationstories_story = new global::System.Data.DataRelation("stories_story", new global::System.Data.DataColumn[] {
                        this.tablestories.stories_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestory.stories_IdColumn}, false);
            this.relationstories_story.Nested = true;
            this.Relations.Add(this.relationstories_story);
            this.relationstory_CraftingInfo = new global::System.Data.DataRelation("story_CraftingInfo", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.story_IdColumn}, false);
            this.relationstory_CraftingInfo.Nested = true;
            this.Relations.Add(this.relationstory_CraftingInfo);
            this.relationCraftingInfo_StoryCrafter = new global::System.Data.DataRelation("CraftingInfo_StoryCrafter", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStoryCrafter.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_StoryCrafter.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_StoryCrafter);
            this.relationCraftingInfo_BackTranslator = new global::System.Data.DataRelation("CraftingInfo_BackTranslator", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableBackTranslator.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_BackTranslator.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_BackTranslator);
            this.relationCraftingInfo_Tests = new global::System.Data.DataRelation("CraftingInfo_Tests", new global::System.Data.DataColumn[] {
                        this.tableCraftingInfo.CraftingInfo_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTests.CraftingInfo_IdColumn}, false);
            this.relationCraftingInfo_Tests.Nested = true;
            this.Relations.Add(this.relationCraftingInfo_Tests);
            this.relationTests_Test = new global::System.Data.DataRelation("Tests_Test", new global::System.Data.DataColumn[] {
                        this.tableTests.Tests_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTest.Tests_IdColumn}, false);
            this.relationTests_Test.Nested = true;
            this.Relations.Add(this.relationTests_Test);
            this.relationstory_verses = new global::System.Data.DataRelation("story_verses", new global::System.Data.DataColumn[] {
                        this.tablestory.story_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableverses.story_IdColumn}, false);
            this.relationstory_verses.Nested = true;
            this.Relations.Add(this.relationstory_verses);
            this.relationverses_verse = new global::System.Data.DataRelation("verses_verse", new global::System.Data.DataColumn[] {
                        this.tableverses.verses_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableverse.verses_IdColumn}, false);
            this.relationverses_verse.Nested = true;
            this.Relations.Add(this.relationverses_verse);
            this.relationverse_anchors = new global::System.Data.DataRelation("verse_anchors", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanchors.verse_IdColumn}, false);
            this.relationverse_anchors.Nested = true;
            this.Relations.Add(this.relationverse_anchors);
            this.relationanchors_anchor = new global::System.Data.DataRelation("anchors_anchor", new global::System.Data.DataColumn[] {
                        this.tableanchors.anchors_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanchor.anchors_IdColumn}, false);
            this.relationanchors_anchor.Nested = true;
            this.Relations.Add(this.relationanchors_anchor);
            this.relationanchor_exegeticalHelps = new global::System.Data.DataRelation("anchor_exegeticalHelps", new global::System.Data.DataColumn[] {
                        this.tableanchor.anchor_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelps.anchor_IdColumn}, false);
            this.relationanchor_exegeticalHelps.Nested = true;
            this.Relations.Add(this.relationanchor_exegeticalHelps);
            this.relationexegeticalHelps_exegeticalHelp = new global::System.Data.DataRelation("exegeticalHelps_exegeticalHelp", new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelps.exegeticalHelps_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableexegeticalHelp.exegeticalHelps_IdColumn}, false);
            this.relationexegeticalHelps_exegeticalHelp.Nested = true;
            this.Relations.Add(this.relationexegeticalHelps_exegeticalHelp);
            this.relationverse_TestQuestions = new global::System.Data.DataRelation("verse_TestQuestions", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.verse_IdColumn}, false);
            this.relationverse_TestQuestions.Nested = true;
            this.Relations.Add(this.relationverse_TestQuestions);
            this.relationTestQuestions_TestQuestion = new global::System.Data.DataRelation("TestQuestions_TestQuestion", new global::System.Data.DataColumn[] {
                        this.tableTestQuestions.TestQuestions_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestions_IdColumn}, false);
            this.relationTestQuestions_TestQuestion.Nested = true;
            this.Relations.Add(this.relationTestQuestions_TestQuestion);
            this.relationTestQuestion_Answers = new global::System.Data.DataRelation("TestQuestion_Answers", new global::System.Data.DataColumn[] {
                        this.tableTestQuestion.TestQuestion_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAnswers.TestQuestion_IdColumn}, false);
            this.relationTestQuestion_Answers.Nested = true;
            this.Relations.Add(this.relationTestQuestion_Answers);
            this.relationAnswers_answer = new global::System.Data.DataRelation("Answers_answer", new global::System.Data.DataColumn[] {
                        this.tableAnswers.Answers_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableanswer.Answers_IdColumn}, false);
            this.relationAnswers_answer.Nested = true;
            this.Relations.Add(this.relationAnswers_answer);
            this.relationverse_Retellings = new global::System.Data.DataRelation("verse_Retellings", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetellings.verse_IdColumn}, false);
            this.relationverse_Retellings.Nested = true;
            this.Relations.Add(this.relationverse_Retellings);
            this.relationRetellings_Retelling = new global::System.Data.DataRelation("Retellings_Retelling", new global::System.Data.DataColumn[] {
                        this.tableRetellings.Retellings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRetelling.Retellings_IdColumn}, false);
            this.relationRetellings_Retelling.Nested = true;
            this.Relations.Add(this.relationRetellings_Retelling);
            this.relationverse_ConsultantNotes = new global::System.Data.DataRelation("verse_ConsultantNotes", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.verse_IdColumn}, false);
            this.relationverse_ConsultantNotes.Nested = true;
            this.Relations.Add(this.relationverse_ConsultantNotes);
            this.relationConsultantNotes_ConsultantConversation = new global::System.Data.DataRelation("ConsultantNotes_ConsultantConversation", new global::System.Data.DataColumn[] {
                        this.tableConsultantNotes.ConsultantNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantConversation.ConsultantNotes_IdColumn}, false);
            this.relationConsultantNotes_ConsultantConversation.Nested = true;
            this.Relations.Add(this.relationConsultantNotes_ConsultantConversation);
            this.relationConsultantConversation_ConsultantNote = new global::System.Data.DataRelation("ConsultantConversation_ConsultantNote", new global::System.Data.DataColumn[] {
                        this.tableConsultantConversation.ConsultantConversation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableConsultantNote.ConsultantConversation_IdColumn}, false);
            this.relationConsultantConversation_ConsultantNote.Nested = true;
            this.Relations.Add(this.relationConsultantConversation_ConsultantNote);
            this.relationverse_CoachNotes = new global::System.Data.DataRelation("verse_CoachNotes", new global::System.Data.DataColumn[] {
                        this.tableverse.verse_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.verse_IdColumn}, false);
            this.relationverse_CoachNotes.Nested = true;
            this.Relations.Add(this.relationverse_CoachNotes);
            this.relationCoachNotes_CoachConversation = new global::System.Data.DataRelation("CoachNotes_CoachConversation", new global::System.Data.DataColumn[] {
                        this.tableCoachNotes.CoachNotes_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachConversation.CoachNotes_IdColumn}, false);
            this.relationCoachNotes_CoachConversation.Nested = true;
            this.Relations.Add(this.relationCoachNotes_CoachConversation);
            this.relationCoachConversation_CoachNote = new global::System.Data.DataRelation("CoachConversation_CoachNote", new global::System.Data.DataColumn[] {
                        this.tableCoachConversation.CoachConversation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoachNote.CoachConversation_IdColumn}, false);
            this.relationCoachConversation_CoachNote.Nested = true;
            this.Relations.Add(this.relationCoachConversation_CoachNote);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStoryProject() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMembers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMember() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLanguages() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVernacularLang() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNationalBTLang() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInternationalBTLang() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestories() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCraftingInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStoryCrafter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBackTranslator() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTests() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTest() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeverses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeverse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeanchors() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeanchor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeexegeticalHelps() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeexegeticalHelp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestQuestions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestQuestion() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnswers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeanswer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRetellings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRetelling() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantNotes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantConversation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantNote() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoachNotes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoachConversation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoachNote() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void StoryProjectRowChangeEventHandler(object sender, StoryProjectRowChangeEvent e);
        
        public delegate void MembersRowChangeEventHandler(object sender, MembersRowChangeEvent e);
        
        public delegate void MemberRowChangeEventHandler(object sender, MemberRowChangeEvent e);
        
        public delegate void LanguagesRowChangeEventHandler(object sender, LanguagesRowChangeEvent e);
        
        public delegate void VernacularLangRowChangeEventHandler(object sender, VernacularLangRowChangeEvent e);
        
        public delegate void NationalBTLangRowChangeEventHandler(object sender, NationalBTLangRowChangeEvent e);
        
        public delegate void InternationalBTLangRowChangeEventHandler(object sender, InternationalBTLangRowChangeEvent e);
        
        public delegate void storiesRowChangeEventHandler(object sender, storiesRowChangeEvent e);
        
        public delegate void storyRowChangeEventHandler(object sender, storyRowChangeEvent e);
        
        public delegate void CraftingInfoRowChangeEventHandler(object sender, CraftingInfoRowChangeEvent e);
        
        public delegate void StoryCrafterRowChangeEventHandler(object sender, StoryCrafterRowChangeEvent e);
        
        public delegate void BackTranslatorRowChangeEventHandler(object sender, BackTranslatorRowChangeEvent e);
        
        public delegate void TestsRowChangeEventHandler(object sender, TestsRowChangeEvent e);
        
        public delegate void TestRowChangeEventHandler(object sender, TestRowChangeEvent e);
        
        public delegate void versesRowChangeEventHandler(object sender, versesRowChangeEvent e);
        
        public delegate void verseRowChangeEventHandler(object sender, verseRowChangeEvent e);
        
        public delegate void anchorsRowChangeEventHandler(object sender, anchorsRowChangeEvent e);
        
        public delegate void anchorRowChangeEventHandler(object sender, anchorRowChangeEvent e);
        
        public delegate void exegeticalHelpsRowChangeEventHandler(object sender, exegeticalHelpsRowChangeEvent e);
        
        public delegate void exegeticalHelpRowChangeEventHandler(object sender, exegeticalHelpRowChangeEvent e);
        
        public delegate void TestQuestionsRowChangeEventHandler(object sender, TestQuestionsRowChangeEvent e);
        
        public delegate void TestQuestionRowChangeEventHandler(object sender, TestQuestionRowChangeEvent e);
        
        public delegate void AnswersRowChangeEventHandler(object sender, AnswersRowChangeEvent e);
        
        public delegate void answerRowChangeEventHandler(object sender, answerRowChangeEvent e);
        
        public delegate void RetellingsRowChangeEventHandler(object sender, RetellingsRowChangeEvent e);
        
        public delegate void RetellingRowChangeEventHandler(object sender, RetellingRowChangeEvent e);
        
        public delegate void ConsultantNotesRowChangeEventHandler(object sender, ConsultantNotesRowChangeEvent e);
        
        public delegate void ConsultantConversationRowChangeEventHandler(object sender, ConsultantConversationRowChangeEvent e);
        
        public delegate void ConsultantNoteRowChangeEventHandler(object sender, ConsultantNoteRowChangeEvent e);
        
        public delegate void CoachNotesRowChangeEventHandler(object sender, CoachNotesRowChangeEvent e);
        
        public delegate void CoachConversationRowChangeEventHandler(object sender, CoachConversationRowChangeEvent e);
        
        public delegate void CoachNoteRowChangeEventHandler(object sender, CoachNoteRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StoryProjectDataTable : global::System.Data.TypedTableBase<StoryProjectRow> {
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnPanoramaFrontMatter;
            
            private global::System.Data.DataColumn columnStoryProject_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectDataTable() {
                this.TableName = "StoryProject";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryProjectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StoryProjectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PanoramaFrontMatterColumn {
                get {
                    return this.columnPanoramaFrontMatter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryProject_IdColumn {
                get {
                    return this.columnStoryProject_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow this[int index] {
                get {
                    return ((StoryProjectRow)(this.Rows[index]));
                }
            }
            
            public event StoryProjectRowChangeEventHandler StoryProjectRowChanging;
            
            public event StoryProjectRowChangeEventHandler StoryProjectRowChanged;
            
            public event StoryProjectRowChangeEventHandler StoryProjectRowDeleting;
            
            public event StoryProjectRowChangeEventHandler StoryProjectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStoryProjectRow(StoryProjectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow AddStoryProjectRow(string ProjectName, string PanoramaFrontMatter) {
                StoryProjectRow rowStoryProjectRow = ((StoryProjectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectName,
                        PanoramaFrontMatter,
                        null};
                rowStoryProjectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStoryProjectRow);
                return rowStoryProjectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StoryProjectDataTable cln = ((StoryProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StoryProjectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnPanoramaFrontMatter = base.Columns["PanoramaFrontMatter"];
                this.columnStoryProject_Id = base.Columns["StoryProject_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProjectName);
                this.columnPanoramaFrontMatter = new global::System.Data.DataColumn("PanoramaFrontMatter", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPanoramaFrontMatter);
                this.columnStoryProject_Id = new global::System.Data.DataColumn("StoryProject_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStoryProject_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStoryProject_Id}, true));
                this.columnProjectName.AllowDBNull = false;
                this.columnProjectName.Namespace = "";
                this.columnPanoramaFrontMatter.Namespace = "";
                this.columnStoryProject_Id.AutoIncrement = true;
                this.columnStoryProject_Id.AllowDBNull = false;
                this.columnStoryProject_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow NewStoryProjectRow() {
                return ((StoryProjectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StoryProjectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StoryProjectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoryProjectRowChanged != null)) {
                    this.StoryProjectRowChanged(this, new StoryProjectRowChangeEvent(((StoryProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoryProjectRowChanging != null)) {
                    this.StoryProjectRowChanging(this, new StoryProjectRowChangeEvent(((StoryProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoryProjectRowDeleted != null)) {
                    this.StoryProjectRowDeleted(this, new StoryProjectRowChangeEvent(((StoryProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoryProjectRowDeleting != null)) {
                    this.StoryProjectRowDeleting(this, new StoryProjectRowChangeEvent(((StoryProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStoryProjectRow(StoryProjectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StoryProjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MembersDataTable : global::System.Data.TypedTableBase<MembersRow> {
            
            private global::System.Data.DataColumn columnMembers_Id;
            
            private global::System.Data.DataColumn columnStoryProject_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersDataTable() {
                this.TableName = "Members";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MembersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Members_IdColumn {
                get {
                    return this.columnMembers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryProject_IdColumn {
                get {
                    return this.columnStoryProject_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow this[int index] {
                get {
                    return ((MembersRow)(this.Rows[index]));
                }
            }
            
            public event MembersRowChangeEventHandler MembersRowChanging;
            
            public event MembersRowChangeEventHandler MembersRowChanged;
            
            public event MembersRowChangeEventHandler MembersRowDeleting;
            
            public event MembersRowChangeEventHandler MembersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMembersRow(MembersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow AddMembersRow(StoryProjectRow parentStoryProjectRowByStoryProject_Members) {
                MembersRow rowMembersRow = ((MembersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentStoryProjectRowByStoryProject_Members != null)) {
                    columnValuesArray[1] = parentStoryProjectRowByStoryProject_Members[2];
                }
                rowMembersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMembersRow);
                return rowMembersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MembersDataTable cln = ((MembersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MembersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMembers_Id = base.Columns["Members_Id"];
                this.columnStoryProject_Id = base.Columns["StoryProject_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMembers_Id = new global::System.Data.DataColumn("Members_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMembers_Id);
                this.columnStoryProject_Id = new global::System.Data.DataColumn("StoryProject_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStoryProject_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMembers_Id}, true));
                this.columnMembers_Id.AutoIncrement = true;
                this.columnMembers_Id.AllowDBNull = false;
                this.columnMembers_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow NewMembersRow() {
                return ((MembersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MembersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MembersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MembersRowChanged != null)) {
                    this.MembersRowChanged(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MembersRowChanging != null)) {
                    this.MembersRowChanging(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MembersRowDeleted != null)) {
                    this.MembersRowDeleted(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MembersRowDeleting != null)) {
                    this.MembersRowDeleting(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMembersRow(MembersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MembersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MemberDataTable : global::System.Data.TypedTableBase<MemberRow> {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmemberType;
            
            private global::System.Data.DataColumn columnmemberKey;
            
            private global::System.Data.DataColumn columnemail;
            
            private global::System.Data.DataColumn columnaltPhone;
            
            private global::System.Data.DataColumn columnphone;
            
            private global::System.Data.DataColumn columnbioData;
            
            private global::System.Data.DataColumn columnskypeID;
            
            private global::System.Data.DataColumn columnteamViewerID;
            
            private global::System.Data.DataColumn columnOverrideVernacularKeyboard;
            
            private global::System.Data.DataColumn columnOverrideNationalBTKeyboard;
            
            private global::System.Data.DataColumn columnMembers_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberDataTable() {
                this.TableName = "Member";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MemberDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MemberDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberTypeColumn {
                get {
                    return this.columnmemberType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberKeyColumn {
                get {
                    return this.columnmemberKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn altPhoneColumn {
                get {
                    return this.columnaltPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phoneColumn {
                get {
                    return this.columnphone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bioDataColumn {
                get {
                    return this.columnbioData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn skypeIDColumn {
                get {
                    return this.columnskypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn teamViewerIDColumn {
                get {
                    return this.columnteamViewerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideVernacularKeyboardColumn {
                get {
                    return this.columnOverrideVernacularKeyboard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideNationalBTKeyboardColumn {
                get {
                    return this.columnOverrideNationalBTKeyboard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Members_IdColumn {
                get {
                    return this.columnMembers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow this[int index] {
                get {
                    return ((MemberRow)(this.Rows[index]));
                }
            }
            
            public event MemberRowChangeEventHandler MemberRowChanging;
            
            public event MemberRowChangeEventHandler MemberRowChanged;
            
            public event MemberRowChangeEventHandler MemberRowDeleting;
            
            public event MemberRowChangeEventHandler MemberRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMemberRow(MemberRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow AddMemberRow(string name, string memberType, string memberKey, string email, string altPhone, string phone, string bioData, string skypeID, string teamViewerID, string OverrideVernacularKeyboard, string OverrideNationalBTKeyboard, MembersRow parentMembersRowByMembers_Member) {
                MemberRow rowMemberRow = ((MemberRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        memberType,
                        memberKey,
                        email,
                        altPhone,
                        phone,
                        bioData,
                        skypeID,
                        teamViewerID,
                        OverrideVernacularKeyboard,
                        OverrideNationalBTKeyboard,
                        null};
                if ((parentMembersRowByMembers_Member != null)) {
                    columnValuesArray[11] = parentMembersRowByMembers_Member[0];
                }
                rowMemberRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMemberRow);
                return rowMemberRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MemberDataTable cln = ((MemberDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MemberDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnmemberType = base.Columns["memberType"];
                this.columnmemberKey = base.Columns["memberKey"];
                this.columnemail = base.Columns["email"];
                this.columnaltPhone = base.Columns["altPhone"];
                this.columnphone = base.Columns["phone"];
                this.columnbioData = base.Columns["bioData"];
                this.columnskypeID = base.Columns["skypeID"];
                this.columnteamViewerID = base.Columns["teamViewerID"];
                this.columnOverrideVernacularKeyboard = base.Columns["OverrideVernacularKeyboard"];
                this.columnOverrideNationalBTKeyboard = base.Columns["OverrideNationalBTKeyboard"];
                this.columnMembers_Id = base.Columns["Members_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnmemberType = new global::System.Data.DataColumn("memberType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberType);
                this.columnmemberKey = new global::System.Data.DataColumn("memberKey", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberKey);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnemail);
                this.columnaltPhone = new global::System.Data.DataColumn("altPhone", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnaltPhone);
                this.columnphone = new global::System.Data.DataColumn("phone", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnphone);
                this.columnbioData = new global::System.Data.DataColumn("bioData", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnbioData);
                this.columnskypeID = new global::System.Data.DataColumn("skypeID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnskypeID);
                this.columnteamViewerID = new global::System.Data.DataColumn("teamViewerID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnteamViewerID);
                this.columnOverrideVernacularKeyboard = new global::System.Data.DataColumn("OverrideVernacularKeyboard", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideVernacularKeyboard);
                this.columnOverrideNationalBTKeyboard = new global::System.Data.DataColumn("OverrideNationalBTKeyboard", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverrideNationalBTKeyboard);
                this.columnMembers_Id = new global::System.Data.DataColumn("Members_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMembers_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnmemberType.AllowDBNull = false;
                this.columnmemberType.Namespace = "";
                this.columnmemberKey.AllowDBNull = false;
                this.columnmemberKey.Namespace = "";
                this.columnemail.Namespace = "";
                this.columnaltPhone.Namespace = "";
                this.columnphone.Namespace = "";
                this.columnbioData.Namespace = "";
                this.columnskypeID.Namespace = "";
                this.columnteamViewerID.Namespace = "";
                this.columnOverrideVernacularKeyboard.Namespace = "";
                this.columnOverrideNationalBTKeyboard.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow NewMemberRow() {
                return ((MemberRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MemberRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MemberRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MemberRowChanged != null)) {
                    this.MemberRowChanged(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MemberRowChanging != null)) {
                    this.MemberRowChanging(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MemberRowDeleted != null)) {
                    this.MemberRowDeleted(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MemberRowDeleting != null)) {
                    this.MemberRowDeleting(this, new MemberRowChangeEvent(((MemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMemberRow(MemberRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MemberDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LanguagesDataTable : global::System.Data.TypedTableBase<LanguagesRow> {
            
            private global::System.Data.DataColumn columnLanguages_Id;
            
            private global::System.Data.DataColumn columnStoryProject_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesDataTable() {
                this.TableName = "Languages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LanguagesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LanguagesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Languages_IdColumn {
                get {
                    return this.columnLanguages_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryProject_IdColumn {
                get {
                    return this.columnStoryProject_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow this[int index] {
                get {
                    return ((LanguagesRow)(this.Rows[index]));
                }
            }
            
            public event LanguagesRowChangeEventHandler LanguagesRowChanging;
            
            public event LanguagesRowChangeEventHandler LanguagesRowChanged;
            
            public event LanguagesRowChangeEventHandler LanguagesRowDeleting;
            
            public event LanguagesRowChangeEventHandler LanguagesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLanguagesRow(LanguagesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow AddLanguagesRow(StoryProjectRow parentStoryProjectRowByStoryProject_Languages) {
                LanguagesRow rowLanguagesRow = ((LanguagesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentStoryProjectRowByStoryProject_Languages != null)) {
                    columnValuesArray[1] = parentStoryProjectRowByStoryProject_Languages[2];
                }
                rowLanguagesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLanguagesRow);
                return rowLanguagesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LanguagesDataTable cln = ((LanguagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LanguagesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLanguages_Id = base.Columns["Languages_Id"];
                this.columnStoryProject_Id = base.Columns["StoryProject_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLanguages_Id = new global::System.Data.DataColumn("Languages_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLanguages_Id);
                this.columnStoryProject_Id = new global::System.Data.DataColumn("StoryProject_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStoryProject_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLanguages_Id}, true));
                this.columnLanguages_Id.AutoIncrement = true;
                this.columnLanguages_Id.AllowDBNull = false;
                this.columnLanguages_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow NewLanguagesRow() {
                return ((LanguagesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LanguagesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LanguagesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LanguagesRowChanged != null)) {
                    this.LanguagesRowChanged(this, new LanguagesRowChangeEvent(((LanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LanguagesRowChanging != null)) {
                    this.LanguagesRowChanging(this, new LanguagesRowChangeEvent(((LanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LanguagesRowDeleted != null)) {
                    this.LanguagesRowDeleted(this, new LanguagesRowChangeEvent(((LanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LanguagesRowDeleting != null)) {
                    this.LanguagesRowDeleting(this, new LanguagesRowChangeEvent(((LanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLanguagesRow(LanguagesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LanguagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VernacularLangDataTable : global::System.Data.TypedTableBase<VernacularLangRow> {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columncode;
            
            private global::System.Data.DataColumn columnFontName;
            
            private global::System.Data.DataColumn columnFontSize;
            
            private global::System.Data.DataColumn columnFontColor;
            
            private global::System.Data.DataColumn columnSentenceFinalPunct;
            
            private global::System.Data.DataColumn columnKeyboard;
            
            private global::System.Data.DataColumn columnRTL;
            
            private global::System.Data.DataColumn columnLanguages_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularLangDataTable() {
                this.TableName = "VernacularLang";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VernacularLangDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VernacularLangDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn codeColumn {
                get {
                    return this.columncode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontNameColumn {
                get {
                    return this.columnFontName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontSizeColumn {
                get {
                    return this.columnFontSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontColorColumn {
                get {
                    return this.columnFontColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SentenceFinalPunctColumn {
                get {
                    return this.columnSentenceFinalPunct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyboardColumn {
                get {
                    return this.columnKeyboard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RTLColumn {
                get {
                    return this.columnRTL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Languages_IdColumn {
                get {
                    return this.columnLanguages_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularLangRow this[int index] {
                get {
                    return ((VernacularLangRow)(this.Rows[index]));
                }
            }
            
            public event VernacularLangRowChangeEventHandler VernacularLangRowChanging;
            
            public event VernacularLangRowChangeEventHandler VernacularLangRowChanged;
            
            public event VernacularLangRowChangeEventHandler VernacularLangRowDeleting;
            
            public event VernacularLangRowChangeEventHandler VernacularLangRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVernacularLangRow(VernacularLangRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularLangRow AddVernacularLangRow(string name, string code, string FontName, float FontSize, string FontColor, string SentenceFinalPunct, string Keyboard, bool RTL, LanguagesRow parentLanguagesRowByLanguages_VernacularLang) {
                VernacularLangRow rowVernacularLangRow = ((VernacularLangRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        code,
                        FontName,
                        FontSize,
                        FontColor,
                        SentenceFinalPunct,
                        Keyboard,
                        RTL,
                        null};
                if ((parentLanguagesRowByLanguages_VernacularLang != null)) {
                    columnValuesArray[8] = parentLanguagesRowByLanguages_VernacularLang[0];
                }
                rowVernacularLangRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVernacularLangRow);
                return rowVernacularLangRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VernacularLangDataTable cln = ((VernacularLangDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VernacularLangDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columncode = base.Columns["code"];
                this.columnFontName = base.Columns["FontName"];
                this.columnFontSize = base.Columns["FontSize"];
                this.columnFontColor = base.Columns["FontColor"];
                this.columnSentenceFinalPunct = base.Columns["SentenceFinalPunct"];
                this.columnKeyboard = base.Columns["Keyboard"];
                this.columnRTL = base.Columns["RTL"];
                this.columnLanguages_Id = base.Columns["Languages_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columncode = new global::System.Data.DataColumn("code", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncode);
                this.columnFontName = new global::System.Data.DataColumn("FontName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontName);
                this.columnFontSize = new global::System.Data.DataColumn("FontSize", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontSize);
                this.columnFontColor = new global::System.Data.DataColumn("FontColor", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontColor);
                this.columnSentenceFinalPunct = new global::System.Data.DataColumn("SentenceFinalPunct", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSentenceFinalPunct);
                this.columnKeyboard = new global::System.Data.DataColumn("Keyboard", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyboard);
                this.columnRTL = new global::System.Data.DataColumn("RTL", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRTL);
                this.columnLanguages_Id = new global::System.Data.DataColumn("Languages_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLanguages_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columncode.AllowDBNull = false;
                this.columncode.Namespace = "";
                this.columnFontName.AllowDBNull = false;
                this.columnFontName.Namespace = "";
                this.columnFontSize.AllowDBNull = false;
                this.columnFontSize.Namespace = "";
                this.columnFontColor.AllowDBNull = false;
                this.columnFontColor.Namespace = "";
                this.columnSentenceFinalPunct.AllowDBNull = false;
                this.columnSentenceFinalPunct.Namespace = "";
                this.columnKeyboard.Namespace = "";
                this.columnRTL.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularLangRow NewVernacularLangRow() {
                return ((VernacularLangRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VernacularLangRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VernacularLangRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VernacularLangRowChanged != null)) {
                    this.VernacularLangRowChanged(this, new VernacularLangRowChangeEvent(((VernacularLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VernacularLangRowChanging != null)) {
                    this.VernacularLangRowChanging(this, new VernacularLangRowChangeEvent(((VernacularLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VernacularLangRowDeleted != null)) {
                    this.VernacularLangRowDeleted(this, new VernacularLangRowChangeEvent(((VernacularLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VernacularLangRowDeleting != null)) {
                    this.VernacularLangRowDeleting(this, new VernacularLangRowChangeEvent(((VernacularLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVernacularLangRow(VernacularLangRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VernacularLangDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NationalBTLangDataTable : global::System.Data.TypedTableBase<NationalBTLangRow> {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columncode;
            
            private global::System.Data.DataColumn columnFontName;
            
            private global::System.Data.DataColumn columnFontSize;
            
            private global::System.Data.DataColumn columnFontColor;
            
            private global::System.Data.DataColumn columnSentenceFinalPunct;
            
            private global::System.Data.DataColumn columnKeyboard;
            
            private global::System.Data.DataColumn columnRTL;
            
            private global::System.Data.DataColumn columnLanguages_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTLangDataTable() {
                this.TableName = "NationalBTLang";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NationalBTLangDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NationalBTLangDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn codeColumn {
                get {
                    return this.columncode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontNameColumn {
                get {
                    return this.columnFontName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontSizeColumn {
                get {
                    return this.columnFontSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontColorColumn {
                get {
                    return this.columnFontColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SentenceFinalPunctColumn {
                get {
                    return this.columnSentenceFinalPunct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyboardColumn {
                get {
                    return this.columnKeyboard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RTLColumn {
                get {
                    return this.columnRTL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Languages_IdColumn {
                get {
                    return this.columnLanguages_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTLangRow this[int index] {
                get {
                    return ((NationalBTLangRow)(this.Rows[index]));
                }
            }
            
            public event NationalBTLangRowChangeEventHandler NationalBTLangRowChanging;
            
            public event NationalBTLangRowChangeEventHandler NationalBTLangRowChanged;
            
            public event NationalBTLangRowChangeEventHandler NationalBTLangRowDeleting;
            
            public event NationalBTLangRowChangeEventHandler NationalBTLangRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNationalBTLangRow(NationalBTLangRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTLangRow AddNationalBTLangRow(string name, string code, string FontName, float FontSize, string FontColor, string SentenceFinalPunct, string Keyboard, bool RTL, LanguagesRow parentLanguagesRowByLanguages_NationalBTLang) {
                NationalBTLangRow rowNationalBTLangRow = ((NationalBTLangRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        code,
                        FontName,
                        FontSize,
                        FontColor,
                        SentenceFinalPunct,
                        Keyboard,
                        RTL,
                        null};
                if ((parentLanguagesRowByLanguages_NationalBTLang != null)) {
                    columnValuesArray[8] = parentLanguagesRowByLanguages_NationalBTLang[0];
                }
                rowNationalBTLangRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNationalBTLangRow);
                return rowNationalBTLangRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NationalBTLangDataTable cln = ((NationalBTLangDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NationalBTLangDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columncode = base.Columns["code"];
                this.columnFontName = base.Columns["FontName"];
                this.columnFontSize = base.Columns["FontSize"];
                this.columnFontColor = base.Columns["FontColor"];
                this.columnSentenceFinalPunct = base.Columns["SentenceFinalPunct"];
                this.columnKeyboard = base.Columns["Keyboard"];
                this.columnRTL = base.Columns["RTL"];
                this.columnLanguages_Id = base.Columns["Languages_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columncode = new global::System.Data.DataColumn("code", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncode);
                this.columnFontName = new global::System.Data.DataColumn("FontName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontName);
                this.columnFontSize = new global::System.Data.DataColumn("FontSize", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontSize);
                this.columnFontColor = new global::System.Data.DataColumn("FontColor", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontColor);
                this.columnSentenceFinalPunct = new global::System.Data.DataColumn("SentenceFinalPunct", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSentenceFinalPunct);
                this.columnKeyboard = new global::System.Data.DataColumn("Keyboard", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyboard);
                this.columnRTL = new global::System.Data.DataColumn("RTL", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRTL);
                this.columnLanguages_Id = new global::System.Data.DataColumn("Languages_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLanguages_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columncode.AllowDBNull = false;
                this.columncode.Namespace = "";
                this.columnFontName.AllowDBNull = false;
                this.columnFontName.Namespace = "";
                this.columnFontSize.AllowDBNull = false;
                this.columnFontSize.Namespace = "";
                this.columnFontColor.AllowDBNull = false;
                this.columnFontColor.Namespace = "";
                this.columnSentenceFinalPunct.AllowDBNull = false;
                this.columnSentenceFinalPunct.Namespace = "";
                this.columnKeyboard.Namespace = "";
                this.columnRTL.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTLangRow NewNationalBTLangRow() {
                return ((NationalBTLangRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NationalBTLangRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NationalBTLangRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NationalBTLangRowChanged != null)) {
                    this.NationalBTLangRowChanged(this, new NationalBTLangRowChangeEvent(((NationalBTLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NationalBTLangRowChanging != null)) {
                    this.NationalBTLangRowChanging(this, new NationalBTLangRowChangeEvent(((NationalBTLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NationalBTLangRowDeleted != null)) {
                    this.NationalBTLangRowDeleted(this, new NationalBTLangRowChangeEvent(((NationalBTLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NationalBTLangRowDeleting != null)) {
                    this.NationalBTLangRowDeleting(this, new NationalBTLangRowChangeEvent(((NationalBTLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNationalBTLangRow(NationalBTLangRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NationalBTLangDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InternationalBTLangDataTable : global::System.Data.TypedTableBase<InternationalBTLangRow> {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columncode;
            
            private global::System.Data.DataColumn columnFontName;
            
            private global::System.Data.DataColumn columnFontSize;
            
            private global::System.Data.DataColumn columnFontColor;
            
            private global::System.Data.DataColumn columnSentenceFinalPunct;
            
            private global::System.Data.DataColumn columnKeyboard;
            
            private global::System.Data.DataColumn columnRTL;
            
            private global::System.Data.DataColumn columnLanguages_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTLangDataTable() {
                this.TableName = "InternationalBTLang";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InternationalBTLangDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InternationalBTLangDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn codeColumn {
                get {
                    return this.columncode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontNameColumn {
                get {
                    return this.columnFontName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontSizeColumn {
                get {
                    return this.columnFontSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FontColorColumn {
                get {
                    return this.columnFontColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SentenceFinalPunctColumn {
                get {
                    return this.columnSentenceFinalPunct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyboardColumn {
                get {
                    return this.columnKeyboard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RTLColumn {
                get {
                    return this.columnRTL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Languages_IdColumn {
                get {
                    return this.columnLanguages_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTLangRow this[int index] {
                get {
                    return ((InternationalBTLangRow)(this.Rows[index]));
                }
            }
            
            public event InternationalBTLangRowChangeEventHandler InternationalBTLangRowChanging;
            
            public event InternationalBTLangRowChangeEventHandler InternationalBTLangRowChanged;
            
            public event InternationalBTLangRowChangeEventHandler InternationalBTLangRowDeleting;
            
            public event InternationalBTLangRowChangeEventHandler InternationalBTLangRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInternationalBTLangRow(InternationalBTLangRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTLangRow AddInternationalBTLangRow(string name, string code, string FontName, float FontSize, string FontColor, string SentenceFinalPunct, string Keyboard, bool RTL, LanguagesRow parentLanguagesRowByLanguages_InternationalBTLang) {
                InternationalBTLangRow rowInternationalBTLangRow = ((InternationalBTLangRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        code,
                        FontName,
                        FontSize,
                        FontColor,
                        SentenceFinalPunct,
                        Keyboard,
                        RTL,
                        null};
                if ((parentLanguagesRowByLanguages_InternationalBTLang != null)) {
                    columnValuesArray[8] = parentLanguagesRowByLanguages_InternationalBTLang[0];
                }
                rowInternationalBTLangRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInternationalBTLangRow);
                return rowInternationalBTLangRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InternationalBTLangDataTable cln = ((InternationalBTLangDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InternationalBTLangDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columncode = base.Columns["code"];
                this.columnFontName = base.Columns["FontName"];
                this.columnFontSize = base.Columns["FontSize"];
                this.columnFontColor = base.Columns["FontColor"];
                this.columnSentenceFinalPunct = base.Columns["SentenceFinalPunct"];
                this.columnKeyboard = base.Columns["Keyboard"];
                this.columnRTL = base.Columns["RTL"];
                this.columnLanguages_Id = base.Columns["Languages_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columncode = new global::System.Data.DataColumn("code", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncode);
                this.columnFontName = new global::System.Data.DataColumn("FontName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontName);
                this.columnFontSize = new global::System.Data.DataColumn("FontSize", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontSize);
                this.columnFontColor = new global::System.Data.DataColumn("FontColor", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFontColor);
                this.columnSentenceFinalPunct = new global::System.Data.DataColumn("SentenceFinalPunct", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSentenceFinalPunct);
                this.columnKeyboard = new global::System.Data.DataColumn("Keyboard", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnKeyboard);
                this.columnRTL = new global::System.Data.DataColumn("RTL", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRTL);
                this.columnLanguages_Id = new global::System.Data.DataColumn("Languages_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLanguages_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columncode.AllowDBNull = false;
                this.columncode.Namespace = "";
                this.columnFontName.AllowDBNull = false;
                this.columnFontName.Namespace = "";
                this.columnFontSize.AllowDBNull = false;
                this.columnFontSize.Namespace = "";
                this.columnFontColor.AllowDBNull = false;
                this.columnFontColor.Namespace = "";
                this.columnSentenceFinalPunct.AllowDBNull = false;
                this.columnSentenceFinalPunct.Namespace = "";
                this.columnKeyboard.Namespace = "";
                this.columnRTL.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTLangRow NewInternationalBTLangRow() {
                return ((InternationalBTLangRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InternationalBTLangRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InternationalBTLangRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InternationalBTLangRowChanged != null)) {
                    this.InternationalBTLangRowChanged(this, new InternationalBTLangRowChangeEvent(((InternationalBTLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InternationalBTLangRowChanging != null)) {
                    this.InternationalBTLangRowChanging(this, new InternationalBTLangRowChangeEvent(((InternationalBTLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InternationalBTLangRowDeleted != null)) {
                    this.InternationalBTLangRowDeleted(this, new InternationalBTLangRowChangeEvent(((InternationalBTLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InternationalBTLangRowDeleting != null)) {
                    this.InternationalBTLangRowDeleting(this, new InternationalBTLangRowChangeEvent(((InternationalBTLangRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInternationalBTLangRow(InternationalBTLangRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InternationalBTLangDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class storiesDataTable : global::System.Data.TypedTableBase<storiesRow> {
            
            private global::System.Data.DataColumn columnSetName;
            
            private global::System.Data.DataColumn columnstories_Id;
            
            private global::System.Data.DataColumn columnStoryProject_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesDataTable() {
                this.TableName = "stories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected storiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetNameColumn {
                get {
                    return this.columnSetName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stories_IdColumn {
                get {
                    return this.columnstories_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryProject_IdColumn {
                get {
                    return this.columnStoryProject_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow this[int index] {
                get {
                    return ((storiesRow)(this.Rows[index]));
                }
            }
            
            public event storiesRowChangeEventHandler storiesRowChanging;
            
            public event storiesRowChangeEventHandler storiesRowChanged;
            
            public event storiesRowChangeEventHandler storiesRowDeleting;
            
            public event storiesRowChangeEventHandler storiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstoriesRow(storiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow AddstoriesRow(string SetName, StoryProjectRow parentStoryProjectRowByStoryProject_stories) {
                storiesRow rowstoriesRow = ((storiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SetName,
                        null,
                        null};
                if ((parentStoryProjectRowByStoryProject_stories != null)) {
                    columnValuesArray[2] = parentStoryProjectRowByStoryProject_stories[2];
                }
                rowstoriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowstoriesRow);
                return rowstoriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                storiesDataTable cln = ((storiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new storiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSetName = base.Columns["SetName"];
                this.columnstories_Id = base.Columns["stories_Id"];
                this.columnStoryProject_Id = base.Columns["StoryProject_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSetName = new global::System.Data.DataColumn("SetName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSetName);
                this.columnstories_Id = new global::System.Data.DataColumn("stories_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstories_Id);
                this.columnStoryProject_Id = new global::System.Data.DataColumn("StoryProject_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStoryProject_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstories_Id}, true));
                this.columnSetName.AllowDBNull = false;
                this.columnSetName.Namespace = "";
                this.columnstories_Id.AutoIncrement = true;
                this.columnstories_Id.AllowDBNull = false;
                this.columnstories_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow NewstoriesRow() {
                return ((storiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new storiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(storiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.storiesRowChanged != null)) {
                    this.storiesRowChanged(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.storiesRowChanging != null)) {
                    this.storiesRowChanging(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.storiesRowDeleted != null)) {
                    this.storiesRowDeleted(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.storiesRowDeleting != null)) {
                    this.storiesRowDeleting(this, new storiesRowChangeEvent(((storiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestoriesRow(storiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "storiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class storyDataTable : global::System.Data.TypedTableBase<storyRow> {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnstage;
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnstageDateTimeStamp;
            
            private global::System.Data.DataColumn columnstory_Id;
            
            private global::System.Data.DataColumn columnstories_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyDataTable() {
                this.TableName = "story";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected storyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stageColumn {
                get {
                    return this.columnstage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stageDateTimeStampColumn {
                get {
                    return this.columnstageDateTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn story_IdColumn {
                get {
                    return this.columnstory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stories_IdColumn {
                get {
                    return this.columnstories_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow this[int index] {
                get {
                    return ((storyRow)(this.Rows[index]));
                }
            }
            
            public event storyRowChangeEventHandler storyRowChanging;
            
            public event storyRowChangeEventHandler storyRowChanged;
            
            public event storyRowChangeEventHandler storyRowDeleting;
            
            public event storyRowChangeEventHandler storyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstoryRow(storyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow AddstoryRow(string name, string stage, string guid, System.DateTime stageDateTimeStamp, storiesRow parentstoriesRowBystories_story) {
                storyRow rowstoryRow = ((storyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        stage,
                        guid,
                        stageDateTimeStamp,
                        null,
                        null};
                if ((parentstoriesRowBystories_story != null)) {
                    columnValuesArray[5] = parentstoriesRowBystories_story[1];
                }
                rowstoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowstoryRow);
                return rowstoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                storyDataTable cln = ((storyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new storyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnstage = base.Columns["stage"];
                this.columnguid = base.Columns["guid"];
                this.columnstageDateTimeStamp = base.Columns["stageDateTimeStamp"];
                this.columnstory_Id = base.Columns["story_Id"];
                this.columnstories_Id = base.Columns["stories_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnstage = new global::System.Data.DataColumn("stage", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstage);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnstageDateTimeStamp = new global::System.Data.DataColumn("stageDateTimeStamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstageDateTimeStamp);
                this.columnstory_Id = new global::System.Data.DataColumn("story_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstory_Id);
                this.columnstories_Id = new global::System.Data.DataColumn("stories_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstories_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstory_Id}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnstage.AllowDBNull = false;
                this.columnstage.Namespace = "";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnstageDateTimeStamp.Namespace = "";
                this.columnstory_Id.AutoIncrement = true;
                this.columnstory_Id.AllowDBNull = false;
                this.columnstory_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow NewstoryRow() {
                return ((storyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new storyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(storyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.storyRowChanged != null)) {
                    this.storyRowChanged(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.storyRowChanging != null)) {
                    this.storyRowChanging(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.storyRowDeleted != null)) {
                    this.storyRowDeleted(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.storyRowDeleting != null)) {
                    this.storyRowDeleting(this, new storyRowChangeEvent(((storyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestoryRow(storyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "storyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CraftingInfoDataTable : global::System.Data.TypedTableBase<CraftingInfoRow> {
            
            private global::System.Data.DataColumn columnNonBiblicalStory;
            
            private global::System.Data.DataColumn columnStoryPurpose;
            
            private global::System.Data.DataColumn columnResourcesUsed;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            private global::System.Data.DataColumn columnstory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoDataTable() {
                this.TableName = "CraftingInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CraftingInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CraftingInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NonBiblicalStoryColumn {
                get {
                    return this.columnNonBiblicalStory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryPurposeColumn {
                get {
                    return this.columnStoryPurpose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResourcesUsedColumn {
                get {
                    return this.columnResourcesUsed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn story_IdColumn {
                get {
                    return this.columnstory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow this[int index] {
                get {
                    return ((CraftingInfoRow)(this.Rows[index]));
                }
            }
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowChanging;
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowChanged;
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowDeleting;
            
            public event CraftingInfoRowChangeEventHandler CraftingInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCraftingInfoRow(CraftingInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow AddCraftingInfoRow(bool NonBiblicalStory, string StoryPurpose, string ResourcesUsed, storyRow parentstoryRowBystory_CraftingInfo) {
                CraftingInfoRow rowCraftingInfoRow = ((CraftingInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NonBiblicalStory,
                        StoryPurpose,
                        ResourcesUsed,
                        null,
                        null};
                if ((parentstoryRowBystory_CraftingInfo != null)) {
                    columnValuesArray[4] = parentstoryRowBystory_CraftingInfo[4];
                }
                rowCraftingInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCraftingInfoRow);
                return rowCraftingInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CraftingInfoDataTable cln = ((CraftingInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CraftingInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNonBiblicalStory = base.Columns["NonBiblicalStory"];
                this.columnStoryPurpose = base.Columns["StoryPurpose"];
                this.columnResourcesUsed = base.Columns["ResourcesUsed"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
                this.columnstory_Id = base.Columns["story_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNonBiblicalStory = new global::System.Data.DataColumn("NonBiblicalStory", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNonBiblicalStory);
                this.columnStoryPurpose = new global::System.Data.DataColumn("StoryPurpose", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoryPurpose);
                this.columnResourcesUsed = new global::System.Data.DataColumn("ResourcesUsed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResourcesUsed);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnstory_Id = new global::System.Data.DataColumn("story_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstory_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCraftingInfo_Id}, true));
                this.columnNonBiblicalStory.Namespace = "";
                this.columnCraftingInfo_Id.AutoIncrement = true;
                this.columnCraftingInfo_Id.AllowDBNull = false;
                this.columnCraftingInfo_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow NewCraftingInfoRow() {
                return ((CraftingInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CraftingInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CraftingInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CraftingInfoRowChanged != null)) {
                    this.CraftingInfoRowChanged(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CraftingInfoRowChanging != null)) {
                    this.CraftingInfoRowChanging(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CraftingInfoRowDeleted != null)) {
                    this.CraftingInfoRowDeleted(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CraftingInfoRowDeleting != null)) {
                    this.CraftingInfoRowDeleting(this, new CraftingInfoRowChangeEvent(((CraftingInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCraftingInfoRow(CraftingInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CraftingInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StoryCrafterDataTable : global::System.Data.TypedTableBase<StoryCrafterRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterDataTable() {
                this.TableName = "StoryCrafter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryCrafterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StoryCrafterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow this[int index] {
                get {
                    return ((StoryCrafterRow)(this.Rows[index]));
                }
            }
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowChanging;
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowChanged;
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowDeleting;
            
            public event StoryCrafterRowChangeEventHandler StoryCrafterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStoryCrafterRow(StoryCrafterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow AddStoryCrafterRow(string memberID, CraftingInfoRow parentCraftingInfoRowByCraftingInfo_StoryCrafter) {
                StoryCrafterRow rowStoryCrafterRow = ((StoryCrafterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_StoryCrafter != null)) {
                    columnValuesArray[1] = parentCraftingInfoRowByCraftingInfo_StoryCrafter[3];
                }
                rowStoryCrafterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStoryCrafterRow);
                return rowStoryCrafterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StoryCrafterDataTable cln = ((StoryCrafterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StoryCrafterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow NewStoryCrafterRow() {
                return ((StoryCrafterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StoryCrafterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StoryCrafterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoryCrafterRowChanged != null)) {
                    this.StoryCrafterRowChanged(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoryCrafterRowChanging != null)) {
                    this.StoryCrafterRowChanging(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoryCrafterRowDeleted != null)) {
                    this.StoryCrafterRowDeleted(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoryCrafterRowDeleting != null)) {
                    this.StoryCrafterRowDeleting(this, new StoryCrafterRowChangeEvent(((StoryCrafterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStoryCrafterRow(StoryCrafterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StoryCrafterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BackTranslatorDataTable : global::System.Data.TypedTableBase<BackTranslatorRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorDataTable() {
                this.TableName = "BackTranslator";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BackTranslatorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BackTranslatorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow this[int index] {
                get {
                    return ((BackTranslatorRow)(this.Rows[index]));
                }
            }
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowChanging;
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowChanged;
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowDeleting;
            
            public event BackTranslatorRowChangeEventHandler BackTranslatorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBackTranslatorRow(BackTranslatorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow AddBackTranslatorRow(string memberID, CraftingInfoRow parentCraftingInfoRowByCraftingInfo_BackTranslator) {
                BackTranslatorRow rowBackTranslatorRow = ((BackTranslatorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_BackTranslator != null)) {
                    columnValuesArray[1] = parentCraftingInfoRowByCraftingInfo_BackTranslator[3];
                }
                rowBackTranslatorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBackTranslatorRow);
                return rowBackTranslatorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BackTranslatorDataTable cln = ((BackTranslatorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BackTranslatorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow NewBackTranslatorRow() {
                return ((BackTranslatorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BackTranslatorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BackTranslatorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BackTranslatorRowChanged != null)) {
                    this.BackTranslatorRowChanged(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BackTranslatorRowChanging != null)) {
                    this.BackTranslatorRowChanging(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BackTranslatorRowDeleted != null)) {
                    this.BackTranslatorRowDeleted(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BackTranslatorRowDeleting != null)) {
                    this.BackTranslatorRowDeleting(this, new BackTranslatorRowChangeEvent(((BackTranslatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBackTranslatorRow(BackTranslatorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BackTranslatorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestsDataTable : global::System.Data.TypedTableBase<TestsRow> {
            
            private global::System.Data.DataColumn columnTests_Id;
            
            private global::System.Data.DataColumn columnCraftingInfo_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsDataTable() {
                this.TableName = "Tests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Tests_IdColumn {
                get {
                    return this.columnTests_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CraftingInfo_IdColumn {
                get {
                    return this.columnCraftingInfo_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow this[int index] {
                get {
                    return ((TestsRow)(this.Rows[index]));
                }
            }
            
            public event TestsRowChangeEventHandler TestsRowChanging;
            
            public event TestsRowChangeEventHandler TestsRowChanged;
            
            public event TestsRowChangeEventHandler TestsRowDeleting;
            
            public event TestsRowChangeEventHandler TestsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestsRow(TestsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow AddTestsRow(CraftingInfoRow parentCraftingInfoRowByCraftingInfo_Tests) {
                TestsRow rowTestsRow = ((TestsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentCraftingInfoRowByCraftingInfo_Tests != null)) {
                    columnValuesArray[1] = parentCraftingInfoRowByCraftingInfo_Tests[3];
                }
                rowTestsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestsRow);
                return rowTestsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestsDataTable cln = ((TestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTests_Id = base.Columns["Tests_Id"];
                this.columnCraftingInfo_Id = base.Columns["CraftingInfo_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTests_Id = new global::System.Data.DataColumn("Tests_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTests_Id);
                this.columnCraftingInfo_Id = new global::System.Data.DataColumn("CraftingInfo_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCraftingInfo_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTests_Id}, true));
                this.columnTests_Id.AutoIncrement = true;
                this.columnTests_Id.AllowDBNull = false;
                this.columnTests_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow NewTestsRow() {
                return ((TestsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestsRowChanged != null)) {
                    this.TestsRowChanged(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestsRowChanging != null)) {
                    this.TestsRowChanging(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestsRowDeleted != null)) {
                    this.TestsRowDeleted(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestsRowDeleting != null)) {
                    this.TestsRowDeleting(this, new TestsRowChangeEvent(((TestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestsRow(TestsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestDataTable : global::System.Data.TypedTableBase<TestRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnTests_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestDataTable() {
                this.TableName = "Test";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Tests_IdColumn {
                get {
                    return this.columnTests_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRow this[int index] {
                get {
                    return ((TestRow)(this.Rows[index]));
                }
            }
            
            public event TestRowChangeEventHandler TestRowChanging;
            
            public event TestRowChangeEventHandler TestRowChanged;
            
            public event TestRowChangeEventHandler TestRowDeleting;
            
            public event TestRowChangeEventHandler TestRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestRow(TestRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRow AddTestRow(string memberID, TestsRow parentTestsRowByTests_Test) {
                TestRow rowTestRow = ((TestRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        null};
                if ((parentTestsRowByTests_Test != null)) {
                    columnValuesArray[1] = parentTestsRowByTests_Test[0];
                }
                rowTestRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestRow);
                return rowTestRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestDataTable cln = ((TestDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnTests_Id = base.Columns["Tests_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnTests_Id = new global::System.Data.DataColumn("Tests_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTests_Id);
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRow NewTestRow() {
                return ((TestRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestRowChanged != null)) {
                    this.TestRowChanged(this, new TestRowChangeEvent(((TestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestRowChanging != null)) {
                    this.TestRowChanging(this, new TestRowChangeEvent(((TestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestRowDeleted != null)) {
                    this.TestRowDeleted(this, new TestRowChangeEvent(((TestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestRowDeleting != null)) {
                    this.TestRowDeleting(this, new TestRowChangeEvent(((TestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestRow(TestRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class versesDataTable : global::System.Data.TypedTableBase<versesRow> {
            
            private global::System.Data.DataColumn columnverses_Id;
            
            private global::System.Data.DataColumn columnstory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesDataTable() {
                this.TableName = "verses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal versesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected versesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verses_IdColumn {
                get {
                    return this.columnverses_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn story_IdColumn {
                get {
                    return this.columnstory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow this[int index] {
                get {
                    return ((versesRow)(this.Rows[index]));
                }
            }
            
            public event versesRowChangeEventHandler versesRowChanging;
            
            public event versesRowChangeEventHandler versesRowChanged;
            
            public event versesRowChangeEventHandler versesRowDeleting;
            
            public event versesRowChangeEventHandler versesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddversesRow(versesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow AddversesRow(storyRow parentstoryRowBystory_verses) {
                versesRow rowversesRow = ((versesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentstoryRowBystory_verses != null)) {
                    columnValuesArray[1] = parentstoryRowBystory_verses[4];
                }
                rowversesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowversesRow);
                return rowversesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                versesDataTable cln = ((versesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new versesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnverses_Id = base.Columns["verses_Id"];
                this.columnstory_Id = base.Columns["story_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnverses_Id = new global::System.Data.DataColumn("verses_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverses_Id);
                this.columnstory_Id = new global::System.Data.DataColumn("story_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstory_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnverses_Id}, true));
                this.columnverses_Id.AutoIncrement = true;
                this.columnverses_Id.AllowDBNull = false;
                this.columnverses_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow NewversesRow() {
                return ((versesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new versesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(versesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.versesRowChanged != null)) {
                    this.versesRowChanged(this, new versesRowChangeEvent(((versesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.versesRowChanging != null)) {
                    this.versesRowChanging(this, new versesRowChangeEvent(((versesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.versesRowDeleted != null)) {
                    this.versesRowDeleted(this, new versesRowChangeEvent(((versesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.versesRowDeleting != null)) {
                    this.versesRowDeleting(this, new versesRowChangeEvent(((versesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveversesRow(versesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "versesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class verseDataTable : global::System.Data.TypedTableBase<verseRow> {
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnVernacular;
            
            private global::System.Data.DataColumn columnNationalBT;
            
            private global::System.Data.DataColumn columnInternationalBT;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            private global::System.Data.DataColumn columnverses_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseDataTable() {
                this.TableName = "verse";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal verseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected verseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VernacularColumn {
                get {
                    return this.columnVernacular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NationalBTColumn {
                get {
                    return this.columnNationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InternationalBTColumn {
                get {
                    return this.columnInternationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verses_IdColumn {
                get {
                    return this.columnverses_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow this[int index] {
                get {
                    return ((verseRow)(this.Rows[index]));
                }
            }
            
            public event verseRowChangeEventHandler verseRowChanging;
            
            public event verseRowChangeEventHandler verseRowChanged;
            
            public event verseRowChangeEventHandler verseRowDeleting;
            
            public event verseRowChangeEventHandler verseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddverseRow(verseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow AddverseRow(string guid, string Vernacular, string NationalBT, string InternationalBT, versesRow parentversesRowByverses_verse) {
                verseRow rowverseRow = ((verseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        guid,
                        Vernacular,
                        NationalBT,
                        InternationalBT,
                        null,
                        null};
                if ((parentversesRowByverses_verse != null)) {
                    columnValuesArray[5] = parentversesRowByverses_verse[0];
                }
                rowverseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowverseRow);
                return rowverseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                verseDataTable cln = ((verseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new verseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnguid = base.Columns["guid"];
                this.columnVernacular = base.Columns["Vernacular"];
                this.columnNationalBT = base.Columns["NationalBT"];
                this.columnInternationalBT = base.Columns["InternationalBT"];
                this.columnverse_Id = base.Columns["verse_Id"];
                this.columnverses_Id = base.Columns["verses_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnVernacular = new global::System.Data.DataColumn("Vernacular", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVernacular);
                this.columnNationalBT = new global::System.Data.DataColumn("NationalBT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNationalBT);
                this.columnInternationalBT = new global::System.Data.DataColumn("InternationalBT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInternationalBT);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.columnverses_Id = new global::System.Data.DataColumn("verses_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverses_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnverse_Id}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnverse_Id.AutoIncrement = true;
                this.columnverse_Id.AllowDBNull = false;
                this.columnverse_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow NewverseRow() {
                return ((verseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new verseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(verseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.verseRowChanged != null)) {
                    this.verseRowChanged(this, new verseRowChangeEvent(((verseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.verseRowChanging != null)) {
                    this.verseRowChanging(this, new verseRowChangeEvent(((verseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.verseRowDeleted != null)) {
                    this.verseRowDeleted(this, new verseRowChangeEvent(((verseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.verseRowDeleting != null)) {
                    this.verseRowDeleting(this, new verseRowChangeEvent(((verseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveverseRow(verseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "verseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class anchorsDataTable : global::System.Data.TypedTableBase<anchorsRow> {
            
            private global::System.Data.DataColumn columnkeyTermChecked;
            
            private global::System.Data.DataColumn columnanchors_Id;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsDataTable() {
                this.TableName = "anchors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal anchorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected anchorsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn keyTermCheckedColumn {
                get {
                    return this.columnkeyTermChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn anchors_IdColumn {
                get {
                    return this.columnanchors_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow this[int index] {
                get {
                    return ((anchorsRow)(this.Rows[index]));
                }
            }
            
            public event anchorsRowChangeEventHandler anchorsRowChanging;
            
            public event anchorsRowChangeEventHandler anchorsRowChanged;
            
            public event anchorsRowChangeEventHandler anchorsRowDeleting;
            
            public event anchorsRowChangeEventHandler anchorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddanchorsRow(anchorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow AddanchorsRow(bool keyTermChecked, verseRow parentverseRowByverse_anchors) {
                anchorsRow rowanchorsRow = ((anchorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        keyTermChecked,
                        null,
                        null};
                if ((parentverseRowByverse_anchors != null)) {
                    columnValuesArray[2] = parentverseRowByverse_anchors[4];
                }
                rowanchorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowanchorsRow);
                return rowanchorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                anchorsDataTable cln = ((anchorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new anchorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnkeyTermChecked = base.Columns["keyTermChecked"];
                this.columnanchors_Id = base.Columns["anchors_Id"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnkeyTermChecked = new global::System.Data.DataColumn("keyTermChecked", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnkeyTermChecked);
                this.columnanchors_Id = new global::System.Data.DataColumn("anchors_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanchors_Id);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnanchors_Id}, true));
                this.columnkeyTermChecked.Namespace = "";
                this.columnanchors_Id.AutoIncrement = true;
                this.columnanchors_Id.AllowDBNull = false;
                this.columnanchors_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow NewanchorsRow() {
                return ((anchorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new anchorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(anchorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.anchorsRowChanged != null)) {
                    this.anchorsRowChanged(this, new anchorsRowChangeEvent(((anchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.anchorsRowChanging != null)) {
                    this.anchorsRowChanging(this, new anchorsRowChangeEvent(((anchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.anchorsRowDeleted != null)) {
                    this.anchorsRowDeleted(this, new anchorsRowChangeEvent(((anchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.anchorsRowDeleting != null)) {
                    this.anchorsRowDeleting(this, new anchorsRowChangeEvent(((anchorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveanchorsRow(anchorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "anchorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class anchorDataTable : global::System.Data.TypedTableBase<anchorRow> {
            
            private global::System.Data.DataColumn columnjumpTarget;
            
            private global::System.Data.DataColumn columntoolTip;
            
            private global::System.Data.DataColumn columnanchor_Id;
            
            private global::System.Data.DataColumn columnanchors_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorDataTable() {
                this.TableName = "anchor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal anchorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected anchorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jumpTargetColumn {
                get {
                    return this.columnjumpTarget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn toolTipColumn {
                get {
                    return this.columntoolTip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn anchor_IdColumn {
                get {
                    return this.columnanchor_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn anchors_IdColumn {
                get {
                    return this.columnanchors_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow this[int index] {
                get {
                    return ((anchorRow)(this.Rows[index]));
                }
            }
            
            public event anchorRowChangeEventHandler anchorRowChanging;
            
            public event anchorRowChangeEventHandler anchorRowChanged;
            
            public event anchorRowChangeEventHandler anchorRowDeleting;
            
            public event anchorRowChangeEventHandler anchorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddanchorRow(anchorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow AddanchorRow(string jumpTarget, string toolTip, anchorsRow parentanchorsRowByanchors_anchor) {
                anchorRow rowanchorRow = ((anchorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        jumpTarget,
                        toolTip,
                        null,
                        null};
                if ((parentanchorsRowByanchors_anchor != null)) {
                    columnValuesArray[3] = parentanchorsRowByanchors_anchor[1];
                }
                rowanchorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowanchorRow);
                return rowanchorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                anchorDataTable cln = ((anchorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new anchorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnjumpTarget = base.Columns["jumpTarget"];
                this.columntoolTip = base.Columns["toolTip"];
                this.columnanchor_Id = base.Columns["anchor_Id"];
                this.columnanchors_Id = base.Columns["anchors_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnjumpTarget = new global::System.Data.DataColumn("jumpTarget", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnjumpTarget);
                this.columntoolTip = new global::System.Data.DataColumn("toolTip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntoolTip);
                this.columnanchor_Id = new global::System.Data.DataColumn("anchor_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanchor_Id);
                this.columnanchors_Id = new global::System.Data.DataColumn("anchors_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanchors_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnanchor_Id}, true));
                this.columnjumpTarget.AllowDBNull = false;
                this.columnjumpTarget.Namespace = "";
                this.columnanchor_Id.AutoIncrement = true;
                this.columnanchor_Id.AllowDBNull = false;
                this.columnanchor_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow NewanchorRow() {
                return ((anchorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new anchorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(anchorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.anchorRowChanged != null)) {
                    this.anchorRowChanged(this, new anchorRowChangeEvent(((anchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.anchorRowChanging != null)) {
                    this.anchorRowChanging(this, new anchorRowChangeEvent(((anchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.anchorRowDeleted != null)) {
                    this.anchorRowDeleted(this, new anchorRowChangeEvent(((anchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.anchorRowDeleting != null)) {
                    this.anchorRowDeleting(this, new anchorRowChangeEvent(((anchorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveanchorRow(anchorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "anchorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class exegeticalHelpsDataTable : global::System.Data.TypedTableBase<exegeticalHelpsRow> {
            
            private global::System.Data.DataColumn columnexegeticalHelps_Id;
            
            private global::System.Data.DataColumn columnanchor_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsDataTable() {
                this.TableName = "exegeticalHelps";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal exegeticalHelpsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected exegeticalHelpsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exegeticalHelps_IdColumn {
                get {
                    return this.columnexegeticalHelps_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn anchor_IdColumn {
                get {
                    return this.columnanchor_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow this[int index] {
                get {
                    return ((exegeticalHelpsRow)(this.Rows[index]));
                }
            }
            
            public event exegeticalHelpsRowChangeEventHandler exegeticalHelpsRowChanging;
            
            public event exegeticalHelpsRowChangeEventHandler exegeticalHelpsRowChanged;
            
            public event exegeticalHelpsRowChangeEventHandler exegeticalHelpsRowDeleting;
            
            public event exegeticalHelpsRowChangeEventHandler exegeticalHelpsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddexegeticalHelpsRow(exegeticalHelpsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow AddexegeticalHelpsRow(anchorRow parentanchorRowByanchor_exegeticalHelps) {
                exegeticalHelpsRow rowexegeticalHelpsRow = ((exegeticalHelpsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentanchorRowByanchor_exegeticalHelps != null)) {
                    columnValuesArray[1] = parentanchorRowByanchor_exegeticalHelps[2];
                }
                rowexegeticalHelpsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowexegeticalHelpsRow);
                return rowexegeticalHelpsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                exegeticalHelpsDataTable cln = ((exegeticalHelpsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new exegeticalHelpsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnexegeticalHelps_Id = base.Columns["exegeticalHelps_Id"];
                this.columnanchor_Id = base.Columns["anchor_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnexegeticalHelps_Id = new global::System.Data.DataColumn("exegeticalHelps_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnexegeticalHelps_Id);
                this.columnanchor_Id = new global::System.Data.DataColumn("anchor_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnanchor_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnexegeticalHelps_Id}, true));
                this.columnexegeticalHelps_Id.AutoIncrement = true;
                this.columnexegeticalHelps_Id.AllowDBNull = false;
                this.columnexegeticalHelps_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow NewexegeticalHelpsRow() {
                return ((exegeticalHelpsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new exegeticalHelpsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(exegeticalHelpsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.exegeticalHelpsRowChanged != null)) {
                    this.exegeticalHelpsRowChanged(this, new exegeticalHelpsRowChangeEvent(((exegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.exegeticalHelpsRowChanging != null)) {
                    this.exegeticalHelpsRowChanging(this, new exegeticalHelpsRowChangeEvent(((exegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.exegeticalHelpsRowDeleted != null)) {
                    this.exegeticalHelpsRowDeleted(this, new exegeticalHelpsRowChangeEvent(((exegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.exegeticalHelpsRowDeleting != null)) {
                    this.exegeticalHelpsRowDeleting(this, new exegeticalHelpsRowChangeEvent(((exegeticalHelpsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveexegeticalHelpsRow(exegeticalHelpsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "exegeticalHelpsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class exegeticalHelpDataTable : global::System.Data.TypedTableBase<exegeticalHelpRow> {
            
            private global::System.Data.DataColumn columnexegeticalHelp_Column;
            
            private global::System.Data.DataColumn columnexegeticalHelps_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpDataTable() {
                this.TableName = "exegeticalHelp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal exegeticalHelpDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected exegeticalHelpDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exegeticalHelp_ColumnColumn {
                get {
                    return this.columnexegeticalHelp_Column;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exegeticalHelps_IdColumn {
                get {
                    return this.columnexegeticalHelps_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRow this[int index] {
                get {
                    return ((exegeticalHelpRow)(this.Rows[index]));
                }
            }
            
            public event exegeticalHelpRowChangeEventHandler exegeticalHelpRowChanging;
            
            public event exegeticalHelpRowChangeEventHandler exegeticalHelpRowChanged;
            
            public event exegeticalHelpRowChangeEventHandler exegeticalHelpRowDeleting;
            
            public event exegeticalHelpRowChangeEventHandler exegeticalHelpRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddexegeticalHelpRow(exegeticalHelpRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRow AddexegeticalHelpRow(string exegeticalHelp_Column, exegeticalHelpsRow parentexegeticalHelpsRowByexegeticalHelps_exegeticalHelp) {
                exegeticalHelpRow rowexegeticalHelpRow = ((exegeticalHelpRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        exegeticalHelp_Column,
                        null};
                if ((parentexegeticalHelpsRowByexegeticalHelps_exegeticalHelp != null)) {
                    columnValuesArray[1] = parentexegeticalHelpsRowByexegeticalHelps_exegeticalHelp[0];
                }
                rowexegeticalHelpRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowexegeticalHelpRow);
                return rowexegeticalHelpRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                exegeticalHelpDataTable cln = ((exegeticalHelpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new exegeticalHelpDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnexegeticalHelp_Column = base.Columns["exegeticalHelp_Column"];
                this.columnexegeticalHelps_Id = base.Columns["exegeticalHelps_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnexegeticalHelp_Column = new global::System.Data.DataColumn("exegeticalHelp_Column", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnexegeticalHelp_Column);
                this.columnexegeticalHelps_Id = new global::System.Data.DataColumn("exegeticalHelps_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnexegeticalHelps_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRow NewexegeticalHelpRow() {
                return ((exegeticalHelpRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new exegeticalHelpRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(exegeticalHelpRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.exegeticalHelpRowChanged != null)) {
                    this.exegeticalHelpRowChanged(this, new exegeticalHelpRowChangeEvent(((exegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.exegeticalHelpRowChanging != null)) {
                    this.exegeticalHelpRowChanging(this, new exegeticalHelpRowChangeEvent(((exegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.exegeticalHelpRowDeleted != null)) {
                    this.exegeticalHelpRowDeleted(this, new exegeticalHelpRowChangeEvent(((exegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.exegeticalHelpRowDeleting != null)) {
                    this.exegeticalHelpRowDeleting(this, new exegeticalHelpRowChangeEvent(((exegeticalHelpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveexegeticalHelpRow(exegeticalHelpRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "exegeticalHelpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestQuestionsDataTable : global::System.Data.TypedTableBase<TestQuestionsRow> {
            
            private global::System.Data.DataColumn columnTestQuestions_Id;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsDataTable() {
                this.TableName = "TestQuestions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestQuestionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestions_IdColumn {
                get {
                    return this.columnTestQuestions_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow this[int index] {
                get {
                    return ((TestQuestionsRow)(this.Rows[index]));
                }
            }
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowChanging;
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowChanged;
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowDeleting;
            
            public event TestQuestionsRowChangeEventHandler TestQuestionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestQuestionsRow(TestQuestionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow AddTestQuestionsRow(verseRow parentverseRowByverse_TestQuestions) {
                TestQuestionsRow rowTestQuestionsRow = ((TestQuestionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentverseRowByverse_TestQuestions != null)) {
                    columnValuesArray[1] = parentverseRowByverse_TestQuestions[4];
                }
                rowTestQuestionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestQuestionsRow);
                return rowTestQuestionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestQuestionsDataTable cln = ((TestQuestionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestQuestionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestQuestions_Id = base.Columns["TestQuestions_Id"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestQuestions_Id = new global::System.Data.DataColumn("TestQuestions_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestions_Id);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestQuestions_Id}, true));
                this.columnTestQuestions_Id.AutoIncrement = true;
                this.columnTestQuestions_Id.AllowDBNull = false;
                this.columnTestQuestions_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow NewTestQuestionsRow() {
                return ((TestQuestionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestQuestionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestQuestionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestQuestionsRowChanged != null)) {
                    this.TestQuestionsRowChanged(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestQuestionsRowChanging != null)) {
                    this.TestQuestionsRowChanging(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestQuestionsRowDeleted != null)) {
                    this.TestQuestionsRowDeleted(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestQuestionsRowDeleting != null)) {
                    this.TestQuestionsRowDeleting(this, new TestQuestionsRowChangeEvent(((TestQuestionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestQuestionsRow(TestQuestionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestQuestionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestQuestionDataTable : global::System.Data.TypedTableBase<TestQuestionRow> {
            
            private global::System.Data.DataColumn columnvisible;
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnTQVernacular;
            
            private global::System.Data.DataColumn columnTQNationalBT;
            
            private global::System.Data.DataColumn columnTQInternationalBT;
            
            private global::System.Data.DataColumn columnTestQuestion_Id;
            
            private global::System.Data.DataColumn columnTestQuestions_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionDataTable() {
                this.TableName = "TestQuestion";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestQuestionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TQVernacularColumn {
                get {
                    return this.columnTQVernacular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TQNationalBTColumn {
                get {
                    return this.columnTQNationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TQInternationalBTColumn {
                get {
                    return this.columnTQInternationalBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestion_IdColumn {
                get {
                    return this.columnTestQuestion_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestions_IdColumn {
                get {
                    return this.columnTestQuestions_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow this[int index] {
                get {
                    return ((TestQuestionRow)(this.Rows[index]));
                }
            }
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowChanging;
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowChanged;
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowDeleting;
            
            public event TestQuestionRowChangeEventHandler TestQuestionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestQuestionRow(TestQuestionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow AddTestQuestionRow(bool visible, string guid, string TQVernacular, string TQNationalBT, string TQInternationalBT, TestQuestionsRow parentTestQuestionsRowByTestQuestions_TestQuestion) {
                TestQuestionRow rowTestQuestionRow = ((TestQuestionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        visible,
                        guid,
                        TQVernacular,
                        TQNationalBT,
                        TQInternationalBT,
                        null,
                        null};
                if ((parentTestQuestionsRowByTestQuestions_TestQuestion != null)) {
                    columnValuesArray[6] = parentTestQuestionsRowByTestQuestions_TestQuestion[0];
                }
                rowTestQuestionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestQuestionRow);
                return rowTestQuestionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestQuestionDataTable cln = ((TestQuestionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestQuestionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvisible = base.Columns["visible"];
                this.columnguid = base.Columns["guid"];
                this.columnTQVernacular = base.Columns["TQVernacular"];
                this.columnTQNationalBT = base.Columns["TQNationalBT"];
                this.columnTQInternationalBT = base.Columns["TQInternationalBT"];
                this.columnTestQuestion_Id = base.Columns["TestQuestion_Id"];
                this.columnTestQuestions_Id = base.Columns["TestQuestions_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvisible = new global::System.Data.DataColumn("visible", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvisible);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnTQVernacular = new global::System.Data.DataColumn("TQVernacular", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTQVernacular);
                this.columnTQNationalBT = new global::System.Data.DataColumn("TQNationalBT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTQNationalBT);
                this.columnTQInternationalBT = new global::System.Data.DataColumn("TQInternationalBT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTQInternationalBT);
                this.columnTestQuestion_Id = new global::System.Data.DataColumn("TestQuestion_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestion_Id);
                this.columnTestQuestions_Id = new global::System.Data.DataColumn("TestQuestions_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestions_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTestQuestion_Id}, true));
                this.columnvisible.Namespace = "";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnTestQuestion_Id.AutoIncrement = true;
                this.columnTestQuestion_Id.AllowDBNull = false;
                this.columnTestQuestion_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow NewTestQuestionRow() {
                return ((TestQuestionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestQuestionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestQuestionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestQuestionRowChanged != null)) {
                    this.TestQuestionRowChanged(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestQuestionRowChanging != null)) {
                    this.TestQuestionRowChanging(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestQuestionRowDeleted != null)) {
                    this.TestQuestionRowDeleted(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestQuestionRowDeleting != null)) {
                    this.TestQuestionRowDeleting(this, new TestQuestionRowChangeEvent(((TestQuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestQuestionRow(TestQuestionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestQuestionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnswersDataTable : global::System.Data.TypedTableBase<AnswersRow> {
            
            private global::System.Data.DataColumn columnAnswers_Id;
            
            private global::System.Data.DataColumn columnTestQuestion_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersDataTable() {
                this.TableName = "Answers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnswersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnswersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Answers_IdColumn {
                get {
                    return this.columnAnswers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestQuestion_IdColumn {
                get {
                    return this.columnTestQuestion_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow this[int index] {
                get {
                    return ((AnswersRow)(this.Rows[index]));
                }
            }
            
            public event AnswersRowChangeEventHandler AnswersRowChanging;
            
            public event AnswersRowChangeEventHandler AnswersRowChanged;
            
            public event AnswersRowChangeEventHandler AnswersRowDeleting;
            
            public event AnswersRowChangeEventHandler AnswersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnswersRow(AnswersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow AddAnswersRow(TestQuestionRow parentTestQuestionRowByTestQuestion_Answers) {
                AnswersRow rowAnswersRow = ((AnswersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentTestQuestionRowByTestQuestion_Answers != null)) {
                    columnValuesArray[1] = parentTestQuestionRowByTestQuestion_Answers[5];
                }
                rowAnswersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnswersRow);
                return rowAnswersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AnswersDataTable cln = ((AnswersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnswersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAnswers_Id = base.Columns["Answers_Id"];
                this.columnTestQuestion_Id = base.Columns["TestQuestion_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAnswers_Id = new global::System.Data.DataColumn("Answers_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAnswers_Id);
                this.columnTestQuestion_Id = new global::System.Data.DataColumn("TestQuestion_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTestQuestion_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAnswers_Id}, true));
                this.columnAnswers_Id.AutoIncrement = true;
                this.columnAnswers_Id.AllowDBNull = false;
                this.columnAnswers_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow NewAnswersRow() {
                return ((AnswersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnswersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AnswersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnswersRowChanged != null)) {
                    this.AnswersRowChanged(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnswersRowChanging != null)) {
                    this.AnswersRowChanging(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnswersRowDeleted != null)) {
                    this.AnswersRowDeleted(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnswersRowDeleting != null)) {
                    this.AnswersRowDeleting(this, new AnswersRowChangeEvent(((AnswersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnswersRow(AnswersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnswersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class answerDataTable : global::System.Data.TypedTableBase<answerRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnanswer_text;
            
            private global::System.Data.DataColumn columnAnswers_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerDataTable() {
                this.TableName = "answer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal answerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected answerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn answer_textColumn {
                get {
                    return this.columnanswer_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Answers_IdColumn {
                get {
                    return this.columnAnswers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRow this[int index] {
                get {
                    return ((answerRow)(this.Rows[index]));
                }
            }
            
            public event answerRowChangeEventHandler answerRowChanging;
            
            public event answerRowChangeEventHandler answerRowChanged;
            
            public event answerRowChangeEventHandler answerRowDeleting;
            
            public event answerRowChangeEventHandler answerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddanswerRow(answerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRow AddanswerRow(string memberID, string answer_text, AnswersRow parentAnswersRowByAnswers_answer) {
                answerRow rowanswerRow = ((answerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        answer_text,
                        null};
                if ((parentAnswersRowByAnswers_answer != null)) {
                    columnValuesArray[2] = parentAnswersRowByAnswers_answer[0];
                }
                rowanswerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowanswerRow);
                return rowanswerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                answerDataTable cln = ((answerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new answerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnanswer_text = base.Columns["answer_text"];
                this.columnAnswers_Id = base.Columns["Answers_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnanswer_text = new global::System.Data.DataColumn("answer_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnanswer_text);
                this.columnAnswers_Id = new global::System.Data.DataColumn("Answers_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAnswers_Id);
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRow NewanswerRow() {
                return ((answerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new answerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(answerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.answerRowChanged != null)) {
                    this.answerRowChanged(this, new answerRowChangeEvent(((answerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.answerRowChanging != null)) {
                    this.answerRowChanging(this, new answerRowChangeEvent(((answerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.answerRowDeleted != null)) {
                    this.answerRowDeleted(this, new answerRowChangeEvent(((answerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.answerRowDeleting != null)) {
                    this.answerRowDeleting(this, new answerRowChangeEvent(((answerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveanswerRow(answerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "answerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RetellingsDataTable : global::System.Data.TypedTableBase<RetellingsRow> {
            
            private global::System.Data.DataColumn columnRetellings_Id;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsDataTable() {
                this.TableName = "Retellings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RetellingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Retellings_IdColumn {
                get {
                    return this.columnRetellings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow this[int index] {
                get {
                    return ((RetellingsRow)(this.Rows[index]));
                }
            }
            
            public event RetellingsRowChangeEventHandler RetellingsRowChanging;
            
            public event RetellingsRowChangeEventHandler RetellingsRowChanged;
            
            public event RetellingsRowChangeEventHandler RetellingsRowDeleting;
            
            public event RetellingsRowChangeEventHandler RetellingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRetellingsRow(RetellingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow AddRetellingsRow(verseRow parentverseRowByverse_Retellings) {
                RetellingsRow rowRetellingsRow = ((RetellingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentverseRowByverse_Retellings != null)) {
                    columnValuesArray[1] = parentverseRowByverse_Retellings[4];
                }
                rowRetellingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRetellingsRow);
                return rowRetellingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RetellingsDataTable cln = ((RetellingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RetellingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRetellings_Id = base.Columns["Retellings_Id"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRetellings_Id = new global::System.Data.DataColumn("Retellings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRetellings_Id);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRetellings_Id}, true));
                this.columnRetellings_Id.AutoIncrement = true;
                this.columnRetellings_Id.AllowDBNull = false;
                this.columnRetellings_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow NewRetellingsRow() {
                return ((RetellingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RetellingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RetellingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RetellingsRowChanged != null)) {
                    this.RetellingsRowChanged(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RetellingsRowChanging != null)) {
                    this.RetellingsRowChanging(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RetellingsRowDeleted != null)) {
                    this.RetellingsRowDeleted(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RetellingsRowDeleting != null)) {
                    this.RetellingsRowDeleting(this, new RetellingsRowChangeEvent(((RetellingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRetellingsRow(RetellingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RetellingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RetellingDataTable : global::System.Data.TypedTableBase<RetellingRow> {
            
            private global::System.Data.DataColumn columnmemberID;
            
            private global::System.Data.DataColumn columnRetelling_text;
            
            private global::System.Data.DataColumn columnRetellings_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingDataTable() {
                this.TableName = "Retelling";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RetellingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memberIDColumn {
                get {
                    return this.columnmemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Retelling_textColumn {
                get {
                    return this.columnRetelling_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Retellings_IdColumn {
                get {
                    return this.columnRetellings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow this[int index] {
                get {
                    return ((RetellingRow)(this.Rows[index]));
                }
            }
            
            public event RetellingRowChangeEventHandler RetellingRowChanging;
            
            public event RetellingRowChangeEventHandler RetellingRowChanged;
            
            public event RetellingRowChangeEventHandler RetellingRowDeleting;
            
            public event RetellingRowChangeEventHandler RetellingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRetellingRow(RetellingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow AddRetellingRow(string memberID, string Retelling_text, RetellingsRow parentRetellingsRowByRetellings_Retelling) {
                RetellingRow rowRetellingRow = ((RetellingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memberID,
                        Retelling_text,
                        null};
                if ((parentRetellingsRowByRetellings_Retelling != null)) {
                    columnValuesArray[2] = parentRetellingsRowByRetellings_Retelling[0];
                }
                rowRetellingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRetellingRow);
                return rowRetellingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RetellingDataTable cln = ((RetellingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RetellingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemberID = base.Columns["memberID"];
                this.columnRetelling_text = base.Columns["Retelling_text"];
                this.columnRetellings_Id = base.Columns["Retellings_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemberID = new global::System.Data.DataColumn("memberID", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemberID);
                this.columnRetelling_text = new global::System.Data.DataColumn("Retelling_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnRetelling_text);
                this.columnRetellings_Id = new global::System.Data.DataColumn("Retellings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRetellings_Id);
                this.columnmemberID.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow NewRetellingRow() {
                return ((RetellingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RetellingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RetellingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RetellingRowChanged != null)) {
                    this.RetellingRowChanged(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RetellingRowChanging != null)) {
                    this.RetellingRowChanging(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RetellingRowDeleted != null)) {
                    this.RetellingRowDeleted(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RetellingRowDeleting != null)) {
                    this.RetellingRowDeleting(this, new RetellingRowChangeEvent(((RetellingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRetellingRow(RetellingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RetellingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantNotesDataTable : global::System.Data.TypedTableBase<ConsultantNotesRow> {
            
            private global::System.Data.DataColumn columnConsultantNotes_Id;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesDataTable() {
                this.TableName = "ConsultantNotes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNotesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsultantNotesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNotes_IdColumn {
                get {
                    return this.columnConsultantNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow this[int index] {
                get {
                    return ((ConsultantNotesRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowChanging;
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowChanged;
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowDeleting;
            
            public event ConsultantNotesRowChangeEventHandler ConsultantNotesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantNotesRow(ConsultantNotesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow AddConsultantNotesRow(verseRow parentverseRowByverse_ConsultantNotes) {
                ConsultantNotesRow rowConsultantNotesRow = ((ConsultantNotesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentverseRowByverse_ConsultantNotes != null)) {
                    columnValuesArray[1] = parentverseRowByverse_ConsultantNotes[4];
                }
                rowConsultantNotesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantNotesRow);
                return rowConsultantNotesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantNotesDataTable cln = ((ConsultantNotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantNotesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConsultantNotes_Id = base.Columns["ConsultantNotes_Id"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConsultantNotes_Id = new global::System.Data.DataColumn("ConsultantNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantNotes_Id);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnConsultantNotes_Id}, true));
                this.columnConsultantNotes_Id.AutoIncrement = true;
                this.columnConsultantNotes_Id.AllowDBNull = false;
                this.columnConsultantNotes_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow NewConsultantNotesRow() {
                return ((ConsultantNotesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantNotesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantNotesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantNotesRowChanged != null)) {
                    this.ConsultantNotesRowChanged(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantNotesRowChanging != null)) {
                    this.ConsultantNotesRowChanging(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantNotesRowDeleted != null)) {
                    this.ConsultantNotesRowDeleted(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantNotesRowDeleting != null)) {
                    this.ConsultantNotesRowDeleting(this, new ConsultantNotesRowChangeEvent(((ConsultantNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantNotesRow(ConsultantNotesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantNotesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantConversationDataTable : global::System.Data.TypedTableBase<ConsultantConversationRow> {
            
            private global::System.Data.DataColumn columnround;
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnvisible;
            
            private global::System.Data.DataColumn columnConsultantConversation_Id;
            
            private global::System.Data.DataColumn columnConsultantNotes_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationDataTable() {
                this.TableName = "ConsultantConversation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantConversationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsultantConversationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn roundColumn {
                get {
                    return this.columnround;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantConversation_IdColumn {
                get {
                    return this.columnConsultantConversation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNotes_IdColumn {
                get {
                    return this.columnConsultantNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow this[int index] {
                get {
                    return ((ConsultantConversationRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantConversationRowChangeEventHandler ConsultantConversationRowChanging;
            
            public event ConsultantConversationRowChangeEventHandler ConsultantConversationRowChanged;
            
            public event ConsultantConversationRowChangeEventHandler ConsultantConversationRowDeleting;
            
            public event ConsultantConversationRowChangeEventHandler ConsultantConversationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantConversationRow(ConsultantConversationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow AddConsultantConversationRow(byte round, string guid, bool visible, ConsultantNotesRow parentConsultantNotesRowByConsultantNotes_ConsultantConversation) {
                ConsultantConversationRow rowConsultantConversationRow = ((ConsultantConversationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        round,
                        guid,
                        visible,
                        null,
                        null};
                if ((parentConsultantNotesRowByConsultantNotes_ConsultantConversation != null)) {
                    columnValuesArray[4] = parentConsultantNotesRowByConsultantNotes_ConsultantConversation[0];
                }
                rowConsultantConversationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantConversationRow);
                return rowConsultantConversationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantConversationDataTable cln = ((ConsultantConversationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantConversationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnround = base.Columns["round"];
                this.columnguid = base.Columns["guid"];
                this.columnvisible = base.Columns["visible"];
                this.columnConsultantConversation_Id = base.Columns["ConsultantConversation_Id"];
                this.columnConsultantNotes_Id = base.Columns["ConsultantNotes_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnround = new global::System.Data.DataColumn("round", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnround);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnvisible = new global::System.Data.DataColumn("visible", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvisible);
                this.columnConsultantConversation_Id = new global::System.Data.DataColumn("ConsultantConversation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantConversation_Id);
                this.columnConsultantNotes_Id = new global::System.Data.DataColumn("ConsultantNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantNotes_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnConsultantConversation_Id}, true));
                this.columnround.AllowDBNull = false;
                this.columnround.Namespace = "";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnvisible.Namespace = "";
                this.columnConsultantConversation_Id.AutoIncrement = true;
                this.columnConsultantConversation_Id.AllowDBNull = false;
                this.columnConsultantConversation_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow NewConsultantConversationRow() {
                return ((ConsultantConversationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantConversationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantConversationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantConversationRowChanged != null)) {
                    this.ConsultantConversationRowChanged(this, new ConsultantConversationRowChangeEvent(((ConsultantConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantConversationRowChanging != null)) {
                    this.ConsultantConversationRowChanging(this, new ConsultantConversationRowChangeEvent(((ConsultantConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantConversationRowDeleted != null)) {
                    this.ConsultantConversationRowDeleted(this, new ConsultantConversationRowChangeEvent(((ConsultantConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantConversationRowDeleting != null)) {
                    this.ConsultantConversationRowDeleting(this, new ConsultantConversationRowChangeEvent(((ConsultantConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantConversationRow(ConsultantConversationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantConversationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantNoteDataTable : global::System.Data.TypedTableBase<ConsultantNoteRow> {
            
            private global::System.Data.DataColumn columnDirection;
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnConsultantNote_text;
            
            private global::System.Data.DataColumn columnConsultantConversation_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteDataTable() {
                this.TableName = "ConsultantNote";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNoteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsultantNoteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNote_textColumn {
                get {
                    return this.columnConsultantNote_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantConversation_IdColumn {
                get {
                    return this.columnConsultantConversation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow this[int index] {
                get {
                    return ((ConsultantNoteRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowChanging;
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowChanged;
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowDeleting;
            
            public event ConsultantNoteRowChangeEventHandler ConsultantNoteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantNoteRow(ConsultantNoteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow AddConsultantNoteRow(string Direction, string guid, string ConsultantNote_text, ConsultantConversationRow parentConsultantConversationRowByConsultantConversation_ConsultantNote) {
                ConsultantNoteRow rowConsultantNoteRow = ((ConsultantNoteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Direction,
                        guid,
                        ConsultantNote_text,
                        null};
                if ((parentConsultantConversationRowByConsultantConversation_ConsultantNote != null)) {
                    columnValuesArray[3] = parentConsultantConversationRowByConsultantConversation_ConsultantNote[3];
                }
                rowConsultantNoteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantNoteRow);
                return rowConsultantNoteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantNoteDataTable cln = ((ConsultantNoteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantNoteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDirection = base.Columns["Direction"];
                this.columnguid = base.Columns["guid"];
                this.columnConsultantNote_text = base.Columns["ConsultantNote_text"];
                this.columnConsultantConversation_Id = base.Columns["ConsultantConversation_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDirection = new global::System.Data.DataColumn("Direction", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirection);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnConsultantNote_text = new global::System.Data.DataColumn("ConsultantNote_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnConsultantNote_text);
                this.columnConsultantConversation_Id = new global::System.Data.DataColumn("ConsultantConversation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConsultantConversation_Id);
                this.columnDirection.AllowDBNull = false;
                this.columnDirection.Namespace = "";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnConsultantNote_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow NewConsultantNoteRow() {
                return ((ConsultantNoteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantNoteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantNoteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantNoteRowChanged != null)) {
                    this.ConsultantNoteRowChanged(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantNoteRowChanging != null)) {
                    this.ConsultantNoteRowChanging(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantNoteRowDeleted != null)) {
                    this.ConsultantNoteRowDeleted(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantNoteRowDeleting != null)) {
                    this.ConsultantNoteRowDeleting(this, new ConsultantNoteRowChangeEvent(((ConsultantNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantNoteRow(ConsultantNoteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantNoteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoachNotesDataTable : global::System.Data.TypedTableBase<CoachNotesRow> {
            
            private global::System.Data.DataColumn columnCoachNotes_Id;
            
            private global::System.Data.DataColumn columnverse_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesDataTable() {
                this.TableName = "CoachNotes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNotesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoachNotesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachNotes_IdColumn {
                get {
                    return this.columnCoachNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verse_IdColumn {
                get {
                    return this.columnverse_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow this[int index] {
                get {
                    return ((CoachNotesRow)(this.Rows[index]));
                }
            }
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowChanging;
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowChanged;
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowDeleting;
            
            public event CoachNotesRowChangeEventHandler CoachNotesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoachNotesRow(CoachNotesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow AddCoachNotesRow(verseRow parentverseRowByverse_CoachNotes) {
                CoachNotesRow rowCoachNotesRow = ((CoachNotesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentverseRowByverse_CoachNotes != null)) {
                    columnValuesArray[1] = parentverseRowByverse_CoachNotes[4];
                }
                rowCoachNotesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoachNotesRow);
                return rowCoachNotesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoachNotesDataTable cln = ((CoachNotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoachNotesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCoachNotes_Id = base.Columns["CoachNotes_Id"];
                this.columnverse_Id = base.Columns["verse_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCoachNotes_Id = new global::System.Data.DataColumn("CoachNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachNotes_Id);
                this.columnverse_Id = new global::System.Data.DataColumn("verse_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnverse_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCoachNotes_Id}, true));
                this.columnCoachNotes_Id.AutoIncrement = true;
                this.columnCoachNotes_Id.AllowDBNull = false;
                this.columnCoachNotes_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow NewCoachNotesRow() {
                return ((CoachNotesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoachNotesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoachNotesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoachNotesRowChanged != null)) {
                    this.CoachNotesRowChanged(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoachNotesRowChanging != null)) {
                    this.CoachNotesRowChanging(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoachNotesRowDeleted != null)) {
                    this.CoachNotesRowDeleted(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoachNotesRowDeleting != null)) {
                    this.CoachNotesRowDeleting(this, new CoachNotesRowChangeEvent(((CoachNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoachNotesRow(CoachNotesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoachNotesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoachConversationDataTable : global::System.Data.TypedTableBase<CoachConversationRow> {
            
            private global::System.Data.DataColumn columnround;
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnvisible;
            
            private global::System.Data.DataColumn columnCoachConversation_Id;
            
            private global::System.Data.DataColumn columnCoachNotes_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationDataTable() {
                this.TableName = "CoachConversation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachConversationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoachConversationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn roundColumn {
                get {
                    return this.columnround;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachConversation_IdColumn {
                get {
                    return this.columnCoachConversation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachNotes_IdColumn {
                get {
                    return this.columnCoachNotes_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow this[int index] {
                get {
                    return ((CoachConversationRow)(this.Rows[index]));
                }
            }
            
            public event CoachConversationRowChangeEventHandler CoachConversationRowChanging;
            
            public event CoachConversationRowChangeEventHandler CoachConversationRowChanged;
            
            public event CoachConversationRowChangeEventHandler CoachConversationRowDeleting;
            
            public event CoachConversationRowChangeEventHandler CoachConversationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoachConversationRow(CoachConversationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow AddCoachConversationRow(byte round, string guid, bool visible, CoachNotesRow parentCoachNotesRowByCoachNotes_CoachConversation) {
                CoachConversationRow rowCoachConversationRow = ((CoachConversationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        round,
                        guid,
                        visible,
                        null,
                        null};
                if ((parentCoachNotesRowByCoachNotes_CoachConversation != null)) {
                    columnValuesArray[4] = parentCoachNotesRowByCoachNotes_CoachConversation[0];
                }
                rowCoachConversationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoachConversationRow);
                return rowCoachConversationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoachConversationDataTable cln = ((CoachConversationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoachConversationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnround = base.Columns["round"];
                this.columnguid = base.Columns["guid"];
                this.columnvisible = base.Columns["visible"];
                this.columnCoachConversation_Id = base.Columns["CoachConversation_Id"];
                this.columnCoachNotes_Id = base.Columns["CoachNotes_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnround = new global::System.Data.DataColumn("round", typeof(byte), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnround);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnvisible = new global::System.Data.DataColumn("visible", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvisible);
                this.columnCoachConversation_Id = new global::System.Data.DataColumn("CoachConversation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachConversation_Id);
                this.columnCoachNotes_Id = new global::System.Data.DataColumn("CoachNotes_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachNotes_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCoachConversation_Id}, true));
                this.columnround.AllowDBNull = false;
                this.columnround.Namespace = "";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnvisible.Namespace = "";
                this.columnCoachConversation_Id.AutoIncrement = true;
                this.columnCoachConversation_Id.AllowDBNull = false;
                this.columnCoachConversation_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow NewCoachConversationRow() {
                return ((CoachConversationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoachConversationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoachConversationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoachConversationRowChanged != null)) {
                    this.CoachConversationRowChanged(this, new CoachConversationRowChangeEvent(((CoachConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoachConversationRowChanging != null)) {
                    this.CoachConversationRowChanging(this, new CoachConversationRowChangeEvent(((CoachConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoachConversationRowDeleted != null)) {
                    this.CoachConversationRowDeleted(this, new CoachConversationRowChangeEvent(((CoachConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoachConversationRowDeleting != null)) {
                    this.CoachConversationRowDeleting(this, new CoachConversationRowChangeEvent(((CoachConversationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoachConversationRow(CoachConversationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoachConversationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoachNoteDataTable : global::System.Data.TypedTableBase<CoachNoteRow> {
            
            private global::System.Data.DataColumn columnDirection;
            
            private global::System.Data.DataColumn columnguid;
            
            private global::System.Data.DataColumn columnCoachNote_text;
            
            private global::System.Data.DataColumn columnCoachConversation_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteDataTable() {
                this.TableName = "CoachNote";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNoteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoachNoteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachNote_textColumn {
                get {
                    return this.columnCoachNote_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoachConversation_IdColumn {
                get {
                    return this.columnCoachConversation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow this[int index] {
                get {
                    return ((CoachNoteRow)(this.Rows[index]));
                }
            }
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowChanging;
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowChanged;
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowDeleting;
            
            public event CoachNoteRowChangeEventHandler CoachNoteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoachNoteRow(CoachNoteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow AddCoachNoteRow(string Direction, string guid, string CoachNote_text, CoachConversationRow parentCoachConversationRowByCoachConversation_CoachNote) {
                CoachNoteRow rowCoachNoteRow = ((CoachNoteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Direction,
                        guid,
                        CoachNote_text,
                        null};
                if ((parentCoachConversationRowByCoachConversation_CoachNote != null)) {
                    columnValuesArray[3] = parentCoachConversationRowByCoachConversation_CoachNote[3];
                }
                rowCoachNoteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoachNoteRow);
                return rowCoachNoteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoachNoteDataTable cln = ((CoachNoteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoachNoteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDirection = base.Columns["Direction"];
                this.columnguid = base.Columns["guid"];
                this.columnCoachNote_text = base.Columns["CoachNote_text"];
                this.columnCoachConversation_Id = base.Columns["CoachConversation_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDirection = new global::System.Data.DataColumn("Direction", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirection);
                this.columnguid = new global::System.Data.DataColumn("guid", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnguid);
                this.columnCoachNote_text = new global::System.Data.DataColumn("CoachNote_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnCoachNote_text);
                this.columnCoachConversation_Id = new global::System.Data.DataColumn("CoachConversation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCoachConversation_Id);
                this.columnDirection.AllowDBNull = false;
                this.columnDirection.Namespace = "";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Namespace = "";
                this.columnCoachNote_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow NewCoachNoteRow() {
                return ((CoachNoteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoachNoteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoachNoteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoachNoteRowChanged != null)) {
                    this.CoachNoteRowChanged(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoachNoteRowChanging != null)) {
                    this.CoachNoteRowChanging(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoachNoteRowDeleted != null)) {
                    this.CoachNoteRowDeleted(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoachNoteRowDeleting != null)) {
                    this.CoachNoteRowDeleting(this, new CoachNoteRowChangeEvent(((CoachNoteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoachNoteRow(CoachNoteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoachNoteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StoryProjectRow : global::System.Data.DataRow {
            
            private StoryProjectDataTable tableStoryProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryProjectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStoryProject = ((StoryProjectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    return ((string)(this[this.tableStoryProject.ProjectNameColumn]));
                }
                set {
                    this[this.tableStoryProject.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PanoramaFrontMatter {
                get {
                    try {
                        return ((string)(this[this.tableStoryProject.PanoramaFrontMatterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PanoramaFrontMatter\' in table \'StoryProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryProject.PanoramaFrontMatterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StoryProject_Id {
                get {
                    return ((int)(this[this.tableStoryProject.StoryProject_IdColumn]));
                }
                set {
                    this[this.tableStoryProject.StoryProject_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPanoramaFrontMatterNull() {
                return this.IsNull(this.tableStoryProject.PanoramaFrontMatterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPanoramaFrontMatterNull() {
                this[this.tableStoryProject.PanoramaFrontMatterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow[] GetMembersRows() {
                if ((this.Table.ChildRelations["StoryProject_Members"] == null)) {
                    return new MembersRow[0];
                }
                else {
                    return ((MembersRow[])(base.GetChildRows(this.Table.ChildRelations["StoryProject_Members"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow[] GetLanguagesRows() {
                if ((this.Table.ChildRelations["StoryProject_Languages"] == null)) {
                    return new LanguagesRow[0];
                }
                else {
                    return ((LanguagesRow[])(base.GetChildRows(this.Table.ChildRelations["StoryProject_Languages"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow[] GetstoriesRows() {
                if ((this.Table.ChildRelations["StoryProject_stories"] == null)) {
                    return new storiesRow[0];
                }
                else {
                    return ((storiesRow[])(base.GetChildRows(this.Table.ChildRelations["StoryProject_stories"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MembersRow : global::System.Data.DataRow {
            
            private MembersDataTable tableMembers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMembers = ((MembersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Members_Id {
                get {
                    return ((int)(this[this.tableMembers.Members_IdColumn]));
                }
                set {
                    this[this.tableMembers.Members_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StoryProject_Id {
                get {
                    try {
                        return ((int)(this[this.tableMembers.StoryProject_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryProject_Id\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.StoryProject_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow StoryProjectRow {
                get {
                    return ((StoryProjectRow)(this.GetParentRow(this.Table.ParentRelations["StoryProject_Members"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StoryProject_Members"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryProject_IdNull() {
                return this.IsNull(this.tableMembers.StoryProject_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryProject_IdNull() {
                this[this.tableMembers.StoryProject_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow[] GetMemberRows() {
                if ((this.Table.ChildRelations["Members_Member"] == null)) {
                    return new MemberRow[0];
                }
                else {
                    return ((MemberRow[])(base.GetChildRows(this.Table.ChildRelations["Members_Member"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MemberRow : global::System.Data.DataRow {
            
            private MemberDataTable tableMember;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MemberRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMember = ((MemberDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableMember.nameColumn]));
                }
                set {
                    this[this.tableMember.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberType {
                get {
                    return ((string)(this[this.tableMember.memberTypeColumn]));
                }
                set {
                    this[this.tableMember.memberTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberKey {
                get {
                    return ((string)(this[this.tableMember.memberKeyColumn]));
                }
                set {
                    this[this.tableMember.memberKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableMember.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'email\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string altPhone {
                get {
                    try {
                        return ((string)(this[this.tableMember.altPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'altPhone\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.altPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string phone {
                get {
                    try {
                        return ((string)(this[this.tableMember.phoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phone\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.phoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bioData {
                get {
                    try {
                        return ((string)(this[this.tableMember.bioDataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bioData\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.bioDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string skypeID {
                get {
                    try {
                        return ((string)(this[this.tableMember.skypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'skypeID\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.skypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string teamViewerID {
                get {
                    try {
                        return ((string)(this[this.tableMember.teamViewerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'teamViewerID\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.teamViewerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverrideVernacularKeyboard {
                get {
                    try {
                        return ((string)(this[this.tableMember.OverrideVernacularKeyboardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideVernacularKeyboard\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideVernacularKeyboardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverrideNationalBTKeyboard {
                get {
                    try {
                        return ((string)(this[this.tableMember.OverrideNationalBTKeyboardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideNationalBTKeyboard\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.OverrideNationalBTKeyboardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Members_Id {
                get {
                    try {
                        return ((int)(this[this.tableMember.Members_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Members_Id\' in table \'Member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMember.Members_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow MembersRow {
                get {
                    return ((MembersRow)(this.GetParentRow(this.Table.ParentRelations["Members_Member"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Members_Member"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.tableMember.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.tableMember.emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaltPhoneNull() {
                return this.IsNull(this.tableMember.altPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaltPhoneNull() {
                this[this.tableMember.altPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphoneNull() {
                return this.IsNull(this.tableMember.phoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphoneNull() {
                this[this.tableMember.phoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbioDataNull() {
                return this.IsNull(this.tableMember.bioDataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbioDataNull() {
                this[this.tableMember.bioDataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsskypeIDNull() {
                return this.IsNull(this.tableMember.skypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetskypeIDNull() {
                this[this.tableMember.skypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsteamViewerIDNull() {
                return this.IsNull(this.tableMember.teamViewerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetteamViewerIDNull() {
                this[this.tableMember.teamViewerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideVernacularKeyboardNull() {
                return this.IsNull(this.tableMember.OverrideVernacularKeyboardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideVernacularKeyboardNull() {
                this[this.tableMember.OverrideVernacularKeyboardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideNationalBTKeyboardNull() {
                return this.IsNull(this.tableMember.OverrideNationalBTKeyboardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideNationalBTKeyboardNull() {
                this[this.tableMember.OverrideNationalBTKeyboardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMembers_IdNull() {
                return this.IsNull(this.tableMember.Members_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMembers_IdNull() {
                this[this.tableMember.Members_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LanguagesRow : global::System.Data.DataRow {
            
            private LanguagesDataTable tableLanguages;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LanguagesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLanguages = ((LanguagesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Languages_Id {
                get {
                    return ((int)(this[this.tableLanguages.Languages_IdColumn]));
                }
                set {
                    this[this.tableLanguages.Languages_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StoryProject_Id {
                get {
                    try {
                        return ((int)(this[this.tableLanguages.StoryProject_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryProject_Id\' in table \'Languages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguages.StoryProject_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow StoryProjectRow {
                get {
                    return ((StoryProjectRow)(this.GetParentRow(this.Table.ParentRelations["StoryProject_Languages"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StoryProject_Languages"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryProject_IdNull() {
                return this.IsNull(this.tableLanguages.StoryProject_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryProject_IdNull() {
                this[this.tableLanguages.StoryProject_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularLangRow[] GetVernacularLangRows() {
                if ((this.Table.ChildRelations["Languages_VernacularLang"] == null)) {
                    return new VernacularLangRow[0];
                }
                else {
                    return ((VernacularLangRow[])(base.GetChildRows(this.Table.ChildRelations["Languages_VernacularLang"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTLangRow[] GetNationalBTLangRows() {
                if ((this.Table.ChildRelations["Languages_NationalBTLang"] == null)) {
                    return new NationalBTLangRow[0];
                }
                else {
                    return ((NationalBTLangRow[])(base.GetChildRows(this.Table.ChildRelations["Languages_NationalBTLang"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTLangRow[] GetInternationalBTLangRows() {
                if ((this.Table.ChildRelations["Languages_InternationalBTLang"] == null)) {
                    return new InternationalBTLangRow[0];
                }
                else {
                    return ((InternationalBTLangRow[])(base.GetChildRows(this.Table.ChildRelations["Languages_InternationalBTLang"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VernacularLangRow : global::System.Data.DataRow {
            
            private VernacularLangDataTable tableVernacularLang;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VernacularLangRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVernacularLang = ((VernacularLangDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableVernacularLang.nameColumn]));
                }
                set {
                    this[this.tableVernacularLang.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string code {
                get {
                    return ((string)(this[this.tableVernacularLang.codeColumn]));
                }
                set {
                    this[this.tableVernacularLang.codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontName {
                get {
                    return ((string)(this[this.tableVernacularLang.FontNameColumn]));
                }
                set {
                    this[this.tableVernacularLang.FontNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FontSize {
                get {
                    return ((float)(this[this.tableVernacularLang.FontSizeColumn]));
                }
                set {
                    this[this.tableVernacularLang.FontSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontColor {
                get {
                    return ((string)(this[this.tableVernacularLang.FontColorColumn]));
                }
                set {
                    this[this.tableVernacularLang.FontColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SentenceFinalPunct {
                get {
                    return ((string)(this[this.tableVernacularLang.SentenceFinalPunctColumn]));
                }
                set {
                    this[this.tableVernacularLang.SentenceFinalPunctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Keyboard {
                get {
                    try {
                        return ((string)(this[this.tableVernacularLang.KeyboardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Keyboard\' in table \'VernacularLang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacularLang.KeyboardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RTL {
                get {
                    try {
                        return ((bool)(this[this.tableVernacularLang.RTLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RTL\' in table \'VernacularLang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacularLang.RTLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Languages_Id {
                get {
                    try {
                        return ((int)(this[this.tableVernacularLang.Languages_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Languages_Id\' in table \'VernacularLang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVernacularLang.Languages_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow LanguagesRow {
                get {
                    return ((LanguagesRow)(this.GetParentRow(this.Table.ParentRelations["Languages_VernacularLang"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Languages_VernacularLang"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyboardNull() {
                return this.IsNull(this.tableVernacularLang.KeyboardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyboardNull() {
                this[this.tableVernacularLang.KeyboardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRTLNull() {
                return this.IsNull(this.tableVernacularLang.RTLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRTLNull() {
                this[this.tableVernacularLang.RTLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLanguages_IdNull() {
                return this.IsNull(this.tableVernacularLang.Languages_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLanguages_IdNull() {
                this[this.tableVernacularLang.Languages_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NationalBTLangRow : global::System.Data.DataRow {
            
            private NationalBTLangDataTable tableNationalBTLang;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NationalBTLangRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNationalBTLang = ((NationalBTLangDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableNationalBTLang.nameColumn]));
                }
                set {
                    this[this.tableNationalBTLang.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string code {
                get {
                    return ((string)(this[this.tableNationalBTLang.codeColumn]));
                }
                set {
                    this[this.tableNationalBTLang.codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontName {
                get {
                    return ((string)(this[this.tableNationalBTLang.FontNameColumn]));
                }
                set {
                    this[this.tableNationalBTLang.FontNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FontSize {
                get {
                    return ((float)(this[this.tableNationalBTLang.FontSizeColumn]));
                }
                set {
                    this[this.tableNationalBTLang.FontSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontColor {
                get {
                    return ((string)(this[this.tableNationalBTLang.FontColorColumn]));
                }
                set {
                    this[this.tableNationalBTLang.FontColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SentenceFinalPunct {
                get {
                    return ((string)(this[this.tableNationalBTLang.SentenceFinalPunctColumn]));
                }
                set {
                    this[this.tableNationalBTLang.SentenceFinalPunctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Keyboard {
                get {
                    try {
                        return ((string)(this[this.tableNationalBTLang.KeyboardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Keyboard\' in table \'NationalBTLang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNationalBTLang.KeyboardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RTL {
                get {
                    try {
                        return ((bool)(this[this.tableNationalBTLang.RTLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RTL\' in table \'NationalBTLang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNationalBTLang.RTLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Languages_Id {
                get {
                    try {
                        return ((int)(this[this.tableNationalBTLang.Languages_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Languages_Id\' in table \'NationalBTLang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNationalBTLang.Languages_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow LanguagesRow {
                get {
                    return ((LanguagesRow)(this.GetParentRow(this.Table.ParentRelations["Languages_NationalBTLang"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Languages_NationalBTLang"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyboardNull() {
                return this.IsNull(this.tableNationalBTLang.KeyboardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyboardNull() {
                this[this.tableNationalBTLang.KeyboardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRTLNull() {
                return this.IsNull(this.tableNationalBTLang.RTLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRTLNull() {
                this[this.tableNationalBTLang.RTLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLanguages_IdNull() {
                return this.IsNull(this.tableNationalBTLang.Languages_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLanguages_IdNull() {
                this[this.tableNationalBTLang.Languages_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InternationalBTLangRow : global::System.Data.DataRow {
            
            private InternationalBTLangDataTable tableInternationalBTLang;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InternationalBTLangRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInternationalBTLang = ((InternationalBTLangDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableInternationalBTLang.nameColumn]));
                }
                set {
                    this[this.tableInternationalBTLang.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string code {
                get {
                    return ((string)(this[this.tableInternationalBTLang.codeColumn]));
                }
                set {
                    this[this.tableInternationalBTLang.codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontName {
                get {
                    return ((string)(this[this.tableInternationalBTLang.FontNameColumn]));
                }
                set {
                    this[this.tableInternationalBTLang.FontNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FontSize {
                get {
                    return ((float)(this[this.tableInternationalBTLang.FontSizeColumn]));
                }
                set {
                    this[this.tableInternationalBTLang.FontSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontColor {
                get {
                    return ((string)(this[this.tableInternationalBTLang.FontColorColumn]));
                }
                set {
                    this[this.tableInternationalBTLang.FontColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SentenceFinalPunct {
                get {
                    return ((string)(this[this.tableInternationalBTLang.SentenceFinalPunctColumn]));
                }
                set {
                    this[this.tableInternationalBTLang.SentenceFinalPunctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Keyboard {
                get {
                    try {
                        return ((string)(this[this.tableInternationalBTLang.KeyboardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Keyboard\' in table \'InternationalBTLang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInternationalBTLang.KeyboardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RTL {
                get {
                    try {
                        return ((bool)(this[this.tableInternationalBTLang.RTLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RTL\' in table \'InternationalBTLang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInternationalBTLang.RTLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Languages_Id {
                get {
                    try {
                        return ((int)(this[this.tableInternationalBTLang.Languages_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Languages_Id\' in table \'InternationalBTLang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInternationalBTLang.Languages_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow LanguagesRow {
                get {
                    return ((LanguagesRow)(this.GetParentRow(this.Table.ParentRelations["Languages_InternationalBTLang"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Languages_InternationalBTLang"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyboardNull() {
                return this.IsNull(this.tableInternationalBTLang.KeyboardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyboardNull() {
                this[this.tableInternationalBTLang.KeyboardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRTLNull() {
                return this.IsNull(this.tableInternationalBTLang.RTLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRTLNull() {
                this[this.tableInternationalBTLang.RTLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLanguages_IdNull() {
                return this.IsNull(this.tableInternationalBTLang.Languages_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLanguages_IdNull() {
                this[this.tableInternationalBTLang.Languages_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class storiesRow : global::System.Data.DataRow {
            
            private storiesDataTable tablestories;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestories = ((storiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetName {
                get {
                    return ((string)(this[this.tablestories.SetNameColumn]));
                }
                set {
                    this[this.tablestories.SetNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stories_Id {
                get {
                    return ((int)(this[this.tablestories.stories_IdColumn]));
                }
                set {
                    this[this.tablestories.stories_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StoryProject_Id {
                get {
                    try {
                        return ((int)(this[this.tablestories.StoryProject_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryProject_Id\' in table \'stories\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestories.StoryProject_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow StoryProjectRow {
                get {
                    return ((StoryProjectRow)(this.GetParentRow(this.Table.ParentRelations["StoryProject_stories"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StoryProject_stories"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryProject_IdNull() {
                return this.IsNull(this.tablestories.StoryProject_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryProject_IdNull() {
                this[this.tablestories.StoryProject_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow[] GetstoryRows() {
                if ((this.Table.ChildRelations["stories_story"] == null)) {
                    return new storyRow[0];
                }
                else {
                    return ((storyRow[])(base.GetChildRows(this.Table.ChildRelations["stories_story"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class storyRow : global::System.Data.DataRow {
            
            private storyDataTable tablestory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal storyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestory = ((storyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tablestory.nameColumn]));
                }
                set {
                    this[this.tablestory.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stage {
                get {
                    return ((string)(this[this.tablestory.stageColumn]));
                }
                set {
                    this[this.tablestory.stageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tablestory.guidColumn]));
                }
                set {
                    this[this.tablestory.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime stageDateTimeStamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablestory.stageDateTimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stageDateTimeStamp\' in table \'story\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestory.stageDateTimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int story_Id {
                get {
                    return ((int)(this[this.tablestory.story_IdColumn]));
                }
                set {
                    this[this.tablestory.story_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stories_Id {
                get {
                    try {
                        return ((int)(this[this.tablestory.stories_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stories_Id\' in table \'story\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestory.stories_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow storiesRow {
                get {
                    return ((storiesRow)(this.GetParentRow(this.Table.ParentRelations["stories_story"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["stories_story"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstageDateTimeStampNull() {
                return this.IsNull(this.tablestory.stageDateTimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstageDateTimeStampNull() {
                this[this.tablestory.stageDateTimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstories_IdNull() {
                return this.IsNull(this.tablestory.stories_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstories_IdNull() {
                this[this.tablestory.stories_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow[] GetCraftingInfoRows() {
                if ((this.Table.ChildRelations["story_CraftingInfo"] == null)) {
                    return new CraftingInfoRow[0];
                }
                else {
                    return ((CraftingInfoRow[])(base.GetChildRows(this.Table.ChildRelations["story_CraftingInfo"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow[] GetversesRows() {
                if ((this.Table.ChildRelations["story_verses"] == null)) {
                    return new versesRow[0];
                }
                else {
                    return ((versesRow[])(base.GetChildRows(this.Table.ChildRelations["story_verses"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CraftingInfoRow : global::System.Data.DataRow {
            
            private CraftingInfoDataTable tableCraftingInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CraftingInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCraftingInfo = ((CraftingInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool NonBiblicalStory {
                get {
                    try {
                        return ((bool)(this[this.tableCraftingInfo.NonBiblicalStoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NonBiblicalStory\' in table \'CraftingInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCraftingInfo.NonBiblicalStoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoryPurpose {
                get {
                    try {
                        return ((string)(this[this.tableCraftingInfo.StoryPurposeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryPurpose\' in table \'CraftingInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCraftingInfo.StoryPurposeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResourcesUsed {
                get {
                    try {
                        return ((string)(this[this.tableCraftingInfo.ResourcesUsedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResourcesUsed\' in table \'CraftingInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCraftingInfo.ResourcesUsedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    return ((int)(this[this.tableCraftingInfo.CraftingInfo_IdColumn]));
                }
                set {
                    this[this.tableCraftingInfo.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int story_Id {
                get {
                    try {
                        return ((int)(this[this.tableCraftingInfo.story_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'story_Id\' in table \'CraftingInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCraftingInfo.story_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow storyRow {
                get {
                    return ((storyRow)(this.GetParentRow(this.Table.ParentRelations["story_CraftingInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["story_CraftingInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNonBiblicalStoryNull() {
                return this.IsNull(this.tableCraftingInfo.NonBiblicalStoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNonBiblicalStoryNull() {
                this[this.tableCraftingInfo.NonBiblicalStoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryPurposeNull() {
                return this.IsNull(this.tableCraftingInfo.StoryPurposeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryPurposeNull() {
                this[this.tableCraftingInfo.StoryPurposeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResourcesUsedNull() {
                return this.IsNull(this.tableCraftingInfo.ResourcesUsedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResourcesUsedNull() {
                this[this.tableCraftingInfo.ResourcesUsedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstory_IdNull() {
                return this.IsNull(this.tableCraftingInfo.story_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstory_IdNull() {
                this[this.tableCraftingInfo.story_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow[] GetStoryCrafterRows() {
                if ((this.Table.ChildRelations["CraftingInfo_StoryCrafter"] == null)) {
                    return new StoryCrafterRow[0];
                }
                else {
                    return ((StoryCrafterRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_StoryCrafter"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow[] GetBackTranslatorRows() {
                if ((this.Table.ChildRelations["CraftingInfo_BackTranslator"] == null)) {
                    return new BackTranslatorRow[0];
                }
                else {
                    return ((BackTranslatorRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_BackTranslator"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow[] GetTestsRows() {
                if ((this.Table.ChildRelations["CraftingInfo_Tests"] == null)) {
                    return new TestsRow[0];
                }
                else {
                    return ((TestsRow[])(base.GetChildRows(this.Table.ChildRelations["CraftingInfo_Tests"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StoryCrafterRow : global::System.Data.DataRow {
            
            private StoryCrafterDataTable tableStoryCrafter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoryCrafterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStoryCrafter = ((StoryCrafterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableStoryCrafter.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'StoryCrafter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryCrafter.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableStoryCrafter.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'StoryCrafter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStoryCrafter.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_StoryCrafter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_StoryCrafter"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableStoryCrafter.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableStoryCrafter.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableStoryCrafter.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableStoryCrafter.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BackTranslatorRow : global::System.Data.DataRow {
            
            private BackTranslatorDataTable tableBackTranslator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BackTranslatorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBackTranslator = ((BackTranslatorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableBackTranslator.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'BackTranslator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBackTranslator.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableBackTranslator.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'BackTranslator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBackTranslator.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_BackTranslator"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_BackTranslator"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableBackTranslator.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableBackTranslator.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableBackTranslator.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableBackTranslator.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestsRow : global::System.Data.DataRow {
            
            private TestsDataTable tableTests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTests = ((TestsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Tests_Id {
                get {
                    return ((int)(this[this.tableTests.Tests_IdColumn]));
                }
                set {
                    this[this.tableTests.Tests_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CraftingInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableTests.CraftingInfo_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CraftingInfo_Id\' in table \'Tests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTests.CraftingInfo_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow CraftingInfoRow {
                get {
                    return ((CraftingInfoRow)(this.GetParentRow(this.Table.ParentRelations["CraftingInfo_Tests"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CraftingInfo_Tests"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCraftingInfo_IdNull() {
                return this.IsNull(this.tableTests.CraftingInfo_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCraftingInfo_IdNull() {
                this[this.tableTests.CraftingInfo_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRow[] GetTestRows() {
                if ((this.Table.ChildRelations["Tests_Test"] == null)) {
                    return new TestRow[0];
                }
                else {
                    return ((TestRow[])(base.GetChildRows(this.Table.ChildRelations["Tests_Test"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestRow : global::System.Data.DataRow {
            
            private TestDataTable tableTest;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTest = ((TestDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableTest.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'Test\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTest.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Tests_Id {
                get {
                    try {
                        return ((int)(this[this.tableTest.Tests_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tests_Id\' in table \'Test\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTest.Tests_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow TestsRow {
                get {
                    return ((TestsRow)(this.GetParentRow(this.Table.ParentRelations["Tests_Test"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Tests_Test"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableTest.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableTest.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTests_IdNull() {
                return this.IsNull(this.tableTest.Tests_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTests_IdNull() {
                this[this.tableTest.Tests_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class versesRow : global::System.Data.DataRow {
            
            private versesDataTable tableverses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal versesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableverses = ((versesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verses_Id {
                get {
                    return ((int)(this[this.tableverses.verses_IdColumn]));
                }
                set {
                    this[this.tableverses.verses_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int story_Id {
                get {
                    try {
                        return ((int)(this[this.tableverses.story_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'story_Id\' in table \'verses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableverses.story_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow storyRow {
                get {
                    return ((storyRow)(this.GetParentRow(this.Table.ParentRelations["story_verses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["story_verses"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstory_IdNull() {
                return this.IsNull(this.tableverses.story_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstory_IdNull() {
                this[this.tableverses.story_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow[] GetverseRows() {
                if ((this.Table.ChildRelations["verses_verse"] == null)) {
                    return new verseRow[0];
                }
                else {
                    return ((verseRow[])(base.GetChildRows(this.Table.ChildRelations["verses_verse"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class verseRow : global::System.Data.DataRow {
            
            private verseDataTable tableverse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal verseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableverse = ((verseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableverse.guidColumn]));
                }
                set {
                    this[this.tableverse.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Vernacular {
                get {
                    try {
                        return ((string)(this[this.tableverse.VernacularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Vernacular\' in table \'verse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableverse.VernacularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NationalBT {
                get {
                    try {
                        return ((string)(this[this.tableverse.NationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NationalBT\' in table \'verse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableverse.NationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InternationalBT {
                get {
                    try {
                        return ((string)(this[this.tableverse.InternationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InternationalBT\' in table \'verse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableverse.InternationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    return ((int)(this[this.tableverse.verse_IdColumn]));
                }
                set {
                    this[this.tableverse.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verses_Id {
                get {
                    try {
                        return ((int)(this[this.tableverse.verses_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verses_Id\' in table \'verse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableverse.verses_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow versesRow {
                get {
                    return ((versesRow)(this.GetParentRow(this.Table.ParentRelations["verses_verse"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verses_verse"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVernacularNull() {
                return this.IsNull(this.tableverse.VernacularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVernacularNull() {
                this[this.tableverse.VernacularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNationalBTNull() {
                return this.IsNull(this.tableverse.NationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNationalBTNull() {
                this[this.tableverse.NationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInternationalBTNull() {
                return this.IsNull(this.tableverse.InternationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInternationalBTNull() {
                this[this.tableverse.InternationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverses_IdNull() {
                return this.IsNull(this.tableverse.verses_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverses_IdNull() {
                this[this.tableverse.verses_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow[] GetanchorsRows() {
                if ((this.Table.ChildRelations["verse_anchors"] == null)) {
                    return new anchorsRow[0];
                }
                else {
                    return ((anchorsRow[])(base.GetChildRows(this.Table.ChildRelations["verse_anchors"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow[] GetTestQuestionsRows() {
                if ((this.Table.ChildRelations["verse_TestQuestions"] == null)) {
                    return new TestQuestionsRow[0];
                }
                else {
                    return ((TestQuestionsRow[])(base.GetChildRows(this.Table.ChildRelations["verse_TestQuestions"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow[] GetRetellingsRows() {
                if ((this.Table.ChildRelations["verse_Retellings"] == null)) {
                    return new RetellingsRow[0];
                }
                else {
                    return ((RetellingsRow[])(base.GetChildRows(this.Table.ChildRelations["verse_Retellings"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow[] GetConsultantNotesRows() {
                if ((this.Table.ChildRelations["verse_ConsultantNotes"] == null)) {
                    return new ConsultantNotesRow[0];
                }
                else {
                    return ((ConsultantNotesRow[])(base.GetChildRows(this.Table.ChildRelations["verse_ConsultantNotes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow[] GetCoachNotesRows() {
                if ((this.Table.ChildRelations["verse_CoachNotes"] == null)) {
                    return new CoachNotesRow[0];
                }
                else {
                    return ((CoachNotesRow[])(base.GetChildRows(this.Table.ChildRelations["verse_CoachNotes"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class anchorsRow : global::System.Data.DataRow {
            
            private anchorsDataTable tableanchors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal anchorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableanchors = ((anchorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool keyTermChecked {
                get {
                    try {
                        return ((bool)(this[this.tableanchors.keyTermCheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'keyTermChecked\' in table \'anchors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanchors.keyTermCheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int anchors_Id {
                get {
                    return ((int)(this[this.tableanchors.anchors_IdColumn]));
                }
                set {
                    this[this.tableanchors.anchors_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableanchors.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'anchors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanchors.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_anchors"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_anchors"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskeyTermCheckedNull() {
                return this.IsNull(this.tableanchors.keyTermCheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkeyTermCheckedNull() {
                this[this.tableanchors.keyTermCheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableanchors.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableanchors.verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow[] GetanchorRows() {
                if ((this.Table.ChildRelations["anchors_anchor"] == null)) {
                    return new anchorRow[0];
                }
                else {
                    return ((anchorRow[])(base.GetChildRows(this.Table.ChildRelations["anchors_anchor"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class anchorRow : global::System.Data.DataRow {
            
            private anchorDataTable tableanchor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal anchorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableanchor = ((anchorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jumpTarget {
                get {
                    return ((string)(this[this.tableanchor.jumpTargetColumn]));
                }
                set {
                    this[this.tableanchor.jumpTargetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string toolTip {
                get {
                    try {
                        return ((string)(this[this.tableanchor.toolTipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'toolTip\' in table \'anchor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanchor.toolTipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int anchor_Id {
                get {
                    return ((int)(this[this.tableanchor.anchor_IdColumn]));
                }
                set {
                    this[this.tableanchor.anchor_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int anchors_Id {
                get {
                    try {
                        return ((int)(this[this.tableanchor.anchors_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'anchors_Id\' in table \'anchor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanchor.anchors_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow anchorsRow {
                get {
                    return ((anchorsRow)(this.GetParentRow(this.Table.ParentRelations["anchors_anchor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["anchors_anchor"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstoolTipNull() {
                return this.IsNull(this.tableanchor.toolTipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettoolTipNull() {
                this[this.tableanchor.toolTipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isanchors_IdNull() {
                return this.IsNull(this.tableanchor.anchors_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setanchors_IdNull() {
                this[this.tableanchor.anchors_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow[] GetexegeticalHelpsRows() {
                if ((this.Table.ChildRelations["anchor_exegeticalHelps"] == null)) {
                    return new exegeticalHelpsRow[0];
                }
                else {
                    return ((exegeticalHelpsRow[])(base.GetChildRows(this.Table.ChildRelations["anchor_exegeticalHelps"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class exegeticalHelpsRow : global::System.Data.DataRow {
            
            private exegeticalHelpsDataTable tableexegeticalHelps;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal exegeticalHelpsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableexegeticalHelps = ((exegeticalHelpsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exegeticalHelps_Id {
                get {
                    return ((int)(this[this.tableexegeticalHelps.exegeticalHelps_IdColumn]));
                }
                set {
                    this[this.tableexegeticalHelps.exegeticalHelps_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int anchor_Id {
                get {
                    try {
                        return ((int)(this[this.tableexegeticalHelps.anchor_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'anchor_Id\' in table \'exegeticalHelps\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableexegeticalHelps.anchor_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow anchorRow {
                get {
                    return ((anchorRow)(this.GetParentRow(this.Table.ParentRelations["anchor_exegeticalHelps"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["anchor_exegeticalHelps"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isanchor_IdNull() {
                return this.IsNull(this.tableexegeticalHelps.anchor_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setanchor_IdNull() {
                this[this.tableexegeticalHelps.anchor_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRow[] GetexegeticalHelpRows() {
                if ((this.Table.ChildRelations["exegeticalHelps_exegeticalHelp"] == null)) {
                    return new exegeticalHelpRow[0];
                }
                else {
                    return ((exegeticalHelpRow[])(base.GetChildRows(this.Table.ChildRelations["exegeticalHelps_exegeticalHelp"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class exegeticalHelpRow : global::System.Data.DataRow {
            
            private exegeticalHelpDataTable tableexegeticalHelp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal exegeticalHelpRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableexegeticalHelp = ((exegeticalHelpDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string exegeticalHelp_Column {
                get {
                    try {
                        return ((string)(this[this.tableexegeticalHelp.exegeticalHelp_ColumnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'exegeticalHelp_Column\' in table \'exegeticalHelp\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableexegeticalHelp.exegeticalHelp_ColumnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exegeticalHelps_Id {
                get {
                    try {
                        return ((int)(this[this.tableexegeticalHelp.exegeticalHelps_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'exegeticalHelps_Id\' in table \'exegeticalHelp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableexegeticalHelp.exegeticalHelps_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow exegeticalHelpsRow {
                get {
                    return ((exegeticalHelpsRow)(this.GetParentRow(this.Table.ParentRelations["exegeticalHelps_exegeticalHelp"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["exegeticalHelps_exegeticalHelp"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexegeticalHelp_ColumnNull() {
                return this.IsNull(this.tableexegeticalHelp.exegeticalHelp_ColumnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexegeticalHelp_ColumnNull() {
                this[this.tableexegeticalHelp.exegeticalHelp_ColumnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexegeticalHelps_IdNull() {
                return this.IsNull(this.tableexegeticalHelp.exegeticalHelps_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexegeticalHelps_IdNull() {
                this[this.tableexegeticalHelp.exegeticalHelps_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestQuestionsRow : global::System.Data.DataRow {
            
            private TestQuestionsDataTable tableTestQuestions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestQuestions = ((TestQuestionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestions_Id {
                get {
                    return ((int)(this[this.tableTestQuestions.TestQuestions_IdColumn]));
                }
                set {
                    this[this.tableTestQuestions.TestQuestions_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableTestQuestions.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'TestQuestions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestions.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_TestQuestions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_TestQuestions"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableTestQuestions.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableTestQuestions.verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow[] GetTestQuestionRows() {
                if ((this.Table.ChildRelations["TestQuestions_TestQuestion"] == null)) {
                    return new TestQuestionRow[0];
                }
                else {
                    return ((TestQuestionRow[])(base.GetChildRows(this.Table.ChildRelations["TestQuestions_TestQuestion"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestQuestionRow : global::System.Data.DataRow {
            
            private TestQuestionDataTable tableTestQuestion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestQuestionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestQuestion = ((TestQuestionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool visible {
                get {
                    try {
                        return ((bool)(this[this.tableTestQuestion.visibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'visible\' in table \'TestQuestion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestion.visibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableTestQuestion.guidColumn]));
                }
                set {
                    this[this.tableTestQuestion.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TQVernacular {
                get {
                    try {
                        return ((string)(this[this.tableTestQuestion.TQVernacularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TQVernacular\' in table \'TestQuestion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestion.TQVernacularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TQNationalBT {
                get {
                    try {
                        return ((string)(this[this.tableTestQuestion.TQNationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TQNationalBT\' in table \'TestQuestion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestion.TQNationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TQInternationalBT {
                get {
                    try {
                        return ((string)(this[this.tableTestQuestion.TQInternationalBTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TQInternationalBT\' in table \'TestQuestion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestion.TQInternationalBTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestion_Id {
                get {
                    return ((int)(this[this.tableTestQuestion.TestQuestion_IdColumn]));
                }
                set {
                    this[this.tableTestQuestion.TestQuestion_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestions_Id {
                get {
                    try {
                        return ((int)(this[this.tableTestQuestion.TestQuestions_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestQuestions_Id\' in table \'TestQuestion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestQuestion.TestQuestions_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow TestQuestionsRow {
                get {
                    return ((TestQuestionsRow)(this.GetParentRow(this.Table.ParentRelations["TestQuestions_TestQuestion"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestQuestions_TestQuestion"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvisibleNull() {
                return this.IsNull(this.tableTestQuestion.visibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvisibleNull() {
                this[this.tableTestQuestion.visibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTQVernacularNull() {
                return this.IsNull(this.tableTestQuestion.TQVernacularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTQVernacularNull() {
                this[this.tableTestQuestion.TQVernacularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTQNationalBTNull() {
                return this.IsNull(this.tableTestQuestion.TQNationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTQNationalBTNull() {
                this[this.tableTestQuestion.TQNationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTQInternationalBTNull() {
                return this.IsNull(this.tableTestQuestion.TQInternationalBTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTQInternationalBTNull() {
                this[this.tableTestQuestion.TQInternationalBTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestQuestions_IdNull() {
                return this.IsNull(this.tableTestQuestion.TestQuestions_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestQuestions_IdNull() {
                this[this.tableTestQuestion.TestQuestions_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow[] GetAnswersRows() {
                if ((this.Table.ChildRelations["TestQuestion_Answers"] == null)) {
                    return new AnswersRow[0];
                }
                else {
                    return ((AnswersRow[])(base.GetChildRows(this.Table.ChildRelations["TestQuestion_Answers"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnswersRow : global::System.Data.DataRow {
            
            private AnswersDataTable tableAnswers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnswersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnswers = ((AnswersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Answers_Id {
                get {
                    return ((int)(this[this.tableAnswers.Answers_IdColumn]));
                }
                set {
                    this[this.tableAnswers.Answers_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestQuestion_Id {
                get {
                    try {
                        return ((int)(this[this.tableAnswers.TestQuestion_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestQuestion_Id\' in table \'Answers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnswers.TestQuestion_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow TestQuestionRow {
                get {
                    return ((TestQuestionRow)(this.GetParentRow(this.Table.ParentRelations["TestQuestion_Answers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TestQuestion_Answers"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestQuestion_IdNull() {
                return this.IsNull(this.tableAnswers.TestQuestion_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestQuestion_IdNull() {
                this[this.tableAnswers.TestQuestion_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRow[] GetanswerRows() {
                if ((this.Table.ChildRelations["Answers_answer"] == null)) {
                    return new answerRow[0];
                }
                else {
                    return ((answerRow[])(base.GetChildRows(this.Table.ChildRelations["Answers_answer"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class answerRow : global::System.Data.DataRow {
            
            private answerDataTable tableanswer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal answerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableanswer = ((answerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableanswer.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'answer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanswer.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string answer_text {
                get {
                    try {
                        return ((string)(this[this.tableanswer.answer_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'answer_text\' in table \'answer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanswer.answer_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Answers_Id {
                get {
                    try {
                        return ((int)(this[this.tableanswer.Answers_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Answers_Id\' in table \'answer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableanswer.Answers_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow AnswersRow {
                get {
                    return ((AnswersRow)(this.GetParentRow(this.Table.ParentRelations["Answers_answer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Answers_answer"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableanswer.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableanswer.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isanswer_textNull() {
                return this.IsNull(this.tableanswer.answer_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setanswer_textNull() {
                this[this.tableanswer.answer_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnswers_IdNull() {
                return this.IsNull(this.tableanswer.Answers_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnswers_IdNull() {
                this[this.tableanswer.Answers_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RetellingsRow : global::System.Data.DataRow {
            
            private RetellingsDataTable tableRetellings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRetellings = ((RetellingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Retellings_Id {
                get {
                    return ((int)(this[this.tableRetellings.Retellings_IdColumn]));
                }
                set {
                    this[this.tableRetellings.Retellings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableRetellings.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'Retellings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRetellings.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_Retellings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_Retellings"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableRetellings.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableRetellings.verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow[] GetRetellingRows() {
                if ((this.Table.ChildRelations["Retellings_Retelling"] == null)) {
                    return new RetellingRow[0];
                }
                else {
                    return ((RetellingRow[])(base.GetChildRows(this.Table.ChildRelations["Retellings_Retelling"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RetellingRow : global::System.Data.DataRow {
            
            private RetellingDataTable tableRetelling;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetellingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRetelling = ((RetellingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberID {
                get {
                    try {
                        return ((string)(this[this.tableRetelling.memberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'memberID\' in table \'Retelling\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRetelling.memberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Retelling_text {
                get {
                    try {
                        return ((string)(this[this.tableRetelling.Retelling_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Retelling_text\' in table \'Retelling\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRetelling.Retelling_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Retellings_Id {
                get {
                    try {
                        return ((int)(this[this.tableRetelling.Retellings_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Retellings_Id\' in table \'Retelling\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRetelling.Retellings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow RetellingsRow {
                get {
                    return ((RetellingsRow)(this.GetParentRow(this.Table.ParentRelations["Retellings_Retelling"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Retellings_Retelling"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberIDNull() {
                return this.IsNull(this.tableRetelling.memberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberIDNull() {
                this[this.tableRetelling.memberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetelling_textNull() {
                return this.IsNull(this.tableRetelling.Retelling_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetelling_textNull() {
                this[this.tableRetelling.Retelling_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetellings_IdNull() {
                return this.IsNull(this.tableRetelling.Retellings_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetellings_IdNull() {
                this[this.tableRetelling.Retellings_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsultantNotesRow : global::System.Data.DataRow {
            
            private ConsultantNotesDataTable tableConsultantNotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNotesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantNotes = ((ConsultantNotesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantNotes_Id {
                get {
                    return ((int)(this[this.tableConsultantNotes.ConsultantNotes_IdColumn]));
                }
                set {
                    this[this.tableConsultantNotes.ConsultantNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableConsultantNotes.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'ConsultantNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantNotes.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_ConsultantNotes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_ConsultantNotes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableConsultantNotes.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableConsultantNotes.verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow[] GetConsultantConversationRows() {
                if ((this.Table.ChildRelations["ConsultantNotes_ConsultantConversation"] == null)) {
                    return new ConsultantConversationRow[0];
                }
                else {
                    return ((ConsultantConversationRow[])(base.GetChildRows(this.Table.ChildRelations["ConsultantNotes_ConsultantConversation"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsultantConversationRow : global::System.Data.DataRow {
            
            private ConsultantConversationDataTable tableConsultantConversation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantConversationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantConversation = ((ConsultantConversationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte round {
                get {
                    return ((byte)(this[this.tableConsultantConversation.roundColumn]));
                }
                set {
                    this[this.tableConsultantConversation.roundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableConsultantConversation.guidColumn]));
                }
                set {
                    this[this.tableConsultantConversation.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool visible {
                get {
                    try {
                        return ((bool)(this[this.tableConsultantConversation.visibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'visible\' in table \'ConsultantConversation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantConversation.visibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantConversation_Id {
                get {
                    return ((int)(this[this.tableConsultantConversation.ConsultantConversation_IdColumn]));
                }
                set {
                    this[this.tableConsultantConversation.ConsultantConversation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantNotes_Id {
                get {
                    try {
                        return ((int)(this[this.tableConsultantConversation.ConsultantNotes_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantNotes_Id\' in table \'ConsultantConversation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableConsultantConversation.ConsultantNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow ConsultantNotesRow {
                get {
                    return ((ConsultantNotesRow)(this.GetParentRow(this.Table.ParentRelations["ConsultantNotes_ConsultantConversation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ConsultantNotes_ConsultantConversation"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvisibleNull() {
                return this.IsNull(this.tableConsultantConversation.visibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvisibleNull() {
                this[this.tableConsultantConversation.visibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantNotes_IdNull() {
                return this.IsNull(this.tableConsultantConversation.ConsultantNotes_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantNotes_IdNull() {
                this[this.tableConsultantConversation.ConsultantNotes_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow[] GetConsultantNoteRows() {
                if ((this.Table.ChildRelations["ConsultantConversation_ConsultantNote"] == null)) {
                    return new ConsultantNoteRow[0];
                }
                else {
                    return ((ConsultantNoteRow[])(base.GetChildRows(this.Table.ChildRelations["ConsultantConversation_ConsultantNote"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsultantNoteRow : global::System.Data.DataRow {
            
            private ConsultantNoteDataTable tableConsultantNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantNoteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantNote = ((ConsultantNoteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Direction {
                get {
                    return ((string)(this[this.tableConsultantNote.DirectionColumn]));
                }
                set {
                    this[this.tableConsultantNote.DirectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableConsultantNote.guidColumn]));
                }
                set {
                    this[this.tableConsultantNote.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsultantNote_text {
                get {
                    return ((string)(this[this.tableConsultantNote.ConsultantNote_textColumn]));
                }
                set {
                    this[this.tableConsultantNote.ConsultantNote_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantConversation_Id {
                get {
                    try {
                        return ((int)(this[this.tableConsultantNote.ConsultantConversation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantConversation_Id\' in table \'ConsultantNote\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableConsultantNote.ConsultantConversation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow ConsultantConversationRow {
                get {
                    return ((ConsultantConversationRow)(this.GetParentRow(this.Table.ParentRelations["ConsultantConversation_ConsultantNote"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ConsultantConversation_ConsultantNote"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantConversation_IdNull() {
                return this.IsNull(this.tableConsultantNote.ConsultantConversation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantConversation_IdNull() {
                this[this.tableConsultantNote.ConsultantConversation_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoachNotesRow : global::System.Data.DataRow {
            
            private CoachNotesDataTable tableCoachNotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNotesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoachNotes = ((CoachNotesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachNotes_Id {
                get {
                    return ((int)(this[this.tableCoachNotes.CoachNotes_IdColumn]));
                }
                set {
                    this[this.tableCoachNotes.CoachNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int verse_Id {
                get {
                    try {
                        return ((int)(this[this.tableCoachNotes.verse_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'verse_Id\' in table \'CoachNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachNotes.verse_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow verseRow {
                get {
                    return ((verseRow)(this.GetParentRow(this.Table.ParentRelations["verse_CoachNotes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["verse_CoachNotes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isverse_IdNull() {
                return this.IsNull(this.tableCoachNotes.verse_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setverse_IdNull() {
                this[this.tableCoachNotes.verse_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow[] GetCoachConversationRows() {
                if ((this.Table.ChildRelations["CoachNotes_CoachConversation"] == null)) {
                    return new CoachConversationRow[0];
                }
                else {
                    return ((CoachConversationRow[])(base.GetChildRows(this.Table.ChildRelations["CoachNotes_CoachConversation"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoachConversationRow : global::System.Data.DataRow {
            
            private CoachConversationDataTable tableCoachConversation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachConversationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoachConversation = ((CoachConversationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte round {
                get {
                    return ((byte)(this[this.tableCoachConversation.roundColumn]));
                }
                set {
                    this[this.tableCoachConversation.roundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableCoachConversation.guidColumn]));
                }
                set {
                    this[this.tableCoachConversation.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool visible {
                get {
                    try {
                        return ((bool)(this[this.tableCoachConversation.visibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'visible\' in table \'CoachConversation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachConversation.visibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachConversation_Id {
                get {
                    return ((int)(this[this.tableCoachConversation.CoachConversation_IdColumn]));
                }
                set {
                    this[this.tableCoachConversation.CoachConversation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachNotes_Id {
                get {
                    try {
                        return ((int)(this[this.tableCoachConversation.CoachNotes_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoachNotes_Id\' in table \'CoachConversation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachConversation.CoachNotes_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow CoachNotesRow {
                get {
                    return ((CoachNotesRow)(this.GetParentRow(this.Table.ParentRelations["CoachNotes_CoachConversation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CoachNotes_CoachConversation"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvisibleNull() {
                return this.IsNull(this.tableCoachConversation.visibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvisibleNull() {
                this[this.tableCoachConversation.visibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoachNotes_IdNull() {
                return this.IsNull(this.tableCoachConversation.CoachNotes_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoachNotes_IdNull() {
                this[this.tableCoachConversation.CoachNotes_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow[] GetCoachNoteRows() {
                if ((this.Table.ChildRelations["CoachConversation_CoachNote"] == null)) {
                    return new CoachNoteRow[0];
                }
                else {
                    return ((CoachNoteRow[])(base.GetChildRows(this.Table.ChildRelations["CoachConversation_CoachNote"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoachNoteRow : global::System.Data.DataRow {
            
            private CoachNoteDataTable tableCoachNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoachNoteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoachNote = ((CoachNoteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Direction {
                get {
                    return ((string)(this[this.tableCoachNote.DirectionColumn]));
                }
                set {
                    this[this.tableCoachNote.DirectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guid {
                get {
                    return ((string)(this[this.tableCoachNote.guidColumn]));
                }
                set {
                    this[this.tableCoachNote.guidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CoachNote_text {
                get {
                    return ((string)(this[this.tableCoachNote.CoachNote_textColumn]));
                }
                set {
                    this[this.tableCoachNote.CoachNote_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoachConversation_Id {
                get {
                    try {
                        return ((int)(this[this.tableCoachNote.CoachConversation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoachConversation_Id\' in table \'CoachNote\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoachNote.CoachConversation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow CoachConversationRow {
                get {
                    return ((CoachConversationRow)(this.GetParentRow(this.Table.ParentRelations["CoachConversation_CoachNote"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CoachConversation_CoachNote"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoachConversation_IdNull() {
                return this.IsNull(this.tableCoachNote.CoachConversation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoachConversation_IdNull() {
                this[this.tableCoachNote.CoachConversation_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StoryProjectRowChangeEvent : global::System.EventArgs {
            
            private StoryProjectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRowChangeEvent(StoryProjectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MembersRowChangeEvent : global::System.EventArgs {
            
            private MembersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRowChangeEvent(MembersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MemberRowChangeEvent : global::System.EventArgs {
            
            private MemberRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRowChangeEvent(MemberRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MemberRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LanguagesRowChangeEvent : global::System.EventArgs {
            
            private LanguagesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRowChangeEvent(LanguagesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VernacularLangRowChangeEvent : global::System.EventArgs {
            
            private VernacularLangRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularLangRowChangeEvent(VernacularLangRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VernacularLangRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NationalBTLangRowChangeEvent : global::System.EventArgs {
            
            private NationalBTLangRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTLangRowChangeEvent(NationalBTLangRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NationalBTLangRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InternationalBTLangRowChangeEvent : global::System.EventArgs {
            
            private InternationalBTLangRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTLangRowChangeEvent(InternationalBTLangRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InternationalBTLangRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class storiesRowChangeEvent : global::System.EventArgs {
            
            private storiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRowChangeEvent(storiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class storyRowChangeEvent : global::System.EventArgs {
            
            private storyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRowChangeEvent(storyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public storyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CraftingInfoRowChangeEvent : global::System.EventArgs {
            
            private CraftingInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRowChangeEvent(CraftingInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CraftingInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StoryCrafterRowChangeEvent : global::System.EventArgs {
            
            private StoryCrafterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRowChangeEvent(StoryCrafterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoryCrafterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BackTranslatorRowChangeEvent : global::System.EventArgs {
            
            private BackTranslatorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRowChangeEvent(BackTranslatorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackTranslatorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestsRowChangeEvent : global::System.EventArgs {
            
            private TestsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRowChangeEvent(TestsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestRowChangeEvent : global::System.EventArgs {
            
            private TestRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRowChangeEvent(TestRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class versesRowChangeEvent : global::System.EventArgs {
            
            private versesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRowChangeEvent(versesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public versesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class verseRowChangeEvent : global::System.EventArgs {
            
            private verseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRowChangeEvent(verseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public verseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class anchorsRowChangeEvent : global::System.EventArgs {
            
            private anchorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRowChangeEvent(anchorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class anchorRowChangeEvent : global::System.EventArgs {
            
            private anchorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRowChangeEvent(anchorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public anchorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class exegeticalHelpsRowChangeEvent : global::System.EventArgs {
            
            private exegeticalHelpsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRowChangeEvent(exegeticalHelpsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class exegeticalHelpRowChangeEvent : global::System.EventArgs {
            
            private exegeticalHelpRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRowChangeEvent(exegeticalHelpRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public exegeticalHelpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestQuestionsRowChangeEvent : global::System.EventArgs {
            
            private TestQuestionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRowChangeEvent(TestQuestionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestQuestionRowChangeEvent : global::System.EventArgs {
            
            private TestQuestionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRowChangeEvent(TestQuestionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestQuestionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnswersRowChangeEvent : global::System.EventArgs {
            
            private AnswersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRowChangeEvent(AnswersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnswersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class answerRowChangeEvent : global::System.EventArgs {
            
            private answerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRowChangeEvent(answerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public answerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RetellingsRowChangeEvent : global::System.EventArgs {
            
            private RetellingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRowChangeEvent(RetellingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RetellingRowChangeEvent : global::System.EventArgs {
            
            private RetellingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRowChangeEvent(RetellingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetellingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsultantNotesRowChangeEvent : global::System.EventArgs {
            
            private ConsultantNotesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRowChangeEvent(ConsultantNotesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsultantConversationRowChangeEvent : global::System.EventArgs {
            
            private ConsultantConversationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRowChangeEvent(ConsultantConversationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantConversationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsultantNoteRowChangeEvent : global::System.EventArgs {
            
            private ConsultantNoteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRowChangeEvent(ConsultantNoteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantNoteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoachNotesRowChangeEvent : global::System.EventArgs {
            
            private CoachNotesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRowChangeEvent(CoachNotesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoachConversationRowChangeEvent : global::System.EventArgs {
            
            private CoachConversationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRowChangeEvent(CoachConversationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachConversationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoachNoteRowChangeEvent : global::System.EventArgs {
            
            private CoachNoteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRowChangeEvent(CoachNoteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoachNoteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591