<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBoxProjectNameInstructions.Text" xml:space="preserve">
    <value>Type the name you want to give the project in the box above. If this project will be stored in an internet repository for sharing with other team members, then check the box above also. Note that if you are using an Internet repository, then you must make the name of project exactly the same as the repository name on the internet. For example, if the internet repository is at the URL, "http://hg-private.languagedepot.org/snwmtn-test", then the project name *must* be "snwmtn-test"</value>
  </data>
  <data name="textBoxInternetRepoInstructions.Text" xml:space="preserve">
    <value>Enter the information about the internet repository in the boxes above, most of which will be given to you by the project coordinator. The host address will be something like "http://hg-private.languagedepot.org". A username and password are normally needed to access the repository and to keep track of who made what changes. The final box will show the full address by which the repository can be accessed, which includes the host address, the username and password, and finally the project name from the previous tab. This link can be shared with the other team members (who will have to substitute their own username and password) to access the project from their computers.</value>
  </data>
  <data name="textBox2.Text" xml:space="preserve">
    <value>Indicate which languages will be used in this project. Check the 'Story language' box if the Project Facilitator will be typing in the story in the language of the stories (aka. the vernacular language). Check the 'National/Regional language back-translation' box if the project will include a back-translation in a national or regional language. Check the 'English back-translation' box if the project will include an English back-translation (or some other international language). If you want to have an extra box for a free translation of any of the languages, check the box for 'Free translation'. Note, if you are creating stories in English, then you would only check the box next to the 'Story language' (since that is the language of the stories) and you wouldn't then have an English back-translation.</value>
  </data>
  <data name="textBoxLanguageTabInstructionsVernacular.Text" xml:space="preserve">
    <value>Enter the information about this language: the name, the ethnologue code (if you know it), the keyboard associated with the language, the font to use in displaying it (including color), and whether it’s a right-to-left language. In the 'Sentence full stop' box, enter the punctuation characters used in this language to end a sentence. For example, in English, it is the period '.', and in Hindi, it is the Devanagari Danda, '।'. Also include the '?!:' characters and any other sentence final punctuation that may be special in your language (e.g. in Arabic, the question mark '؟'). These punctuation characters will be used to split the lines of the story into sentences. If you want smaller lines, you can also include the ',' character. There should be no spaces between these characters, and be sure the first one is the normal (most-common) full stop character (it will be added by the program if a particular line doesn’t have one)</value>
  </data>
  <data name="textBoxLanguageTabInstructionsNationalBT.Text" xml:space="preserve">
    <value>Enter the information about this language: the name, the ethnologue code (if you know it), the keyboard associated with the language, the font to use in displaying it (including color), and whether it’s a right-to-left language. In the 'Sentence full stop' box, enter the punctuation characters used in this language to end a sentence. For example, in English, it is the period '.', and in Hindi, it is the Devanagari Danda, '।'. Also include the '?!:' characters and any other sentence final punctuation that may be special in your language (e.g. in Arabic, the question mark '؟'). These punctuation characters will be used to split the lines of the story into sentences. If you want smaller lines, you can also include the ',' character. There should be no spaces between these characters, and be sure the first one is the normal (most-common) full stop character (it will be added by the program if a particular line doesn’t have one)</value>
  </data>
  <data name="textBoxLanguageTabInstructionsEnglishBT.Text" xml:space="preserve">
    <value>Enter the information about this language: the name, the ethnologue code (if you know it), the keyboard associated with the language, the font to use in displaying it (including color), and whether it’s a right-to-left language. In the 'Sentence full stop' box, enter the punctuation characters used in this language to end a sentence. For example, in English, it is the period '.', and in Hindi, it is the Devanagari Danda, '।'. Also include the '?!:' characters and any other sentence final punctuation that may be special in your language (e.g. in Arabic, the question mark '؟'). These punctuation characters will be used to split the lines of the story into sentences. If you want smaller lines, you can also include the ',' character. There should be no spaces between these characters, and be sure the first one is the normal (most-common) full stop character (it will be added by the program if a particular line doesn’t have one)</value>
  </data>
  <data name="textBoxLanguageTabInstructionsFreeTranslation.Text" xml:space="preserve">
    <value>Enter the information about this language: the name, the ethnologue code (if you know it), the keyboard associated with the language, the font to use in displaying it (including color), and whether it’s a right-to-left language. In the 'Sentence full stop' box, enter the punctuation characters used in this language to end a sentence. For example, in English, it is the period '.', and in Hindi, it is the Devanagari Danda, '।'. Also include the '?!:' characters and any other sentence final punctuation that may be special in your language (e.g. in Arabic, the question mark '؟'). These punctuation characters will be used to split the lines of the story into sentences. If you want smaller lines, you can also include the ',' character. There should be no spaces between these characters, and be sure the first one is the normal (most-common) full stop character (it will be added by the program if a particular line doesn’t have one)</value>
  </data>
  <data name="textBoxTeamMembersInstructionBox.Text" xml:space="preserve">
    <value>Every project will have at least one project facilitator, who will be responsible for typing in the stories and/or back-translation(s). This should be someone besides the story crafter. If the UNSs or project facilitator can not do back-translation into English, but there is someone outside the team who is willing to do it, then you can check the box next to 'Outside English back-translator' for that person. This only makes sense, though, if the project facilitator enters a national/regional back-translation from which the 'Outside English back-translator' will do the English BT. DO NOT check this box if the project facilitator will be doing the English BT. Remember that the first back-translation should be done by a UNS. Finally, indicate whether this project will involve "manage with coaching" (i.e. a consultant-in-training plus a coach) or an "Independent Consultant" for checking the stories. These roles will determine which states a story will go through during the consultant check process.</value>
  </data>
  <data name="textBox1.Text" xml:space="preserve">
    <value>You can use the Adapt It program to help make a literal word-by-word (or phrase-by-phrase) adaptation into one or both of the back-translation languages. This tab displays the options that are allowed based on the configured set of languages from the Languages tab (e.g. if you have only a story language and the English BT selected on the Languages tab, then only the 'Adapt It for Story language to English BT adaptation' option will be displayed)</value>
  </data>
  <metadata name="toolTip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="fontDialog.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>102, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAQAAAABAAoAQAAJgAAACAgEAAAAAQA6AIAAE4BAAAoAAAAEAAAACAAAAABAAQAAAAAAIAA
        AAAAAAAAAAAAABAAAAAQAAAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAICAgADAwMAAAAD/AAD/
        AAAA//8A/wAAAP8A/wD//wAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAA
        AAAAAAAzAAAAAAAAMzMAAAAAADMzMzAAAAADMzMzMwAAAAMz//8zAAAAMz//P/MwAAAzP/M/8zAAAAM/
        8//zAAAAAzP//zMAAAAAMzMzMAAAAAAAMzAAAAAA/8EAAP+YAAD/gAAA/8AAAP75AAD84wAA8MkAAMBB
        AACAPwAAgD8AAAAfAAAAHwAAgD8AAIA/AADAfwAA8f8AACgAAAAgAAAAQAAAAAEABAAAAAAAAAIAAAAA
        AAAAAAAAEAAAABAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD/
        /wD/AAAA/wD/AP//AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAzAAAAAAAAAA
        AAAAAAAAADMwAAAAAAAAAAAAAAAAAAMzMAAAAAAAAAAAAAAAAAADMzAAAAAAAAAAAAADMzMAMzMAAAAA
        AAAAAAADMzMzMzMzAAAAAAAAAAADMzMzMzMzMwAAAAAAAAAAMzP///MzMzMAAAAAAAAAAzM//zP/MzMz
        AAAAAAAAADMzP/MzP/MzMwAAAAAAAAAzM/8zMzP/MzMAAAAAAAADMzP/MzMz/zMzMAAAAAAAAzMz/zMz
        M/8zMzAAAAAAAAMzM/8zMzP/MzMwAAAAAAAAMzP/MzMz/zMzAAAAAAAAADMz/z//P/MzMwAAAAAAAAAA
        Mz//8//zMzAAAAAAAAAAAAMzM///MzAAAAAAAAAAAAAAAzMzMzMAAAAAAAAAAAAAAAADMzMwAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////
        ////////////////////////////////9////+f////H////h////4f//4MOD/4ADOf4AAgT8AAIQ+AA
        CMPAAAwDwAAPx4AABx+AAAR/gAAEz8AADg/AAA//8AAf//gAf//+AP///4H//////////////////w==
</value>
  </data>
</root>